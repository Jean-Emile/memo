#!/usr/bin/env python3

import os
import sys
sys.path.insert(0, '%s/../../elle/drake/src' % os.path.dirname(__file__))

import drake
import drake.cxx

def find_python3():
  for minor in range(9, 0, -1):
    for dir in ['/usr/local',
                # From MacPorts.
                '/opt/local/Library',
                # From Brew.
                '/usr/local/Cellar/python3/3.5.1',
                '/usr/local/Cellar/python3/3.6.0']:
      p = '{}/Frameworks/Python.framework/Versions/3.{}'.format(dir, minor)
      if os.path.isdir(p):
        return p

python3 = find_python3()
print("using python3 =", python3, file=sys.stderr)

tk = drake.cxx.GccToolkit('clang++')

cfg = drake.cxx.Config()
cfg.enable_debug_symbols()
cfg.enable_optimization()

# This is the configuration used to generate the Infinit packages.
#os.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.7'
cfg.use_local_libcxx = True
cfg.flag('-stdlib=libc++')
cfg.flag('-ftemplate-depth=512')
# Useful, but costly.  Should not be the default build mode.
#cfg.flag('-fsanitize=undefined')
#cfg.flag('-fno-sanitize=vptr')  # Triggers plenty of errors, I dunno why ATM.

with drake.Drake('../..') as d:
  # When using MacPorts, valgrind/valgrind.h is in /opt/local/include,
  # together with Boost and many others that take precedence over our
  # local copies.  Let the user install locally a valgrind directory
  # in our build tree, as a means to control includes.
  cfg.add_local_include_path('valgrind')
  d.run(
    python = python3,
    cxx_toolkit = tk,
    cxx_config = cfg,
    prefix = '_install',
  )
