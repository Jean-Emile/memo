syntax = "proto3";

service Doughnut {
   rpc make_immutable_block(CHBData) returns (BlockOrException) {}
   rpc make_mutable_block(Empty) returns (BlockOrException) {}
   rpc make_named_block(NamedBlockKey) returns (BlockOrException) {}
   rpc named_block_address(NamedBlockKey) returns (AddressOrException) {}
   rpc fetch(Fetch) returns (BlockOrException) {}
   rpc insert(Insert) returns (EmptyOrException) {}
   rpc update(Update) returns (EmptyOrException) {}
   rpc remove(Address) returns (EmptyOrException) {}
}

message NamedBlockKey {
  bytes key = 1;
}

message AddressOrException {
  string type = 1;
  oneof data {
    bytes address = 2;
    ExceptionPtr exepcion_ptr = 3;
  }
}

message Insert {
  Block block = 1;
}

message Update {
  Block block = 1;
}

message CHBData {
  bytes data = 1;
  bytes owner = 2;
}

message Bytes {
  bytes data = 1;
}

message Fetch {
  bytes address = 1;
  bool decrypt_data = 2;
}

message Address {
  bytes address = 1;
}

message Empty {
}

message Version {
  int64 major = 1;
  int64 minor = 2;
  int64 subminor = 3;
}

message ACLEntry {
  Key key_koh = 1;
  bool read = 2;
  bool write = 3;
  bytes token = 4;
}

message PublicKey
{
  bytes rsa = 1;
}

message Key {
  string type = 1;
  PublicKey public_key = 2;
}

message Block {
  string type = 1;
  bytes address = 2;
  bytes data = 3;
  bytes salt = 4;
  // CHB
  bytes owner = 5;
  // NB,OKB,ACB
  bytes signature = 6;
  // NB
  bytes owner_rsa = 7;
  bytes name = 8;
  // OKB, ACB
  bytes data_plain = 22;
  Key key_koh = 9;
  int64 version = 10;
  // ACB
  int64 editor = 11;
  bytes owner_token = 12;
  repeated ACLEntry acl = 13;
  int64 data_version = 14;
  bytes data_signature = 15;
  bool world_readable = 16;
  bool world_writable = 17;
  repeated ACLEntry group_acl = 18;
  repeated int64 group_version = 19;
  bool deleted = 20;
  Version seal_version = 21;
}

message Exception
{
  string type = 1;
  // Exception
  bytes message = 2;
  // MissingBlock
  bytes address = 3;
  // Conflict
  Block current = 4;
  // ValidationFailed
  // TooFewPeers
};

message ExceptionPtr {
  Exception exception = 1;
}

message BlockOrException {
  string type = 1;
  oneof data {
    Block block = 2;
    ExceptionPtr exception_ptr = 3;
  }
}


message EmptyOrException {
  string type = 1;
  oneof data {
    bool bool = 2;
    ExceptionPtr exception_ptr = 3;
  }
}