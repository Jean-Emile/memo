import drake
import drake.cxx

grpc_lib = None
grpc = None

with open(str(drake.path_source('../../../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

class GRPCGen(drake.Builder):
  def __init__(self, proto, protoc = None, grpc_cpp_plugin = None):
    self.__proto = proto
    base = proto.split('.')[0]
    dsts = drake.nodes(
      base + '.pb.h',
      base + '.pb.cc',
      base + '.grpc.pb.h',
      base + '.grpc.pb.cc',
    )
    srcs = drake.nodes(proto)
    if protoc is not None:
      self.__protoc = protoc
      srcs += drake.nodes(protoc)
    else:
      self.__protoc = 'protoc'
    if grpc_cpp_plugin is not None:
      self.__grpc_cpp_plugin = grpc_cpp_plugin
      srcs += drake.nodes(grpc_cpp_plugin)
    else:
      self.__grpc_cpp_plugin = '/usr/local/bin/grpc_cpp_plugin'
    self.__dsts = dsts
    self.__prefix = drake.Drake.current.prefix
    drake.Builder.__init__(self, srcs = srcs, dsts = dsts)
  @property
  def dsts(self):
    return self.__dsts
  def execute(self):
    if not self.cmd('protoc grpc %s' % self.__proto,
                    self.protoc_grpc_cmd):
      return False
    return self.cmd('protoc cc %s' % self.__proto,
                    self.protoc_cc_cmd)
  @property
  def protoc_grpc_cmd(self):
    return [self.__protoc,
            '-I', drake.path_source() / self.__prefix,
            '--grpc_out=%s' % self.__prefix,
            # FIXME find me
            '--plugin=protoc-gen-grpc=%s' % self.__grpc_cpp_plugin,
            drake.path_source() / self.__prefix / self.__proto]
  @property
  def protoc_cc_cmd(self):
    return [self.__protoc,
            '-I', drake.path_source() / self.__prefix,
            '--cpp_out=%s' % self.__prefix,
            drake.path_source() / self.__prefix / self.__proto]
  def hash(self):
    return ''.join([
      str(self.protoc_grpc_cmd),
      str(self.protoc_cc_cmd),
    ])
  def __str__(self):
    return '%s' % (self.__class__.__name__)
  
def configure(
    cxx_toolkit,
    cxx_config
):
  global grpc_lib, grpc
  grpc = drake.include('grpc', cxx_toolkit, cxx_config,
    cmake_env = {
      'GO_EXECUTABLE': '/usr/lib/go-1.7/bin/go',
      'CMAKE_BUILD_TYPE' : 'Debug',
    }
    )
  genkv = GRPCGen('kv.proto', protoc = grpc.protoc, grpc_cpp_plugin = grpc.grpc_cpp_plugin)
  genfs = GRPCGen('fs.proto', protoc = grpc.protoc, grpc_cpp_plugin = grpc.grpc_cpp_plugin)

  srcs = genkv.dsts + genfs.dsts + drake.nodes('grpc.cc', 'filesystem.cc')
  cxx_config_grpc = grpc.cxx_config
  grpc_lib = drake.cxx.DynLib('grpc', srcs, cxx_toolkit, cxx_config_grpc)

  kv_client = drake.cxx.Executable('kv-client',
    genkv.dsts + drake.nodes('kv-client.cc'),
    cxx_toolkit, cxx_config_grpc)