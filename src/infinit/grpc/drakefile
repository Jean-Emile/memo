import drake
import drake.cxx
import drake.go
import os

grpc_lib = None
grpc = None
sources = None
cxx_config_grpc = None

class GRPCGen(drake.Builder):
  def __init__(self, proto, protoc = None, grpc_cpp_plugin = None):
    self.__proto = proto
    base = proto.split('.')[0]
    dsts = drake.nodes(
      base + '.pb.h',
      base + '.pb.cc',
      base + '.grpc.pb.h',
      base + '.grpc.pb.cc',
    )
    srcs = drake.nodes(proto)
    if protoc is not None:
      self.__protoc = protoc
      srcs += drake.nodes(protoc)
    else:
      self.__protoc = 'protoc'
    if grpc_cpp_plugin is not None:
      self.__grpc_cpp_plugin = grpc_cpp_plugin
      srcs += drake.nodes(grpc_cpp_plugin)
    else:
      self.__grpc_cpp_plugin = '/usr/local/bin/grpc_cpp_plugin'
    self.__dsts = dsts
    self.__prefix = drake.Drake.current.prefix
    drake.Builder.__init__(self, srcs = srcs, dsts = dsts)
  @property
  def dsts(self):
    return self.__dsts
  def execute(self):
    if not self.cmd('protoc grpc %s' % self.__proto,
                    self.protoc_grpc_cmd):
      return False
    return self.cmd('protoc cc %s' % self.__proto,
                    self.protoc_cc_cmd)
  @property
  def protoc_grpc_cmd(self):
    return [self.__protoc,
            '-I', drake.path_source() / self.__prefix,
            '--grpc_out=%s' % self.__prefix,
            # FIXME find me
            '--plugin=protoc-gen-grpc=%s' % self.__grpc_cpp_plugin,
            drake.path_source() / self.__prefix / self.__proto]
  @property
  def protoc_cc_cmd(self):
    return [self.__protoc,
            '-I', drake.path_source() / self.__prefix,
            '--cpp_out=%s' % self.__prefix,
            drake.path_source() / self.__prefix / self.__proto]
  def hash(self):
    return ''.join([
      str(self.protoc_grpc_cmd),
      str(self.protoc_cc_cmd),
    ])
  def __str__(self):
    return '%s' % (self.__class__.__name__)

def configure(
    cxx_toolkit,
    cxx_config,
    git = None,
):
  global grpc_lib, grpc, sources
  go = drake.go.Toolkit()
  grpc = drake.include(
    'grpc',
    cxx_toolkit,
    cxx_config,
    cmake_env = {
      'GO_EXECUTABLE': go.go,
    })
  gendn = GRPCGen('doughnut.proto', protoc = grpc.protoc, grpc_cpp_plugin = grpc.grpc_cpp_plugin)
  genfs = GRPCGen('fs.proto', protoc = grpc.protoc, grpc_cpp_plugin = grpc.grpc_cpp_plugin)

  srcs = genfs.dsts + gendn.dsts + drake.nodes(
    'doughnut.cc',
    'grpc.cc',
    'filesystem.cc',
    'serializer.cc',
    'serializer.hh'
  )
  sources = srcs
  # make a convenience grpc lib with all libgrpc stuff
  grpc_lib = drake.cxx.DynLib('grpc', grpc.sources, cxx_toolkit, grpc.cxx_config_lib)

  ## ------------- ##
  ## Docker client ##
  ## ------------- ##

  git = git or drake.git.Git()

  docker_path = drake.Path('docker')
  docker_image = drake.docker.DockerImage(
    'docker', 'infinit-client-python', git.description())
  docker_file = drake.docker.DockerFile(
    docker_path / 'Dockerfile',
    image = 'alpine',
    maintainer = 'Infinit <contact@infinit.sh>',
    labels = {
      'version': git.description(),
    })
  docker_file.run('apk add --update python3' \
                  '&& apk add --virtual build-deps python3-dev gcc g++' \
                  '&& pip3 install grpcio ' \
                  '&& apk del build-deps ' \
                  '&& rm -rf /var/cache/apk/*')
  docker_file.env('PYTHONPATH', '/root')
  docker_file.add(drake.copy(drake.node('doughnut.py'), docker_path, strip_prefix = True), '/root/')
  docker_file.entry_point(
    ['/usr/bin/env', 'python3', '-i', '-m', 'doughnut'])
  drake.docker.DockerBuilder(docker_image, docker_file)
