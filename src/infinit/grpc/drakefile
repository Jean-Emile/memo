import drake
import drake.cxx
import drake.go
import os

grpc_lib = None
grpc = None
sources = None
cxx_config_grpc = None

class GRPCGen(drake.Builder):

  def __init__(self, proto, protoc, plugin, targets):
    self.__proto = proto
    if protoc is None:
      self.__protoc = drake.node(drake.which.which('protoc'))
    self.__protoc = protoc
    self.__plugin = plugin
    self.__output = drake.path_build()
    super().__init__([proto, protoc, plugin], targets)

  @property
  def proto(self):
    return self.__proto

  @property
  def protoc(self):
    return self.__protoc

  @property
  def plugin(self):
    return self.__plugin

  @property
  def output_dir(self):
    return self.__output


class GRPCCxxGen(GRPCGen):

  def __init__(self, proto, protoc = None, plugin = None):
    name = proto.name_relative
    dsts = drake.nodes(
      name.with_extension('pb.h'),
      name.with_extension('pb.cc'),
      name.with_extension('grpc.pb.h'),
      name.with_extension('grpc.pb.cc'),
    )
    srcs = []
    if plugin is None:
      plugin = drake.node('/usr/local/bin/grpc_cpp_plugin')
    super().__init__(proto, protoc = protoc, plugin = plugin, targets = dsts)

  def execute(self):
    self.cmd('GRPC protoc %s' % self.proto, self.protoc_grpc_cmd, throw = True)
    self.cmd('GRPC protoc cc %s' % self.proto, self.protoc_cc_cmd, throw = True)
    return True

  @property
  def protoc_grpc_cmd(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--grpc_out=%s' % self.output_dir,
      '--plugin=protoc-gen-grpc=%s' % self.plugin.path(),
      self.proto.path(),
    ]

  @property
  def protoc_cc_cmd(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--cpp_out=%s' % self.output_dir,
      self.proto.path(),
    ]

  def hash(self):
    return {
      'grpc-cmd': list(map(str, self.protoc_grpc_cmd)),
      'protoc-cmd': list(map(str, self.protoc_cc_cmd)),
    }


class GRPCPyGen(GRPCGen):

  def __init__(self, proto, protoc = None, plugin = None):
    name = proto.name_relative.without_last_extension()
    dsts = drake.nodes(
      '{}_pb2.py'.format(name),
      '{}_pb2_grpc.py'.format(name),
    )
    srcs = []
    if plugin is None:
      plugin = drake.node('/usr/local/bin/grpc_cpp_plugin')
    super().__init__(proto, protoc = protoc, plugin = plugin, targets = dsts)

  def execute(self):
    self.cmd('GRPC protoc python %s' % self.proto, self.command, throw = True)
    return True

  @property
  def command(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--python_out=%s' % self.output_dir,
      '--grpc_python_out=%s' % self.output_dir,
      '--plugin=protoc-gen-grpc_python=%s' % self.plugin.path(),
      self.proto.path(),
    ]

  def hash(self):
    return list(map(str, self.command))


def configure(
    cxx_toolkit,
    cxx_config,
    git = None,
):
  global grpc_lib, grpc, sources
  go = drake.go.Toolkit()
  grpc = drake.include(
    'grpc',
    cxx_toolkit,
    cxx_config,
    cmake_env = {
      'GO_EXECUTABLE': go.go,
    })
  doughnut_proto = drake.node('doughnut.proto')
  gendn = GRPCCxxGen(
    doughnut_proto,
    protoc = drake.node(grpc.protoc),
    plugin = drake.node(grpc.grpc_cpp_plugin))
  genfs = GRPCCxxGen(
    drake.node('fs.proto'),
    protoc = drake.node(grpc.protoc),
    plugin = drake.node(grpc.grpc_cpp_plugin))
  srcs = genfs.targets() + gendn.targets() + drake.nodes(
    'doughnut.cc',
    'grpc.cc',
    'filesystem.cc',
    'serializer.cc',
    'serializer.hh'
  )
  sources = srcs
  # make a convenience grpc lib with all libgrpc stuff
  grpc_lib = drake.cxx.DynLib('grpc', grpc.sources, cxx_toolkit, grpc.cxx_config_lib)

  ## -------------------- ##
  ## Docker python client ##
  ## -------------------- ##

  git = git or drake.git.Git()

  grpcgen_py = GRPCPyGen(doughnut_proto,
                         protoc = drake.node(grpc.protoc),
                         plugin = drake.node(grpc.grpc_python_plugin))

  docker_path = drake.Path('docker')
  docker_image = drake.docker.DockerImage(
    'docker', 'infinit-client-python', git.description())
  docker_file = drake.docker.DockerFile(
    docker_path / 'Dockerfile',
    image = 'alpine',
    maintainer = 'Infinit <contact@infinit.sh>',
    labels = {
      'version': git.description(),
    })
  docker_file.run('apk add --update python3' \
                  '&& apk add --virtual build-deps python3-dev gcc g++' \
                  '&& pip3 install grpcio ' \
                  '&& apk del build-deps ' \
                  '&& rm -rf /var/cache/apk/*')
  docker_file.env('PYTHONPATH', '/root')
  docker_file.add(drake.copy([drake.node('doughnut.py')] + grpcgen_py.targets(),
                             docker_path, strip_prefix = True), '/root/')
  docker_file.entry_point(
    ['/usr/bin/env', 'python3', '-i', '-m', 'doughnut'])
  drake.docker.DockerBuilder(docker_image, docker_file)
