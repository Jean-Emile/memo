import os

import drake
import drake.go

kv_bin = None
rule_build = None
rule_check = None
rule_tests = None

def configure(
  go_toolkit,
  go_config,
  grpc,
  infinit_cli,
):
  global kv_bin, rule_build, rule_check, rule_tests

  windows = go_toolkit.os == 'windows'

  rule_build = drake.Rule('build')
  rule_check = drake.Rule('check')
  rule_tests = drake.Rule('tests')

  local_config = drake.go.Config(go_config)

  gen_doughnut = grpc.GRPCGoGen(grpc.doughnut_proto, grpc.grpc.protoc,
                                toolkit = go_toolkit)
  doughnut_grpc = drake.copy(gen_doughnut.targets(), 'src/doughnut',
                             strip_prefix = True)
  gen_kv_service = grpc.GRPCGoGen(drake.node('protobuf/service.proto'),
                                  grpc.grpc.protoc,
                                  toolkit = go_toolkit)
  kv_grpc = drake.copy(gen_kv_service.targets(), 'src/kv/service',
                       strip_prefix = True)
  gen_kv_data = grpc.GRPCGoGen(drake.node('protobuf/data.proto'),
                               grpc.grpc.protoc,
                               toolkit = go_toolkit)
  kv_data = drake.copy(gen_kv_data.targets(), 'src/kv/data',
                       strip_prefix = True)
  local_config.add_include_path(drake.path_build())

  # XXX: Dynamic dependency fetching does not work in parallel for some
  # packages so declare them statically. This is the case when a single git repo
  # contains several dependencies â€“ grpc, protobuf, etc.
  grpc_package_tgts = \
    [drake.node(t % (go_toolkit.path, go_toolkit.platform_str())) for t in [
    # '%s/pkg/%s/github.com/golang/protobuf/proto.a',
    # '%s/pkg/%s/github.com/golang/protobuf/ptypes/any.a',
    '%s/pkg/%s/golang.org/x/net/context.a',
    '%s/pkg/%s/golang.org/x/net/http2/hpack.a',
    '%s/pkg/%s/golang.org/x/net/http2.a',
    '%s/pkg/%s/golang.org/x/net/idna.a',
    '%s/pkg/%s/golang.org/x/net/internal/timeseries.a',
    '%s/pkg/%s/golang.org/x/net/lex/httplex.a',
    '%s/pkg/%s/golang.org/x/net/trace.a',
    '%s/pkg/%s/golang.org/x/text/secure/bidirule.a',
    '%s/pkg/%s/golang.org/x/text/transform.a',
    '%s/pkg/%s/golang.org/x/text/unicode/bidi.a',
    '%s/pkg/%s/golang.org/x/text/unicode/norm.a',
    '%s/pkg/%s/google.golang.org/genproto/googleapis/rpc/status.a',
    '%s/pkg/%s/google.golang.org/grpc/codes.a',
    '%s/pkg/%s/google.golang.org/grpc/credentials.a',
    '%s/pkg/%s/google.golang.org/grpc/grpclb/grpc_lb_v1.a',
    '%s/pkg/%s/google.golang.org/grpc/grpclog.a',
    '%s/pkg/%s/google.golang.org/grpc/internal.a',
    '%s/pkg/%s/google.golang.org/grpc/keepalive.a',
    '%s/pkg/%s/google.golang.org/grpc/metadata.a',
    '%s/pkg/%s/google.golang.org/grpc/naming.a',
    '%s/pkg/%s/google.golang.org/grpc/peer.a',
    '%s/pkg/%s/google.golang.org/grpc/stats.a',
    '%s/pkg/%s/google.golang.org/grpc/status.a',
    '%s/pkg/%s/google.golang.org/grpc/tap.a',
    '%s/pkg/%s/google.golang.org/grpc/transport.a',
    '%s/pkg/%s/google.golang.org/grpc.a',
  ]]
  drake.go.FetchPackage('google.golang.org/grpc', go_toolkit,
                        targets = grpc_package_tgts)

  sources = drake.nodes(
    'src/server/server.go',
  ) + doughnut_grpc + kv_grpc + kv_data
  source_include = drake.path_source() / drake.Drake.current.prefix
  local_config.add_include_path(source_include)

  kv_bin = drake.go.Executable(
    drake.go.Source('src/bin/key-value-store.go'),
    go_toolkit, local_config,
    target = 'bin/kv.exe' if windows else 'bin/kv',
    sources = sources,
  )
  rule_build << kv_bin

  # XXX: The key-value hangs registering the gRPC service (RegisterService)
  # when running under wine. Works on Windows 10.
  if not windows:
    grpc_test = drake.go.TestExecutable(
      drake.go.Source('tests/functional/grpc_test.go'),
      go_toolkit, local_config,
      target = 'tests/functional/grpc',
      sources = kv_grpc,
      build_host = True,
    )
    rule_tests << grpc_test
    rule_tests << [kv_bin, infinit_cli]

    grpc_test_env = {
      "INFINIT_BIN": os.path.realpath(str(infinit_cli)),
      "INFINIT_KV_BIN": os.path.realpath(str(kv_bin)),
    }
    runner = drake.Runner(exe = grpc_test,
                          env = grpc_test_env,
                          sources = [kv_bin, infinit_cli])
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status
