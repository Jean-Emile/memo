#!/usr/bin/env python3

import os
import os.path
import sys

from itertools import chain

ROOT = os.path.dirname(os.path.realpath(__file__))
PYTHONPATH = ROOT + '/../lib/python%s.%s' % sys.version_info[0:2]
sys.path.insert(0, PYTHONPATH)
os.environ['PYTHONPATH'] = '%s:%s' % (PYTHONPATH, os.environ.get('PYTHONPATH', ''))

import infinit.beyond
import infinit.beyond.bottle
import infinit.beyond.couchdb

def parse_options():
  import argparse
  # Parse options
  parser = argparse.ArgumentParser(description = 'to infinity !')
  parser.add_argument('--host',
                      metavar = 'HOST',
                      type = str,
                      help = 'interface to listen on')
  parser.add_argument('--port',
                      metavar = 'PORT',
                      type = int,
                      help = 'port to listen on')
  parser.add_argument('--dropbox-app-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'Dropbox app key',
                      default = ${repr(dropbox_app_key)})
  parser.add_argument('--dropbox-app-secret',
                      metavar = 'SECRET',
                      type = str,
                      help = 'Dropbox app secret',
                      default = ${repr(dropbox_app_secret)})
  parser.add_argument('--google-app-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'Google app key',
                      default = ${repr(google_app_key)})
  parser.add_argument('--google-app-secret',
                      metavar = 'SECRET',
                      type = str,
                      help = 'Google app secret',
                      default = ${repr(google_app_secret)})
  parser.add_argument('--reload',
                      help = 'Reload automatically when code changes',
                      action = 'store_true',
                      default = False)
  parser.add_argument('--enable-gcs',
                      help = 'Enable GCS resources uploading',
                      action = 'store_true',
                      default = False)
  parser.add_argument(
    '--couchdb-directory',
    metavar = 'PATH',
    type = str,
    help = 'CouchDB persisent directory (temporary if unspecified)')
  parser.add_argument('--couchdb-port',
                      metavar = 'PORT',
                      type = int,
                      help = 'CouchDB port',
                      default = 0)
  parser.add_argument('--email-validation',
                      type = bool,
                      default = True,
                      help = 'Enable email validation (activated by default)')
  return parser.parse_args()

try:
  args = parse_options()
  if args.enable_gcs:
    from infinit.beyond.gcs import GCS
    gcs_login = '798530033299-s9b7qmrc99trk8uid53giuvus1o74cif@developer.gserviceaccount.com'
    gcs_key = bytes('''-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALCm3D3cHlKYRygk
vRgesY39WUGeUN/sCBsVaxMuga1bCAZ6fVoh58pQEmeBpkjaVdtB0nz9ZBVoeDtR
PcfafaUW+UFXjRf2rJ3MoJ/J72mccSD08sjVX3Q9U5iydYhjZEx3uwhUcaHG6+Rq
f4xhb/49jfFmDJ/9zCopsiPBJQgfAgMBAAECgYEAqxgByrxOdirdCGmE6D6aM+8E
qwReSnL+atT0zzBFExVPEY9Dp6+dI5soKC4vUvJ9I45+AucdL4ruoG0QTGg3NbjC
XCD88TL2UdSog/xxHAQ37EvnoPwK6v04FZHdm94eXkJMQzpf9pP8EyVEaXZWb8Uw
2MDPGluTWgkUKZitkLECQQDjuLBFwtU9rdDZB3G00P3hMXuvomPPEHRvdpvwbxLG
WX1XNPG1FlBbQhyBgUIVATn9sU28df7kANqhhnEthXY3AkEAxpaoR0rtZzPIt4c4
3PQm+mclxxEUZozrRnO/t6bDc/wGvI7C69wIu4UI8j4zFtRRuC2qCDaTorXibFRb
PKEJWQJAY8eNFUQlg30hwbbNT9kzJPU1qOOSsCwZmK1z7on8xAR6MzfzoNFCLHpv
Wx90ARgkfNCvqyBYqzbklVn/RV7xSQJBAJluCPGb+DPGFIuHU+2STRMl4lAc6BAb
TCOQhk0T8OqJi4LfIcYsqCqJLFJMsBgxTjnoPfg+gm4x7JAZ1KvRF3ECQFcwSrNV
cun1SplfUKZQZywA8ueUU/ZuGj/XXwopPR5LgWW7sgkwdCklQUPjcecWEZFy/ODl
e9FGZj7sEHpPuDE=
-----END PRIVATE KEY-----
''', 'UTF-8')
    gcs = GCS(login = gcs_login,
              key = gcs_key,
              bucket_ns = 'dev')
  else:
    gcs = None
  with infinit.beyond.couchdb.CouchDB(
      port = args.couchdb_port,
      directory = args.couchdb_directory,
  ) as couchdb:
    datastore = infinit.beyond.couchdb.CouchDBDatastore(couchdb)
    beyond = infinit.beyond.Beyond(
      datastore = datastore,
      dropbox_app_key = args.dropbox_app_key,
      dropbox_app_secret = args.dropbox_app_secret,
      google_app_key = args.google_app_key,
      google_app_secret = args.google_app_secret,
      validate_email_address = args.email_validation
    )
    app = infinit.beyond.bottle.Bottle(beyond, gcs = gcs)
    import bottle
    kwargs = {}
    if args.host is not None:
      kwargs['host'] = args.host
    if args.port is not None:
      kwargs['port'] = args.port
    bottle.DEBUG = True
    bottle.run(app = app, reloader = args.reload, **kwargs)
except Exception as e:
  print('%s: fatal error: %s' % (sys.argv[0], e))
  raise
  # exit(1)
