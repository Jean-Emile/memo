#!/usr/bin/env python3

import os
import os.path
import sys

from itertools import chain

ROOT = os.path.dirname(os.path.realpath(__file__))
PYTHONPATH = ROOT + '/../lib/python%s.%s' % sys.version_info[0:2]
sys.path.insert(0, PYTHONPATH)
os.environ['PYTHONPATH'] = '%s:%s' % (PYTHONPATH, os.environ.get('PYTHONPATH', ''))

import infinit.beyond
import infinit.beyond.bottle
import infinit.beyond.couchdb

def parse_options():
  import argparse
  # Parse options
  parser = argparse.ArgumentParser(description = 'to infinity !')
  parser.add_argument('--host',
                      metavar = 'HOST',
                      type = str,
                      help = 'interface to listen on')
  parser.add_argument('--port',
                      metavar = 'PORT',
                      type = int,
                      help = 'port to listen on')
  parser.add_argument('--dropbox-app-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'Dropbox app key',
                      default = ${repr(dropbox_app_key)})
  parser.add_argument('--dropbox-app-secret',
                      metavar = 'SECRET',
                      type = str,
                      help = 'Dropbox app secret',
                      default = ${repr(dropbox_app_secret)})
  parser.add_argument('--couchdb-port',
                      metavar = 'PORT',
                      type = int,
                      help = 'CouchDB port',
                      default = 0)
  return parser.parse_args()

try:
  args = parse_options()
  with infinit.beyond.couchdb.CouchDB(port = args.couchdb_port) as couchdb:
    datastore = infinit.beyond.couchdb.CouchDBDatastore(couchdb)
    beyond = infinit.beyond.Beyond(
      datastore = datastore,
      dropbox_app_key = args.dropbox_app_key,
      dropbox_app_secret = args.dropbox_app_secret,
    )
    app = infinit.beyond.bottle.Bottle(beyond)
    import bottle
    kwargs = {}
    if args.host is not None:
      kwargs['host'] = args.host
    if args.port is not None:
      kwargs['port'] = args.port
    bottle.DEBUG = True
    bottle.run(app = app, **kwargs)
except Exception as e:
  print('%s: fatal error: %s' % (sys.argv[0], e))
  raise
  # exit(1)
