import drake
import drake.debian
import drake.templating

from itertools import chain

build = None
check = None
install = None
tests = None

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(python = None,
              prefix = drake.Path('/usr'),
              dropbox_app_key = 'ldsi5nojwpfqcqg',
              dropbox_app_secret = 'gwca0vz648u0y6r',
              git = None):

  global build, check, install, tests

  if git is None:
    git = drake.git.Git()

  version = drake.node('src/version.py')
  class PythonVersionGenerator(VersionGenerator):
    def _variable(self, name, value):
      return '%s = %r' % (name, value)
  PythonVersionGenerator(version, git)

  with drake.templating.Context(content = {
      'dropbox_app_key': dropbox_app_key,
    'dropbox_app_secret': dropbox_app_secret,
  }):
    drake.node('beyond.tmpl')
    drake.node('src/wsgi.py.tmpl')

  sources = drake.nodes(
    'src/__init__.py',
    'src/bottle.py',
    'src/couchdb.py',
    'src/wsgi.py',
  ) + [version]
  couchdb_sources = drake.nodes(
    'couchdb-python/couchdb/view.py',
    'couchdb-python/couchdb/mapping.py',
    'couchdb-python/couchdb/__init__.py',
    'couchdb-python/couchdb/util.py',
    'couchdb-python/couchdb/util2.py',
    'couchdb-python/couchdb/util3.py',
    'couchdb-python/couchdb/client.py',
    'couchdb-python/couchdb/json.py',
    'couchdb-python/couchdb/__main__.py',
    'couchdb-python/couchdb/http.py',
    'couchdb-python/couchdb/multipart.py',
    'couchdb-python/couchdb/design.py',
  )

  python_prefix = drake.Path('lib/python%s' % python.version)
  def install_nodes(where, how):
    where = drake.Path(where)
    for node in how(sources,
                    where / python_prefix / 'infinit/beyond',
                    strip_prefix = 'src'):
      yield node
    for node in  how(couchdb_sources,
                     where / python_prefix,
                     strip_prefix = 'couchdb-python'):
      yield node
    yield how(drake.node('bottle/bottle.py'),
              where / python_prefix, strip_prefix = True)
    yield how(drake.node('beyond'),
              where / 'bin', strip_prefix = True)

  build = drake.Rule('build')
  build << install_nodes(where = '.', how = drake.copy)

  install = drake.Rule('install')
  install << install_nodes(where = prefix, how = drake.install)

  ## ------ ##
  ## Debian ##
  ## ------ ##

  package = install_nodes('debian/opt/infinit/beyond',
                          how = drake.copy)
  git = drake.git.Git()
  with drake.templating.Context(content = {
      'version': git.description(),
      'version_major': git.version().split('.')[0],
      'version_minor': git.version().split('.')[1],
      'python_version_major': python.version.major,
      'python_version_minor': python.version.minor,
  }):
    drake.node('control.tmpl')
  package = chain(package,
                  drake.copy(drake.nodes('control'), 'debian/DEBIAN'))
  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'infinit-beyond_%s_amd64.deb' % git.description(),
    package, 'debian').package
