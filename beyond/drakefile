import drake
import drake.debian
import drake.docker
import drake.templating

from itertools import chain
import functools

build = None
rule_check = None
install = None
tests = None
package = None

gcs_login = '798530033299-s9b7qmrc99trk8uid53giuvus1o74cif' \
            '@developer.gserviceaccount.com'
gcs_key = '''-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALCm3D3cHlKYRygk
vRgesY39WUGeUN/sCBsVaxMuga1bCAZ6fVoh58pQEmeBpkjaVdtB0nz9ZBVoeDtR
PcfafaUW+UFXjRf2rJ3MoJ/J72mccSD08sjVX3Q9U5iydYhjZEx3uwhUcaHG6+Rq
f4xhb/49jfFmDJ/9zCopsiPBJQgfAgMBAAECgYEAqxgByrxOdirdCGmE6D6aM+8E
qwReSnL+atT0zzBFExVPEY9Dp6+dI5soKC4vUvJ9I45+AucdL4ruoG0QTGg3NbjC
XCD88TL2UdSog/xxHAQ37EvnoPwK6v04FZHdm94eXkJMQzpf9pP8EyVEaXZWb8Uw
2MDPGluTWgkUKZitkLECQQDjuLBFwtU9rdDZB3G00P3hMXuvomPPEHRvdpvwbxLG
WX1XNPG1FlBbQhyBgUIVATn9sU28df7kANqhhnEthXY3AkEAxpaoR0rtZzPIt4c4
3PQm+mclxxEUZozrRnO/t6bDc/wGvI7C69wIu4UI8j4zFtRRuC2qCDaTorXibFRb
PKEJWQJAY8eNFUQlg30hwbbNT9kzJPU1qOOSsCwZmK1z7on8xAR6MzfzoNFCLHpv
Wx90ARgkfNCvqyBYqzbklVn/RV7xSQJBAJluCPGb+DPGFIuHU+2STRMl4lAc6BAb
TCOQhk0T8OqJi4LfIcYsqCqJLFJMsBgxTjnoPfg+gm4x7JAZ1KvRF3ECQFcwSrNV
cun1SplfUKZQZywA8ueUU/ZuGj/XXwopPR5LgWW7sgkwdCklQUPjcecWEZFy/ODl
e9FGZj7sEHpPuDE=
-----END PRIVATE KEY-----
'''
# sendwithus_api_key = 'live_f237084a19cbf6b2373464481155d953a4d86e8d'
sendwithus_api_key = 'test_b71aa18fba1a03a9c314ca1d50eb8a8ceb37825c'

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(
    production_build,
    python,
    cryptography_python_module,
    git,
    bottle,
    sendwithus,
    PatchAndInstall,
    prefix = drake.Path('/usr'),
    dropbox_app_key = 'ldsi5nojwpfqcqg',
    dropbox_app_secret = 'gwca0vz648u0y6r',
    google_app_key = '798530033299-jiqlihdquc70r08ucthm3o1omp594ihm',
    google_app_secret = 'ufwn6w0hAT2MDuwOzfWxh4Sx',
    gcs_app_key = '798530033299-phph23et2sptd7auhsif2d75hcqel4lg',
    gcs_app_secret = 'abdwo588jVZO3zV8EUWlmx8o',
    email_regex = '^[^@]+@[^@]+\.[^@]+$',
    name_regex = '^[-a-z0-9_][-a-z0-9._]{0,127}$',
    delegate_user = 'hub',
    backend = []
):

  global build, install, package, rule_check, tests

  binaries = backend.get('binaries', [])

  class PythonCopy(drake.Copy):

    def execute(self):
      if not super().execute():
        return False
      script = ';'.join([
        'import py_compile',
        'res = py_compile.compile(file = %r, dfile = %r)',
        'exit(1 if res is None else 0)',
      ]) % (str(self.target().path()), str(self.source.path()))
      if not isinstance(self.target(),
                        (drake.cxx.Module, drake.cxx.DynLib)):
        self.cmd(
          'Check syntax of %s' % self.target(),
          ['%s/bin/python%s' % (python.prefix, python.version),
           '-c', script],
          throw = True)
      return True

  def copy_python(*args, **kwargs):
    return drake.copy(builder = PythonCopy, *args, **kwargs)

  if git is None:
    git = drake.git.Git()

  version = drake.node('src/version.py')
  class PythonVersionGenerator(VersionGenerator):
    def _variable(self, name, value):
      return '%s = %r' % (name, value)
  PythonVersionGenerator(version, git)
  secrets = {
    'dropbox_app_key': dropbox_app_key,
    'dropbox_app_secret': dropbox_app_secret,
    'google_app_key':
      '%s.apps.googleusercontent.com' % google_app_key,
    'google_app_secret': google_app_secret,
    'gcs_app_key':
      '%s.apps.googleusercontent.com' % gcs_app_key,
    'gcs_app_secret': gcs_app_secret,
    'gcs_login': gcs_login,
    'gcs_key': gcs_key,
    'sendwithus_api_key': sendwithus_api_key,
  }
  if production_build:
    for k in secrets:
      secrets[k] = None
  variables = {
    'email_regex': email_regex,
    'name_regex': name_regex,
    'delegate_user': delegate_user,
    'python_version_major': python.version.major,
    'python_version_minor': python.version.minor,
  }
  variables.update(secrets)
  with drake.templating.Context(content = variables):
    drake.node('bin/beyond.tmpl')
    drake.node('etc/uwsgi/beyond.xml.tmpl')
    drake.node('src/wsgi.py.tmpl')
    drake.node('src/validation.py.tmpl')

  sources = drake.nodes(
    'src/__init__.py',
    'src/bottle.py',
    'src/couchdb.py',
    'src/dynamodb.py',
    'src/gcs.py',
    'src/wsgi.py',
    'src/validation.py',
    'src/exceptions.py',
    'src/emailer.py',
    'src/response.py',
  ) + [bottle, version]
  plugins = drake.nodes(
    'src/plugins/certification.py',
    'src/plugins/jsongo.py',
    'src/plugins/max_size.py',
    'src/plugins/response.py',
  )
  sources += plugins
  couchdb_sources = drake.nodes(
    'couchdb-python/couchdb/view.py',
    'couchdb-python/couchdb/mapping.py',
    'couchdb-python/couchdb/__init__.py',
    'couchdb-python/couchdb/util.py',
    'couchdb-python/couchdb/util2.py',
    'couchdb-python/couchdb/util3.py',
    'couchdb-python/couchdb/client.py',
    'couchdb-python/couchdb/json.py',
    'couchdb-python/couchdb/__main__.py',
    'couchdb-python/couchdb/http.py',
    'couchdb-python/couchdb/multipart.py',
    'couchdb-python/couchdb/design.py',
  )

  def python_prefix(version = python.version):
    return drake.Path('lib/python%s' % version)
  oauth2client = drake.PythonModule(
    'oauth2client', python_prefix(),
    version = '1.5.2', # Upgrade to the new stable.
    dependencies = [
      'httplib2',
      'httplib2-0.9.2.egg-info',
      'oauth2client-1.5.2.egg-info',
      'pyasn1',
      'pyasn1-0.1.9.dist-info',
      'pyasn1_modules',
      'pyasn1_modules-0.0.8.dist-info',
      'rsa',
      'rsa-3.3.dist-info',
      'six-1.10.0.dist-info',
    ])
  crypto = drake.PythonModule(
    'pycrypto',
    python_prefix(),
    dependencies = [],
    module_name = 'Crypto')
  PIL = drake.PythonModule(
    'PILLOW', python_prefix(),
    module_name = 'PIL',
    dependencies = ['Pillow-3.0.0.egg-info'])
  def install_nodes(where, how, python_version = python.version):
    prefix = python_prefix(python_version)
    where = drake.Path(where)
    for node in how(sources,
                    where / prefix / 'infinit/beyond',
                    strip_prefix = 'src'):
      yield node
    for node in how(couchdb_sources,
                    where / prefix,
                    strip_prefix = 'couchdb-python'):
      yield node
    for node in how(sendwithus.nodes,
                    where / prefix,
                    strip_prefix = '../%s' % sendwithus.root):
      yield node
    yield how(bottle,
              where / prefix, strip_prefix = True)
    yield how(drake.node('bin/beyond'), where)
    if cryptography_python_module:
      yield how(cryptography_python_module,
                where / prefix, strip_prefix = True)
    yield drake.touch(where / prefix / 'infinit/__init__.py')

  build = drake.Rule('build')
  build << binaries
  built = list(install_nodes(where = '.', how = copy_python))
  mods = list(
    chain(*(p.targets() for p in [oauth2client, crypto, PIL])))
  package = drake.python.Package(
    'beyond', python_prefix(), built + mods,
    fullname = 'infinit.beyond')
  build << built
  build << mods

  install = drake.Rule('install')
  install << install_nodes(
    where = prefix,
    how = functools.partial(drake.copy, builder = PatchAndInstall))

  ## ------ ##
  ## Debian ##
  ## ------ ##

  ubuntu_dependencies = [
    'couchdb',
    'libjpeg-dev',
    'python3',
    'python3-boto3',
    'python3-bson',
    'python3-crypto',
    'python3-httplib2',
    'python3-pil',
    'python3-requests',
  ]
  debian_nodes = install_nodes('debian/opt/infinit/beyond',
                               how = drake.copy)
  git = drake.git.Git()
  version = git.description()
  debian_nodes = chain(
    debian_nodes,
    drake.copy(
      drake.nodes('etc/rsyslog.d/10-infinit.conf'),
      'debian',
    ),
    drake.copy(
      drake.nodes('etc/uwsgi/beyond.xml'),
      'debian/opt/infinit/beyond',
    ),
  )
  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'infinit-beyond_%s_amd64.deb' % git.description(),
    {
      'Package': 'infinit-beyond',
      'Maintainer': 'Quentin Hocquet <debian@infinit.io>',
      'Version': version,
      'Homepage': 'http://www.infinit.sh',
      'Architecture': 'amd64',
      'Depends': ', '.join(
        ubuntu_dependencies + ['infinit (= %s)' % version]),
      'Description': 'Infinit beyond server.',
    },
    debian_nodes, 'debian').package
  if backend.get('debian'):
    debian << backend.get('debian')

  ## ----- ##
  ## Check ##
  ## ----- ##

  rule_check = drake.Rule('check')
  test_utils = drake.Node('tests/utils.py')
  path = ':'.join(
    map(lambda x: str(x),
        [drake.path_build(python_prefix()),
         test_utils.path().dirname()]))
  for test_name in [
      'auth',
      'demo',
      'entity',
      'full-flow',
      'oauth-dropbox',
      'emails',
      'users/avatar',
      'users/emails',
      'users/email_confirmation',
      'users/put',
      'users/get',
      'users/pairing',
      'users/delete',
      'users/welcome',
      'networks/delete',
      'networks/get',
      'networks/put',
      'networks/storage',
      'volumes/put',
      'volumes/get',
      'volumes/delete',
      'passports/limit',
      'passports/put',
      'drives/put',
      'drives/icons',
      'drives/invitations',
      # Higher level.
      'users/register_login',
  ]:
    test = drake.node('tests/%s' % test_name)
    test.dependencies_add(built)
    test.dependencies_add(binaries)
    test.dependencies_add([test_utils])
    env = {
      'PYTHONPATH': str(path),
    }
    import os
    if len(binaries):
      env['PATH'] = ':'.join([
        str(drake.path_build(binaries[0].path(True).dirname(),
                             absolute = True)),
        os.environ.get('PATH', '')
      ])
    runner = drake.Runner(
      exe = test,
      env = env
    )
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  class Linter(drake.ShellCommand):

    def __init__(self, package, status, plugins = [], conf = None):
      command = [
        'pylint', '--reports=n',
        '--msg-template={path}:{line}:{column}: {msg}',
        package.fullname]
      sources = package.nodes
      self.__status = status
      import os
      env = {
        'PYTHONPATH': ':'.join(map(str, chain(
          package.pythonpath,
          (str(p.path().dirname()) for p in plugins)))),
        'PATH': os.environ['PATH'],
      }
      if conf is not None:
        command.append('--rcfile=%s' % conf.path())
        sources.append(conf)
      for plugin in plugins:
        sources.append(plugin)
        command += ['--load-plugins',
                    plugin.path().basename().without_last_extension()]
      drake.ShellCommand.__init__(
        self,
        sources,
        [status],
        command = command,
        pretty = 'Lint %s' % package.name(),
        stdout = status,
        environment = env)

    def execute(self):
      res = super().execute()
      if not res:
        with open(str(self.__status.path()), 'r') as f:
          for line in f:
            print('%s: %s' % (self.command[0], line), end = '')
      return res

  pylintrc = drake.node('.pylintrc')
  pylint_checkers = drake.nodes('tests/lint/beyond-lint.py')
  pylint_status = drake.node('tests/lint.status')
  pylint_runner = Linter(
    package = package,
    status = pylint_status,
    conf = pylintrc,
    plugins = pylint_checkers)
  rule_check << pylint_status

  ## ------ ##
  ## Docker ##
  ## ------ ##

  docker_path = drake.Path('docker')
  docker_image = drake.docker.DockerImage(
    'docker', 'infinit-beyond', git.description())
  docker_file = drake.docker.DockerFile(
    docker_path / 'Dockerfile',
    image = 'ubuntu',
    maintainer = 'Infinit <contact@infinit.sh>',
    labels = {
      'version': git.description(),
    })
  docker_file.add(
    install_nodes(docker_path, how = drake.copy,
                  python_version = drake.Version(3, 5)), '/usr')
  docker_file.run('apt-get update')
  for dep in ubuntu_dependencies:
    docker_file.run('apt-get install -y %s' % dep)
  drake.docker.DockerBuilder(docker_image, docker_file)
