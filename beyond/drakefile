import drake
import drake.debian
import drake.templating

from itertools import chain
import functools

build = None
rule_check = None
install = None
tests = None
package = None

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(
    python,
    cryptography_python_module,
    git,
    bottle,
    PatchAndInstall,
    prefix = drake.Path('/usr'),
    dropbox_app_key = 'ldsi5nojwpfqcqg',
    dropbox_app_secret = 'gwca0vz648u0y6r',
    google_app_key = '798530033299-jiqlihdquc70r08ucthm3o1omp594ihm',
    google_app_secret = 'ufwn6w0hAT2MDuwOzfWxh4Sx',
):

  global build, install, package, rule_check, tests

  class PythonCopy(drake.Copy):

    def execute(self):
      if not super().execute():
        return False
      script = ';'.join([
        'import py_compile',
        'res = py_compile.compile(file = %r, dfile = %r)',
        'exit(1 if res is None else 0)',
      ]) % (str(self.target().path()), str(self.source.path()))
      if not isinstance(self.target(),
                        (drake.cxx.Module, drake.cxx.DynLib)):
        self.cmd(
          'Check syntax of %s' % self.target(),
          ['%s/bin/python%s' % (python.prefix, python.version),
           '-c', script],
          throw = True)
      return True

  def copy_python(*args, **kwargs):
    return drake.copy(builder = PythonCopy, *args, **kwargs)

  if git is None:
    git = drake.git.Git()

  version = drake.node('src/version.py')
  class PythonVersionGenerator(VersionGenerator):
    def _variable(self, name, value):
      return '%s = %r' % (name, value)
  PythonVersionGenerator(version, git)

  with drake.templating.Context(content = {
      'dropbox_app_key': dropbox_app_key,
      'dropbox_app_secret': dropbox_app_secret,
      'google_app_key':
        '%s.apps.googleusercontent.com' % google_app_key,
      'google_app_secret': google_app_secret,
  }):
    drake.node('beyond.tmpl')
    drake.node('src/wsgi.py.tmpl')

  sources = drake.nodes(
    'src/__init__.py',
    'src/bottle.py',
    'src/couchdb.py',
    'src/gcs.py',
    'src/wsgi.py',
    'src/validation.py',
    'src/exceptions.py',
  ) + [bottle, version]
  plugins = drake.nodes(
    'src/plugins/jsongo.py',
  )
  sources += plugins
  couchdb_sources = drake.nodes(
    'couchdb-python/couchdb/view.py',
    'couchdb-python/couchdb/mapping.py',
    'couchdb-python/couchdb/__init__.py',
    'couchdb-python/couchdb/util.py',
    'couchdb-python/couchdb/util2.py',
    'couchdb-python/couchdb/util3.py',
    'couchdb-python/couchdb/client.py',
    'couchdb-python/couchdb/json.py',
    'couchdb-python/couchdb/__main__.py',
    'couchdb-python/couchdb/http.py',
    'couchdb-python/couchdb/multipart.py',
    'couchdb-python/couchdb/design.py',
  )

  python_prefix = drake.Path('lib/python%s' % python.version)
  oauth2client = drake.PythonModule(
    'oauth2client', python_prefix,
    dependencies = [
      'httplib2',
      'httplib2-0.9.2-py3.4.egg-info',
      'oauth2client-1.5.1-py3.4.egg-info',
      'pyasn1',
      'pyasn1-0.1.9.dist-info',
      'pyasn1_modules',
      'pyasn1_modules-0.0.8.dist-info',
      'rsa',
      'rsa-3.2.dist-info',
      'six-1.10.0.dist-info',
    ])
  sources += oauth2client.targets()
  def install_nodes(where, how):
    where = drake.Path(where)
    for node in how(sources,
                    where / python_prefix / 'infinit/beyond',
                    strip_prefix = 'src'):
      yield node
    for node in  how(couchdb_sources,
                     where / python_prefix,
                     strip_prefix = 'couchdb-python'):
      yield node
    yield how(bottle,
              where / python_prefix, strip_prefix = True)
    yield how(drake.node('beyond'),
              where / 'bin', strip_prefix = True)
    yield how(cryptography_python_module,
              where / python_prefix, strip_prefix = True)
    yield drake.touch(where / python_prefix / 'infinit/__init__.py')
  build = drake.Rule('build')
  built = list(install_nodes(where = '.', how = copy_python))
  package = drake.python.Package('beyond', python_prefix, built)
  build << built

  install = drake.Rule('install')
  install << install_nodes(
    where = prefix,
    how = functools.partial(drake.copy, builder = PatchAndInstall))

  ## ------ ##
  ## Debian ##
  ## ------ ##

  debian_nodes = install_nodes('debian/opt/infinit/beyond',
                          how = drake.copy)
  git = drake.git.Git()
  with drake.templating.Context(content = {
      'version': git.description(),
      'version_major': git.version().split('.')[0],
      'version_minor': git.version().split('.')[1],
      'python_version_major': python.version.major,
      'python_version_minor': python.version.minor,
  }):
    drake.node('control.tmpl')
  debian_nodes = chain(
    debian_nodes,
    drake.copy(drake.nodes('control'), 'debian/DEBIAN'),
    drake.copy(
      drake.nodes('etc/nginx/sites-available/beyond',
                  'etc/rsyslog.d/10-infinit.conf',
                  'etc/ssl/beyond.crt',
                  'etc/ssl/private/beyond.key',
                  'etc/uwsgi/apps-available/beyond.xml',
                  'usr/share/ca-certificates/extra/infinit.crt'),
      'debian',
    ),
  )
  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'infinit-beyond_%s_amd64.deb' % git.description(),
    debian_nodes, 'debian').package

  ## ----- ##
  ## Check ##
  ## ----- ##

  rule_check = drake.Rule('check')
  test_utils = drake.Node('tests/utils.py')
  for test_name in [
      'auth',
      'full-flow',
      'oauth-dropbox',
      'users/put',
      'users/get',
      'users/delete',
      'networks/put',
      'volumes/put',
      'volumes/get',
      'volumes/delete',
      'passports/put',
      'drives/put',
      # Higher level.
      'users/register_login',
  ]:
    test = drake.node('tests/%s' % test_name)
    test.dependencies_add(built)
    test.dependencies_add([test_utils])
    path = ':'.join(
      map(lambda x: str(x),
          [drake.path_build(python_prefix), test_utils.path().dirname()]))
    runner = drake.Runner(
      exe = test,
      env = {
        'PYTHONPATH': path,
      })
    rule_check << runner.status
