#!/usr/bin/env python3

import os
import os.path
import sys

from itertools import chain

ROOT = os.path.dirname(os.path.realpath(__file__))
PYTHONPATH = ROOT + '/../lib/python%s.%s' % sys.version_info[0:2]
sys.path.insert(0, PYTHONPATH)
os.environ['PYTHONPATH'] = '%s:%s' % (PYTHONPATH, os.environ.get('PYTHONPATH', ''))

import infinit.beyond
import infinit.beyond.bottle

def parse_options():
  import argparse
  # Parse options
  parser = argparse.ArgumentParser(description = 'to infinity !')
  parser.add_argument('--host',
                      metavar = 'HOST',
                      type = str,
                      help = 'interface to listen on')
  parser.add_argument('--port',
                      metavar = 'PORT',
                      type = int,
                      help = 'port to listen on')
  parser.add_argument('--dropbox-app-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'Dropbox app key',
                      default = ${repr(dropbox_app_key)})
  parser.add_argument('--dropbox-app-secret',
                      metavar = 'SECRET',
                      type = str,
                      help = 'Dropbox app secret',
                      default = ${repr(dropbox_app_secret)})
  parser.add_argument('--google-app-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'Google app key',
                      default = ${repr(google_app_key)})
  parser.add_argument('--google-app-secret',
                      metavar = 'SECRET',
                      type = str,
                      help = 'Google app secret',
                      default = ${repr(google_app_secret)})
  parser.add_argument('--gcs-app-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'GCS app key',
                      default = ${repr(gcs_app_key)})
  parser.add_argument('--gcs-app-secret',
                      metavar = 'SECRET',
                      type = str,
                      help = 'GCS app secret',
                      default = ${repr(gcs_app_secret)})
  parser.add_argument('--reload',
                      help = 'Reload automatically when code changes',
                      action = 'store_true',
                      default = False)
  parser.add_argument('--sendwithus-app-key',
                      type = str,
                      help = 'SendWithUs api key',
                      default = 'test_b71aa18fba1a03a9c314ca1d50eb8a8ceb37825c')
  parser.add_argument('--gcs-login',
                      metavar = 'LOGIN',
                      type = str,
                      help = 'Google Cloud Storage login',
                      default = ${repr(gcs_login)})
  parser.add_argument('--gcs-key',
                      metavar = 'KEY',
                      type = str,
                      help = 'Google Cloud Storage key',
                      default = ${repr(gcs_key)})

  ## --------- ##
  ## Datastore ##
  ## --------- ##

  parser.add_argument(
    '--datastore-type',
    metavar = 'DRIVER',
    type = str,
    default = 'CouchDB',
    help = 'Data storage backend (CouchDB, DynamoDB)')

  ## ------- ##
  ## CouchDB ##
  ## ------- ##

  parser.add_argument(
    '--couchdb-directory',
    metavar = 'PATH',
    type = str,
    help = 'CouchDB persisent directory (temporary if unspecified)')
  parser.add_argument(
    '--couchdb-port',
    metavar = 'PORT',
    type = int,
    help = 'CouchDB port',
    default = 0)

  ## -------- ##
  ## DynamoDB ##
  ## -------- ##

  parser.add_argument(
    '--dynamodb-table',
    metavar = 'TABLE',
    type = str,
    help = 'DynamoDB table')
  parser.add_argument(
    '--dynamodb-region',
    metavar = 'REGION',
    type = str,
    default = 'us-east-1',
    help = 'DynamoDB AWS region')

  parser.add_argument(
    '--email-validation',
    type = bool,
    default = True,
    help = 'Enable email validation (activated by default)')
  parser.add_argument(
    '--port-file',
    type = str,
    help = 'File to write effective listen port to')
  parser.add_argument(
    '--force-admin',
    help = 'Force administrator mode',
    action = 'store_true',
    default = False)
  return parser.parse_args()

try:
  args = parse_options()
  if args.gcs_login is not None and args.gcs_key is not None:
    from infinit.beyond.gcs import GCS
    gcs = GCS(login = args.gcs_login,
              key = bytes(args.gcs_key, 'UTF-8'),
              bucket_ns = 'sh_infinit_beyond_dev')
  else:
    gcs = None
  def run(datastore):
    beyond = infinit.beyond.Beyond(
      datastore = datastore,
      dropbox_app_key = args.dropbox_app_key,
      dropbox_app_secret = args.dropbox_app_secret,
      google_app_key = args.google_app_key,
      google_app_secret = args.google_app_secret,
      gcs_app_key = args.gcs_app_key,
      gcs_app_secret = args.gcs_app_secret,
      validate_email_address = args.email_validation,
      sendwithus_api_key = args.sendwithus_app_key,
    )
    app = infinit.beyond.bottle.Bottle(
      beyond, gcs = gcs, production = False, force_admin = args.force_admin)
    import bottle
    kwargs = {}
    if args.host is not None:
      kwargs['host'] = args.host
    if args.port is not None:
      kwargs['port'] = args.port
    exited = False
    if args.port_file is not None:
      server = bottle.WSGIRefServer(**kwargs)
      kwargs['server'] = server
      def port_file_handler():
        while server.port == 0 and not exited:
          import time
          time.sleep(.1)
        with open(args.port_file, 'w') as f:
          f.write('%s' % server.port)
      import threading
      t = threading.Thread(target = port_file_handler)
      t.start()
    bottle.DEBUG = True
    try:
      bottle.run(app = app, reloader = args.reload, **kwargs)
    finally:
      exited = True
  datastore = args.datastore_type.lower()
  if datastore == 'couchdb':
    import infinit.beyond.couchdb
    with infinit.beyond.couchdb.CouchDB(
        port = args.couchdb_port,
        directory = args.couchdb_directory,
    ) as couchdb:
      run(infinit.beyond.couchdb.CouchDBDatastore(couchdb))
  elif datastore == 'dynamodb':
    import infinit.beyond.dynamodb
    if args.dynamodb_table is None:
      raise Exception('missing mandatory argument: dynamodb-table')
    run(infinit.beyond.dynamodb.DynamoDBDatastore(
      region = args.dynamodb_region,
      table = args.dynamodb_table,
    ))
  else:
    raise Exception('unrecognize datastore type: %s' % datastore)
except Exception as e:
  print('%s: fatal error: %s' % (sys.argv[0], e))
  raise
  # exit(1)
