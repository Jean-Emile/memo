#!/usr/bin/env python3

import infinit.beyond
import infinit.beyond.bottle
import infinit.beyond.couchdb

import bottle
import os
import requests
import threading
import unittest
import urllib.parse

from functools import partial
from itertools import chain


class Beyond:

  def __init__(self):
    self.__couchdb = infinit.beyond.couchdb.CouchDB()
    self.__datastore = None
    self.__beyond = None
    self.__app = None

  def __enter__(self):
    couchdb = self.__couchdb.__enter__()
    self.__datastore = \
      infinit.beyond.couchdb.CouchDBDatastore(couchdb)
    self.__beyond = infinit.beyond.Beyond(
      datastore = self.__datastore,
      dropbox_app_key = 'db_key',
      dropbox_app_secret = 'db_secret',
      google_app_key = 'google_key',
      google_app_secret = 'google_secret',
    )
    self.__app = infinit.beyond.bottle.Bottle(self.__beyond)
    thread = threading.Thread(
      target = partial(bottle.run, app = self.__app, port = 0))
    thread.daemon = True
    thread.start()
    while not hasattr(self.__app, 'port'):
      import time
      time.sleep(.1)
    return self

  @property
  def host(self):
    return '%s:%s' % (self.__app.host(), self.__app.port)

  def request(self, url, **kwargs):
    return requests.request(url = '%s/%s' % (self.host, url),
                            allow_redirects = False,
                            **kwargs)

  def get(self, url, **kwargs):
    return self.request(url = url, method = 'GET', **kwargs)

  def put(self, url, **kwargs):
    return self.request(url = url, method = 'PUT', **kwargs)

  def __exit__(self, *args):
    self.__app = None
    self.__beyond = None
    self.__datastore = None
    self.__couchdb.__exit__(*args)

class DummyDropbox(bottle.Bottle):

  def __init__(self, host):
    super().__init__()
    self.__host = host
    self.route('/oauth-token', method = 'POST')(self.token)
    self.route('/info')(self.info)

  def token(self):
    assert bottle.request.query['code'] == 'secret_code'
    assert bottle.request.query['grant_type'] == 'authorization_code'
    assert bottle.request.query['client_id'] == 'db_key'
    assert bottle.request.query['client_secret'] == 'db_secret'
    assert bottle.request.query['redirect_uri'] == '%s/oauth/dropbox' % self.__host
    return {
      'access_token': 'secret_token',
    }

  def info(self):
    assert bottle.request.query['access_token'] == 'secret_token'
    return {
      'uid': 'user_uid',
      'display_name': 'user_display-name',
    }

  def __enter__(self):
    thread = threading.Thread(
      target = partial(bottle.run, app = self, port = 0))
    thread.daemon = True
    thread.start()
    while not hasattr(self, 'port'):
      import time
      time.sleep(.1)
    return self

  @property
  def host(self):
    return 'http://localhost:%s' % self.port

with Beyond() as beyond, DummyDropbox(beyond.host) as db:
  conf = infinit.beyond.bottle.Bottle._Bottle__oauth_services
  form_url = '%s/dropbox-oauth-form' % db.host
  exchange_url = '%s/oauth-token' % db.host
  info_url = '%s/info' % db.host
  conf['dropbox']['form_url'] = form_url
  conf['dropbox']['exchange_url'] = exchange_url
  conf['dropbox']['info_url'] = info_url

  class Test(unittest.TestCase):

    def test_form_redirection(self):
      r = beyond.get('users/user/dropbox-oauth')
      self.assertEqual(r.status_code, 303)
      url = urllib.parse.urlparse(r.headers['Location'])
      print(url)
      self.assertEqual(url.scheme, 'http')
      self.assertEqual(url.netloc, 'localhost:%s' % db.port)
      self.assertEqual(url.path, '/dropbox-oauth-form')
      self.assertEqual(url.params, '')
      query = urllib.parse.parse_qs(url.query)
      self.assertEqual(query['state'], ['user'])
      self.assertEqual(query['client_id'], ['db_key'])
      self.assertEqual(query['response_type'], ['code'])
      self.assertEqual(query['redirect_uri'],
                       ['%s/oauth/dropbox' % beyond.host])

    def test_credentials_post(self):
      r = beyond.put('users/user', json = {
        'name': 'user',
        'public_key': {'rsa': 'MIIBCAKCAQEAq1pXuFI8l8MopHufZ4S3fe+WoR5wgeaPtZhw9IFuHZ+3F7V7fCzy76gKp5EPz5sk2Dowd90d+TuEUjUUkI0fRLJipRPjo2reFsuOAZ244ee/NLtG601vQUS/sV8ow2QZEAoNAiNZQGr4jEqvmjIB+rwOmx9eUgs887KjUYlX+wH5984EAr/qd62VddYXga8o4T2QX4GlYik/s/yKm0dlCQgZXQPYM5Wogv6KluGdLFKBaNc2HYkGEArZE51sATRcDOSQcycg2sGuwfL/LfClsCkx2LSYjJh9qkiBNUsAg+LeRt/9Hv3S32tcMszCph3nSX5u+1yz8VURHjVGh9ptAwIBIw=='},
      })
      self.assertEqual(r.status_code, 201)
      r = beyond.get('oauth/dropbox', params = {'code': 'secret_code',
                                                'state': 'user'})
      self.assertEqual(r.status_code, 200)
      self.assertEqual(
        r.json(),
        {
          'uid': 'user_uid',
          'display_name': 'user_display-name',
        })


  if __name__ == '__main__':
    unittest.main()
