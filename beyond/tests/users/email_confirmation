#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest

from utils import *

with Beyond() as beyond:

  class Test(unittest.TestCase):

    def _test_confirm(self, specific):
      emailer = Emailer()
      user = User()
      beyond.emailer = emailer
      user.put(beyond)
      assert 'User/Welcome' in emailer.get(user['email'])
      email = emailer.get_specifics(user['email'], 'User/Welcome').pop()
      confirmation_url = 'users/%s/confirm_email' % user['name']
      confirmed_url = 'users/%s/email_confirmed' % user['name']
      params = url_parameters('?' + email['url_parameters'])
      del params['name']
      if specific:
        email = params['email']
        confirmation_url += '/%s' % urllib.parse.quote_plus(params['email'])
        confirmed_url += '/%s' % urllib.parse.quote_plus(params['email'])
      del params['email']
      throws(lambda: beyond.get(confirmed_url, json = {}), 404)
      throws(lambda: beyond.post(confirmation_url, json = {}), 404)
      throws(lambda: beyond.get(confirmed_url, json = {}), 404)
      beyond.post(confirmation_url, json = params)
      beyond.get(confirmed_url, json = {})
      throws(lambda: beyond.post(confirmation_url, json = params), 410)
      beyond.get(confirmed_url, json = {})

    def test_normal(self):
      self._test_confirm(False)

    def test_specific_email(self):
      self._test_confirm(True)

    def test_emails(self):
      bob = User()
      bob.put(beyond, opt_out = False)
      b = beyond.get('users/%s' % bob['name']).json()
      assert 'emails' not in b
      b = beyond.post('users/%s/login' % bob['name'], json = {
        'password_hash': bob.password_hash
      }).json()
      assert 'emails' in b
      assertEq(b['emails'][bob['email']], False)

    def test_sending_confirmation_email(self):
      emailer = Emailer()
      user = User()
      beyond.emailer = emailer
      user.put(beyond)
      assert 'User/Welcome' in emailer.get(user['email'])
      welcome = emailer.get_specifics(user['email'], 'User/Welcome').pop()
      beyond.post('users/%s/send_confirmation_email' % user['name'])
      confirm_1 = emailer.get_specifics(
        user['email'], 'User/Confirmation Email').pop()
      beyond.post('users/%s/send_confirmation_email/%s' % (
        user['name'], user['email']))
      confirm_2 = emailer.get_specifics(
        user['email'], 'User/Confirmation Email').pop()
      assert len(url_parameters('?' + welcome['url_parameters']).keys()) > 1

      assertEq(url_parameters('?' + welcome['url_parameters']),
               url_parameters('?' + confirm_1['url_parameters']))
      assertEq(url_parameters('?' + confirm_1['url_parameters']),
               url_parameters('?' + confirm_2['url_parameters']))

  if __name__ == '__main__':
    unittest.main()
