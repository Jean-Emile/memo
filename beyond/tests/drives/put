#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

with Beyond() as beyond:

  class Test(unittest.TestCase):

    def test_normal(self):
      user = User()
      user.put(beyond)
      network = Network('network', owner = user)
      network.put(beyond)
      volume = Volume('business', network = network)
      volume.put(beyond)
      drive = Drive('business',
                    volume = volume,
                    description = "Hyperdrive!")
      assertEq(drive['volume'], volume['name'])
      assertEq(drive['network'], network['name'])
      drive.put(beyond);
      _drive = beyond.get('drives/%s' % drive['name']).json()
      for field in ['name', 'description', 'volume', 'network']:
        assertEq(drive[field], _drive[field])

    def test_multiple_drives(self):
      def create(Entity, *args, **kwargs):
        entity = Entity(*args, **kwargs)
        entity.put(beyond)
        return entity
      import functools
      create_user = functools.partial(create, User)
      create_network = functools.partial(create, Network)
      create_passport = functools.partial(create, Passport)
      create_volume = functools.partial(create, Volume)
      create_drive = functools.partial(create, Drive)

      # Users.
      eve = create_user('eve')
      alice = create_user('alice')
      bob = create_user('bob')
      serge = create_user('serge')

      # Network -> Volume -> Drive.
      network1 = create_network('network1', owner = eve)
      network2 = create_network('network2', owner = eve)
      create_passport(network1, alice)
      create_passport(network1, bob)
      create_passport(network1, serge)
      create_passport(network2, alice)
      create_passport(network2, bob)
      create_passport(network2, serge)
      volume1 = create_volume('volume1', network = network1)
      volume2 = create_volume('volume2', network = network1)
      volume3 = create_volume('volume3', network = network2)
      drive1 = create_drive('drive1', volume = volume1, description = 'drive1')
      drive2 = create_drive('drive2', volume = volume2, description = 'drive2')
      drive3 = create_drive('drive3', volume = volume3, description = 'drive3')

      drive1.invite_many(beyond, [alice, bob, serge])
      drive2.invite_many(beyond, [alice, bob])
      drive3.invite_many(beyond, [alice])
      # Eve created drives.
      assertEq(len(beyond.get('users/%s/drives' % eve['name'],
                              auth = eve.private_key).json()['drives']),
               3)
      assertEq(len(beyond.get('users/%s/drives' % alice['name'],
                              auth = alice.private_key).json()['drives']),
               3)
      assertEq(len(beyond.get('users/%s/drives' % bob['name'],
                              auth = bob.private_key).json()['drives']),
               2)
      assertEq(len(beyond.get('users/%s/drives' % serge['name'],
                              auth = serge.private_key).json()['drives']),
               1)
      alice_network = create_network('network', owner = alice)
      drive = create_drive('drive',
                           create_volume('volume',
                                         alice_network))
      create_passport(alice_network, eve)
      drive.invite(beyond, eve)
      assertEq(len(beyond.get('users/%s/drives' % eve['name'],
                              auth = eve.private_key).json()['drives']),
               4)

  if __name__ == '__main__':
    unittest.main()
