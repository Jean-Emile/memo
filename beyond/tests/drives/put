#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

def setup(beyond, user = None):
  if user is None:
    user = User()
    user.put(beyond)
  network = Network(owner = user)
  network.put(beyond)
  volume = Volume(network = network)
  volume.put(beyond)
  drive = Drive(volume = volume,
                description = "Hyperdrive!")
  drive.put(beyond)
  return user, network, volume, drive

class Test(unittest.TestCase):

  def test_normal(self):
    with Beyond() as beyond:
      user, network, volume, drive = setup(beyond)
      assertEq(drive['volume'], volume['name'])
      assertEq(drive['network'], network['name'])
      drive.put(beyond);
      _drive = beyond.get('drives/%s' % drive['name']).json()
      for field in ['name', 'description', 'volume', 'network']:
        assertEq(drive[field], _drive[field])

  def test_route(self):
    with Beyond() as beyond:
      user, network, volume, drive = setup(beyond)
      invitees = [User() for _ in range(4)]
      for invitee in invitees:
        invitee.put(beyond)
        Passport(network, invitee).put(beyond)
        drive.invite(beyond, invitee['name'])

  def test_remove(self):
    with Beyond() as beyond:
      user, network, volume, drive = setup(beyond)
      beyond.delete('drives/%s' % drive['name'],
                    auth = user)

  def test_multiple_drives(self):
    with Beyond() as beyond:
      def create(Entity, *args, **kwargs):
        entity = Entity(*args, **kwargs)
        entity.put(beyond)
        return entity
      import functools
      create_user = functools.partial(create, User)
      create_network = functools.partial(create, Network)
      create_passport = functools.partial(create, Passport)
      create_volume = functools.partial(create, Volume)
      create_drive = functools.partial(create, Drive)

      # Users.
      eve = create_user('eve')
      alice = create_user('alice')
      bob = create_user('bob')
      serge = create_user('serge')

      # Network -> Volume -> Drive.
      network1 = create_network(owner = eve)
      network2 = create_network(owner = eve)
      create_passport(network1, alice)
      create_passport(network1, bob)
      create_passport(network1, serge)
      create_passport(network2, alice)
      create_passport(network2, bob)
      create_passport(network2, serge)
      volume1 = create_volume(network = network1)
      volume2 = create_volume(network = network1)
      volume3 = create_volume(network = network2)
      drive1 = create_drive(volume = volume1, description = 'drive1')
      drive2 = create_drive(volume = volume2, description = 'drive2')
      drive3 = create_drive(volume = volume3, description = 'drive3')

      drive1.invite_many(beyond, [alice, bob, serge])
      drive2.invite_many(beyond, [alice, bob])
      drive3.invite_many(beyond, [alice])
      # Eve created drives.
      assertEq(len(beyond.get('users/%s/drives' % eve['name'],
                              auth = eve).json()['drives']),
               3)
      assertEq(len(beyond.get('users/%s/drives' % alice['name'],
                              auth = alice).json()['drives']),
               3)
      assertEq(len(beyond.get('users/%s/drives' % bob['name'],
                              auth = bob).json()['drives']),
               2)
      assertEq(len(beyond.get('users/%s/drives' % serge['name'],
                              auth = serge).json()['drives']),
               1)
      alice_network = create_network(owner = alice)
      drive = create_drive(volume = create_volume(alice_network))
      create_passport(alice_network, eve)
      drive.invite(beyond, eve['name'])
      assertEq(len(beyond.get('users/%s/drives' % eve['name'],
                              auth = eve).json()['drives']),
               4)

      # Validate.
      drive1.accept_many(beyond, [alice, bob, serge])
      drive2.accept_many(beyond, [alice, bob])
      drive2.accept_many(beyond, [alice])
      drive.accept(beyond, eve)

if __name__ == '__main__':
  unittest.main()
