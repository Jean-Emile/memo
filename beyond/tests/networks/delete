#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

class Test(unittest.TestCase):

  def test_normal(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      network.put(beyond, owner = user)
      beyond.delete('networks/%s' % network['name'],
                    auth = user)

  def test_push_passport_and_delete(self):
    with Beyond() as beyond:
      alice, bob = User(), User()
      alice.put(beyond), bob.put(beyond)
      network = Network(name = 'infinit', owner = alice)
      network.put(beyond)
      passport = Passport(network, bob)
      passport.put(beyond)
      beyond.delete('networks/%s' % network['name'],
                    auth = alice)

  def test_push_pull_push_pull(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      for i in range(0, 10):
        network.put(beyond, owner = user)
        beyond.delete('networks/%s' % network['name'],
                      auth = user)

  def test_authentication(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      network.put(beyond, owner = user)
      throws(lambda: beyond.delete('networks/%s' % network['name']),
             json = False,
             expected = 401)

  def test_deleting_someone_else_network(self):
    with Beyond() as beyond:
      alice, bob = User(), User()
      alice.put(beyond), bob.put(beyond)
      network = Network(name = 'infinit', owner = alice)
      network.put(beyond, owner = alice)
      throws(lambda: beyond.delete('networks/%s' % network['name'],
                                   auth = bob),
             json = False,
             expected = 403)

  def test_deleting_an_unknown_network(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      throws(lambda: beyond.get('networks/%s/unknown' % user['name']),
             json = False,
             expected = 404)
      throws(lambda: beyond.delete('networks/%s/unknown' % user['name'],
                                   auth = user),
             json = False,
             expected = 404)

  def test_purge_normal(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'n', owner = user)
      network.put(beyond)
      volume = Volume(name = 'v', network = network)
      volume.put(beyond)
      drive = Drive(name = 'd', volume = volume)
      drive.put(beyond)
      kvs = KeyValueStore(name = 'k', network = network)
      kvs.put(beyond)
      beyond.delete('networks/%s' % network['name'],
                    auth = user,
                    params = {'purge': 'true'})
      throws(lambda: beyond.get('networks/%s' % network['name'], json = False),
             404)
      throws(lambda: beyond.get('volumes/%s' % volume['name'], json = False),
             404)
      throws(lambda: beyond.get('drives/%s' % drive['name'], json = False),
             404)
      throws(lambda: beyond.get('kvs/%s' % kvs['name'], json = False),
             404)

  # Check that we don't skip drives when a volume has already been pulled.
  def test_purge_partial(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'n', owner = user)
      network.put(beyond)
      volume = Volume(name = 'v', network = network)
      volume.put(beyond)
      drive = Drive(name = 'd', volume = volume)
      drive.put(beyond)
      beyond.delete('volumes/%s' % volume['name'], auth = user)
      beyond.delete('networks/%s' % network['name'],
                    auth = user,
                    params = {'purge': 'true'})
      throws(lambda: beyond.get('networks/%s' % network['name'], json = False),
             404)
      throws(lambda: beyond.get('volumes/%s' % volume['name'], json = False),
             404)
      throws(lambda: beyond.get('drives/%s' % drive['name'], json = False),
             404)

  # Check that we only remove objects owned by the user doing the purge.
  def test_purge_multi_user(self):
    with Beyond() as beyond:
      bob = User()
      bob.put(beyond)
      alice = User()
      alice.put(beyond)
      network = Network(name = 'n', owner = bob)
      network.put(beyond)
      volume1 = Volume(name = 'v', owner = bob, network = network)
      volume1.put(beyond)
      volume2 = Volume(name = 'v2', owner = alice, network = network)
      volume2.put(beyond)
      drive1 = Drive(name = 'd', owner = bob, volume = volume1)
      drive1.put(beyond)
      drive2 = Drive(name = 'd2', owner = alice, volume = volume2)
      drive2.put(beyond)
      kvs1 = KeyValueStore(name = 'k', owner = bob, network = network)
      kvs1.put(beyond)
      kvs2 = KeyValueStore(name = 'k2', owner = alice, network = network)
      kvs2.put(beyond)
      beyond.delete('networks/%s' % network['name'],
                    auth = bob,
                    params = {'purge': 'true'})
      throws(lambda: beyond.get('networks/%s' % network['name'], json = False),
             404)
      throws(lambda: beyond.get('volumes/%s' % volume1['name'], json = False),
             404)
      throws(lambda: beyond.get('drives/%s' % drive1['name'], json = False),
             404)
      throws(lambda: beyond.get('kvs/%s' % kvs1['name'],
                                json = False),
             404)
      # Ensure that alice's objects are still on Beyond.
      beyond.get('volumes/%s' % volume2['name'])
      beyond.get('drives/%s' % drive2['name'])
      beyond.get('kvs/%s' % kvs2['name'])

if __name__ == '__main__':
  unittest.main()
