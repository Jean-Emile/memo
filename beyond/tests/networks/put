#!/usr/bin/env python3

import infinit.beyond.bottle
from infinit.beyond.exceptions import *

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

def compare(orig, new):
  for k, value in orig.items():
    if isinstance(value, dict):
      compare(orig[k], new[k])
    else:
      assertEq(orig[k], new[k])

class Test(unittest.TestCase):

  def test_normal(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      throws(lambda: beyond.get('networks/%s' % network['name']),
             404,
             json = False)
      network.put(beyond, owner = user)
      res = beyond.get('networks/%s' % network['name']).json()
      assert res['name'] == network['name']
      assert res['owner'] == network['owner']

  def test_missing_field(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      for key in ['consensus', 'overlay']:
        network = Network(name = 'infinit', owner = user)
        del network[key]
        res = throws(lambda: network.put(beyond, owner = user),
                     400)
        assert 'missing_field' in  res['error']
        assert key in res['error']

  def test_invalid_format(self):
    with Beyond() as beyond:
      user = User()
      def network_name(name):
        network = Network(name = name, owner = user)
        res = throws(lambda: network.put(beyond, user),
                     422)
        assert 'invalid_format' in r['error']
      pass

  def test_repush(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      res = network.put(beyond, owner = user)
      assertEq(res.status_code, 201)
      res = network.put(beyond, owner = user)
      assertEq(res.status_code, 200)

  def _test_update(self, update, expected = 204):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      res = network.put(beyond, owner = user)
      assertEq(res.status_code, 201)
      original_network = beyond.get('networks/%s' % network['name']).json()
      network.update(update)
      new_network = None
      if int(expected / 100) == 2:
        res = network.put(beyond, owner = user)
        assertEq(res.status_code, expected)
        new_network = beyond.get('networks/%s' % network['name']).json()
      else:
        throws(lambda: network.put(beyond, owner = user), expected)
        new_network = beyond.get('networks/%s' % network['name']).json()
      return new_network

  def test_update(self):
    with Beyond() as beyond:
      network = self._test_update(
        {'consensus': {'type': 'paxos', 'replication-factor': 11}},
        200)
      assertEq(network['consensus']['replication-factor'], 11)
      kelips = deepcopy(Network.kelips)
      kelips['query_get_retries'] = 50
      network = self._test_update({'overlay': kelips}, 200)
      assertEq(network['overlay']['query_get_retries'], 50)
      network = self._test_update({'version': '9.9.9'}, 200)
      assertEq(network['version'], '9.9.9')
      network = self._test_update({}, 200)

  def test_passports_are_kept(self):
    with Beyond() as beyond:
      user, invitee = User(), User()
      user.put(beyond), invitee.put(beyond)
      network = Network(name = 'infinit', owner = user)
      res = network.put(beyond, owner = user)
      passport = Passport(network, invitee)
      passport.put(beyond)
      invitee_passport = beyond.get(
        'networks/%s/passports/%s' % (network['name'], invitee['name']),
        auth = invitee).json()
      network['version'] = '0.1.5'
      network.put(beyond, owner = user)
      invitee_passport_2 = beyond.get(
        'networks/%s/passports/%s' % (network['name'], invitee['name']),
        auth = invitee).json()
      compare(invitee_passport, invitee_passport_2)

  def test_endpoints_are_kept(self):
    with Beyond() as beyond:
      user, invitee = User(), User()
      user.put(beyond), invitee.put(beyond)
      network = Network(name = 'infinit', owner = user)
      res = network.put(beyond, owner = user)
      passport = Passport(network, invitee)
      passport.put(beyond)
      endpoint = {
        'addresses': [
          '198.211.123.209',
          '10.14.0.5',
        ],
        'port': 47339
      }
      beyond.put(
        'networks/%s/endpoints/%s/node_id' % (
          network['name'], invitee['name']),
        auth = invitee,
        json = endpoint).json()
      endpoints = beyond.get(
        'networks/%s/endpoints' % network['name'],
        auth = invitee).json()
      network['version'] = '0.1.5'
      network.put(beyond, owner = user)
      endpoints_2 = beyond.get(
        'networks/%s/endpoints' % network['name'],
        auth = invitee).json()
      assertEq(endpoints, endpoints_2)
      beyond.put(
        'networks/%s/endpoints/%s/node_id_2' % (
          network['name'], invitee['name']),
        auth = invitee,
        json = endpoint).json()
      endpoints_3 = beyond.get(
        'networks/%s/endpoints' % network['name'],
        auth = invitee).json()
      assertEq(endpoints_3[invitee['name']]['node_id'], endpoint)
      assertEq(endpoints_3[invitee['name']]['node_id_2'], endpoint)

  def test_invalid_name(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'invalid+name', owner = user)
      throws(lambda: network.put(beyond, owner = user), 422)

  def test_invalid_description(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(
        name = 'n', owner = user, description = 'bootsncatsn' * 187)
      throws(lambda: network.put(beyond, owner = user), 422)

if __name__ == '__main__':
  unittest.main()
