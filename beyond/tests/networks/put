#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

def compare(orig, new):
  for k, value in orig.items():
    if isinstance(value, dict):
      compare(orig[k], new[k])
    else:
      assertEq(orig[k], new[k])

with Beyond() as beyond:

  class Test(unittest.TestCase):

    def test_normal(self):
      user = User()
      user.put(beyond)
      network = Network('infinit', owner = user)
      throws(lambda: beyond.get('networks/%s' % network['name']),
             404,
             json = False)
      network.put(beyond, owner = user)
      res = beyond.get('networks/%s' % network['name']).json()
      assert res['name'] == network['name']
      assert res['owner'] == network['owner']

    def test_missing_field(self):
      user = User()
      user.put(beyond)
      for key in ['consensus', 'overlay']:
        network = Network('infinit', owner = user)
        del network[key]
        res = throws(lambda: network.put(beyond, owner = user),
                     400)
        assert 'missing_field' in  res['error']
        assert key in res['error']

    def test_invalid_format(self):
      user = User()
      def infinit_name(name):
        network = Network(name, owner = user)
        res = throws(lambda: network.put(beyond, user),
                     422)
        assert 'invalid_format' in r['error']
      pass

    def test_repush(self):
      user = User()
      user.put(beyond)
      network = Network('infinit', owner = user)
      res = network.put(beyond, owner = user)
      assertEq(res.status_code, 201)
      res = network.put(beyond, owner = user)
      assertEq(res.status_code, 200)

    def _test_update(self, update, expected = 204):
      user = User()
      user.put(beyond)
      network = Network('infinit', owner = user)
      res = network.put(beyond, owner = user)
      assertEq(res.status_code, 201)
      original_network = beyond.get('networks/%s' % network['name']).json()
      network.update(update)
      new_network = None
      if int(expected / 100) == 2:
        res = network.put(beyond, owner = user)
        assertEq(res.status_code, expected)
        new_network = beyond.get('networks/%s' % network['name']).json()
      else:
        throws(lambda: network.put(beyond, owner = user), expected)
        new_network = beyond.get('networks/%s' % network['name']).json()
      return new_network

    def test_update(self):
      network = self._test_update(
        {'consensus': {'type': 'paxos', 'replication-factor': 11}},
        200)
      assertEq(network['consensus']['replication-factor'], 11)
      kelips = deepcopy(Network.kelips)
      kelips['config']['query_get_retries'] = 50
      network = self._test_update({'overlay': kelips}, 200)
      assertEq(network['overlay']['config']['query_get_retries'], 50)
      network = self._test_update({'version': '9.9.9'}, 200)
      assertEq(network['version'], '9.9.9')
      network = self._test_update({}, 200)

    def test_passports_are_kept(self):
      user, invitee = User(), User()
      user.put(beyond), invitee.put(beyond)
      network = Network('infinit', owner = user)
      res = network.put(beyond, owner = user)
      passport = Passport(network, invitee)
      passport.put(beyond)
      invitee_passport = beyond.get(
        'networks/%s/passports/%s' % (network['name'], invitee['name']),
        auth = invitee.private_key).json()
      network['version'] = '0.1.5'
      network.put(beyond, owner = user)
      invitee_passport_2 = beyond.get(
        'networks/%s/passports/%s' % (network['name'], invitee['name']),
        auth = invitee.private_key).json()
      compare(invitee_passport, invitee_passport_2)

    def test_endpoints_are_kept(self):
      user, invitee = User(), User()
      user.put(beyond), invitee.put(beyond)
      network = Network('infinit', owner = user)
      res = network.put(beyond, owner = user)
      passport = Passport(network, invitee)
      passport.put(beyond)
      invitee_passport = beyond.put(
        'networks/%s/endpoints/%s/node_id' % (network['name'], invitee['name']),
        auth = invitee.private_key,
        json = {'stuff': 1}).json()
      invitee_passport = beyond.get(
        'networks/%s/endpoints' % network['name'],
        auth = invitee.private_key).json()
      network['version'] = '0.1.5'
      network.put(beyond, owner = user)
      invitee_passport_2 = beyond.get(
        'networks/%s/endpoints' % network['name'],
        auth = invitee.private_key).json()
      compare(invitee_passport, invitee_passport_2)

  if __name__ == '__main__':
    unittest.main()
