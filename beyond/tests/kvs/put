#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

class Test(unittest.TestCase):

  def test_normal(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'server1-server2', owner = user)
      network.put(beyond)
      kvs = KeyValueStore(name = 'business', network = network)
      throws(lambda: beyond.get('kvs/%s' % kvs['name']),
             404,
             json = False)
      kvs.put(beyond)
      res = beyond.get('kvs/%s' % kvs['name']).json()
      assertEq(res['name'], kvs['name'])
      assertEq(res['network'], network['name'])
      assert 'owner' not in res

  def test_different_owner(self):
    with Beyond() as beyond:
      user = User()
      user2 = User()
      user.put(beyond)
      user2.put(beyond)
      network = Network(name = 'server1-server2', owner = user)
      network.put(beyond)
      kvs = KeyValueStore(name = 'business', network = network, owner = user2)
      throws(lambda: beyond.get('kvs/%s' % kvs['name']),
             404,
             json = False)
      kvs.put(beyond)
      res = beyond.get('kvs/%s' % kvs['name']).json()
      assertEq(res['name'], kvs['name'])
      assertEq(res['network'], network['name'])
      assert 'owner' in res
      assertEq(res['owner'], user2['public_key'])

  def test_already_pushed(self):
    with Beyond() as beyond:
      # Test same already pushed
      user = User()
      user.put(beyond)
      network = Network(owner = user)
      network.put(beyond)
      kvs = KeyValueStore(name = 'stuff', network = network)
      res = kvs.put(beyond)
      assertEq(res.status_code, 201)
      res = kvs.put(beyond)
      assertEq(res.status_code, 200)
      # Test conflict
      kvs['network'] = 'foo/bar'
      throws(lambda: kvs.put(beyond), 409)

  def test_user_demo_is_not_allowed_to_put(self):
    with Beyond() as beyond:
      infinit = User(name = 'infinit')
      infinit.put(beyond)
      demo = User(name = 'demo')
      demo.put(beyond)
      # Create network as infinit.
      network = Network(name = 'share', owner = infinit)
      network.put(beyond)
      # Invite demo.
      Passport(network, demo).put(beyond)
      kvs = KeyValueStore(name = 'stuff', network = network, owner = demo)
      throws(lambda: kvs.put(beyond, owner = demo),
             expected = 403,
             json = False)

if __name__ == '__main__':
  unittest.main()
