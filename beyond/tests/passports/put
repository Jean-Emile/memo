#!/usr/bin/env python3

import infinit.beyond.bottle

import unittest
import urllib.parse

from utils import *

from copy import deepcopy

class Test(unittest.TestCase):

  def test_normal(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      invitee = User()
      invitee.put(beyond)
      network.put(beyond, owner = user)
      passport = Passport(network, invitee)
      passport.put(beyond)
      beyond.get('networks/%s/passports/%s' % (
        network['name'], invitee['name']),
                 auth = invitee)

  def test_all_your_passports(self):
    with Beyond() as beyond:
      count = 10
      user = User()
      user.put(beyond)
      invitee = User()
      invitee.put(beyond)
      for i in range(0, count):
        network = Network(name = 'infinit-%r' % i, owner = user)
        network.put(beyond, owner = user)
        passport = Passport(network, invitee)
        passport.put(beyond)
      l = beyond.get('users/%s/passports' % invitee['name'],
                     auth = invitee).json()
      assertEq(len(l['passports']), count)

  def test_authorisation_put(self):
    with Beyond() as beyond:
      user, invitee, evil = User(), User(), User()
      user.put(beyond)
      evil.put(beyond)
      invitee.put(beyond)
      network = Network(name = 'infinit', owner = user)
      network.put(beyond, owner = user)
      passport = Passport(network, invitee)
      try:
        passport.put(beyond, owner = evil)
        assert False
      except Exception:
        pass

  def test_multiple_networks(self):
    with Beyond() as beyond:
      user, invitee = User(), User()
      user.put(beyond), invitee.put(beyond)
      networks = {}
      for i in range(10):
        network = Network(name = 'infinit%r' % i, owner = user)
        network.put(beyond, owner = user)
        networks[i] = network
      for i in range(0, 10, 2):
        passport = Passport(networks[i], invitee)
        passport.put(beyond, owner = user)
      beyond.get('users/%s/passports' % invitee['name'],
                 auth = invitee)

  def test_multiple_users(self):
    with Beyond() as beyond:
      def populate(invite):
        user, invitee = User(), User()
        user.put(beyond), invitee.put(beyond)
        network = Network(name ='infinit', owner = user)
        network.put(beyond, owner = user)
        if invite:
          passport = Passport(network, invitee)
          passport.put(beyond, owner = user)
        return user, invitee, network
      for i in range(10):
        populate(i % 2)
      user, invitee, network = populate(True)
      beyond.get('users/%s/passports' % invitee['name'], auth = invitee)

  def test_owning_a_network_and_being_invited_to_another(self):
    with Beyond() as beyond:
      A, B = User(), User()
      A.put(beyond), B.put(beyond)
      network_a = Network(name = 'infinit', owner = A)
      network_a.put(beyond)
      network_b = Network(name = 'infinit', owner = B)
      network_b.put(beyond)
      Passport(network_a, B).put(beyond)
      Passport(network_b, A).put(beyond)
      beyond.get('users/%s/passports' % B['name'], auth = B)
      beyond.get('users/%s/passports' % A['name'], auth = A)

  def passport_as_allowed_user(self, beyond, owner, delegate, invitee, delete_as):
    network = Network(name = 'osef', owner = owner)
    network.put(beyond)
    throws(lambda: Passport(network, invitee).put(beyond, delegate), 403)
    # Put a passport that doesn't delegate rights to invite.
    p = Passport(network, delegate, delegate = False)
    p.put(beyond, owner)
    # Make sure the user can't push.
    throws(lambda: Passport(network, invitee).put(beyond, delegate), 403)
    # Reset.
    p.delete(beyond, owner)
    # Put a passport that delegates rights to invite.
    p = Passport(network, delegate, delegate = True)
    p.put(beyond, owner)
    # Make sure delegate can invite invitee.
    x = Passport(network, invitee)
    x.put(beyond, delegate)
    r = beyond.get(
      'networks/%s/passports/%s' % (network['name'], invitee['name']),
      auth = invitee).json()
    # Make sure the owner, the delegate or the invitee can delete the
    # passport.
    x.delete(beyond, delete_as)
    # Make sure the delegate cannot delete passport he didn't issue.
    random = User()
    random.put(beyond)
    p = Passport(network, random)
    p.put(beyond)
    # Because passport has been issued by owner, delegate is not able to
    # delete it.
    throws(lambda: p.delete(beyond, delegate), 403)

  def test_passports_as_allowed_user(self):
    with Beyond() as beyond:
      o, d, i = users(3, beyond)
      self.passport_as_allowed_user(beyond, o, d, i, o)
      o, d, i = users(3, beyond)
      self.passport_as_allowed_user(beyond, o, d, i, d)
      o, d, i = users(3, beyond)
      self.passport_as_allowed_user(beyond, o, d, i, i)

  def test_authorisation_get(self):
    with Beyond() as beyond:
      user = User()
      user.put(beyond)
      network = Network(name = 'infinit', owner = user)
      network.put(beyond, owner = user)
      invitee = User()
      invitee.put(beyond)
      passport = Passport(network, invitee)
      passport.put(beyond)
      try:
        beyond.get('networks/%s/passports/%s' % (
          network['name'], invitee['name']))
        assert False
      except Exception:
        pass

if __name__ == '__main__':
  unittest.main()
