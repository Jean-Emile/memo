#!/usr/bin/env python3

import mistune
import slacker

class SlackRenderer(mistune.Renderer):

  def __init__(self):
    super().__init__()
    self.__start = False
    self.__stop = False
    self.__version = False

  def header(self, text, level, raw=None):
    if level == 2:
      if not self.__start:
        import re
        r = re.compile('\\[([0-9.]+)\\].*')
        self.__version = r.match(text).group(1)
        self.__start = True
      else:
        self.__stop = True
    elif level == 3 and self.__start and not self.__stop:
      return '\n*%s*\n\n' % text
    return ''

  def codespan(self, text):
    return '`%s`' % text

  def list(self, body, ordered=True):
    return body

  def list_item(self, text):
    if self.__start and not self.__stop:
      return 'â€¢ %s\n' % ' '.join(text.split())
    else:
      return ''

  def paragraph(self, text):
    if self.__start and not self.__stop:
      return 'Release %s is out: %s\n\n' % (self.__version, text)
    return ''

  def block_html(self, text):
    stripped = text.strip()
    if stripped.startswith('<!--') and stripped.endswith('-->'):
      return ''
    else:
      return text

slack = slacker.Slacker('xoxp-9022635957-14922574483-83196210288-'
                        '4471adc3f4d197c0662e4d1fa6be5fae')
markdown = mistune.Markdown(renderer = SlackRenderer())
with open('/home/mefyl/dev/infinit/fs-master/ChangeLog', 'r') as f:
  import sys
  contents = markdown(f.read())
  channels = [(c, False) for c in sys.argv[1:]]
  if not channels:
    channels = [('#announcements', True), ('#release-notes', False)]
  print('Sending to %s:\n\n%s' % (
    ', '.join(c for c, n in channels), contents))
  sys.stdin.read()
  for channel, notify in channels:
    slack.chat.post_message(
      channel,
      ('@channel: ' if notify else '') + contents,
      as_user = True)
