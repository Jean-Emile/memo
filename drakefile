import drake
import drake.cxx
import drake.valgrind

def configure(
    cxx_toolkit = None,
    cxx_config = drake.cxx.Config(),
    production_build = False,
    boost = None,
    prefix = '/usr',
    valgrind = None,
    valgrind_tests = False,
):

  elle = drake.include('elle',
                       cxx_toolkit = cxx_toolkit,
                       cxx_config = cxx_config)
  elle_lib = drake.copy(elle.elle.lib_dynamic, 'lib',
                        strip_prefix = True)
  aws_lib = drake.copy(elle.aws.library, 'lib',
                        strip_prefix = True)
  reactor_lib = drake.copy(elle.reactor.lib_dynamic, 'lib',
                        strip_prefix = True)
  cryptography_lib = drake.copy(elle.cryptography.lib_dynamic, 'lib',
                                strip_prefix = True)
  cxx_toolkit = elle.cxx_toolkit
  cxx_config = drake.cxx.Config(elle.config)
  cxx_config.add_local_include_path('src')
  cxx_config.warnings.parentheses = False

  rule_build = drake.Rule('build')

  ## --------------- ##
  ## Infinit library ##
  ## --------------- ##

  cxx_config_infinit = drake.cxx.Config(cxx_config)
  cxx_config_infinit += elle.boost.config_system(link = False)
  cxx_config_infinit.library_add(
    drake.copy(elle.boost.system_dynamic, 'lib', True))
  cxx_config_infinit += elle.boost.config_filesystem(link = False)
  cxx_config_infinit.library_add(
    drake.copy(elle.boost.filesystem_dynamic, 'lib', True))

  infinit_sources = drake.nodes(
    'src/infinit/model/Address.cc',
    'src/infinit/model/Address.hh',
    'src/infinit/model/MissingBlock.cc',
    'src/infinit/model/MissingBlock.hh',
    'src/infinit/model/Model.cc',
    'src/infinit/model/Model.hh',
    'src/infinit/model/blocks/Block.cc',
    'src/infinit/model/blocks/Block.hh',
    'src/infinit/model/blocks/fwd.hh',
    'src/infinit/model/faith/Faith.cc',
    'src/infinit/model/faith/Faith.hh',
    'src/infinit/storage/Collision.cc',
    'src/infinit/storage/Collision.hh',
    'src/infinit/storage/Filesystem.cc',
    'src/infinit/storage/Filesystem.hh',
    'src/infinit/storage/Key.hh',
    'src/infinit/storage/Memory.cc',
    'src/infinit/storage/Memory.hh',
    'src/infinit/storage/Mirror.cc',
    'src/infinit/storage/Mirror.hh',
    'src/infinit/storage/MissingKey.cc',
    'src/infinit/storage/MissingKey.hh',
    'src/infinit/storage/sftp.cc',
    'src/infinit/storage/sftp.hh',
    'src/infinit/storage/Storage.cc',
    'src/infinit/storage/Storage.hh',
    'src/infinit/storage/Strip.cc',
    'src/infinit/storage/Strip.hh',
    'src/infinit/storage/S3.cc',
    'src/infinit/storage/S3.hh',
    'src/infinit/storage/fwd.hh',
    'src/infinit/filesystem/filesystem.hh',
    'src/infinit/filesystem/filesystem.cc',
  )
  infinit_lib = drake.cxx.DynLib(
    'lib/infinit',
    infinit_sources + [elle_lib, cryptography_lib],
    cxx_toolkit,
    cxx_config_infinit)
  rule_build << infinit_lib

  ## ----- ##
  ## Tests ##
  ## ----- ##

  rule_tests = drake.Rule('tests')
  rule_check = drake.Rule('check')
  rule_bins  = drake.Rule('bin')

  cxx_config_tests = drake.cxx.Config(cxx_config)
  cxx_config_tests += elle.boost.config_test(link = False)
  cxx_config_tests.library_add(
    drake.copy(elle.boost.test_dynamic, 'lib', True))
  cxx_config_tests += elle.boost.config_system(link = False)
  cxx_config_tests.library_add(
    drake.copy(elle.boost.system_dynamic, 'lib', True))
  cxx_config_tests += elle.boost.config_filesystem(link = False)
  cxx_config_tests.library_add(
    drake.copy(elle.boost.filesystem_dynamic, 'lib', True))

  for test_name in ['faith', 'storage', 'filesystem']:
    test = drake.cxx.Executable(
      'tests/%s' % test_name,
      [drake.node('tests/%s.cc' % test_name), infinit_lib, elle_lib, aws_lib, reactor_lib],
      cxx_toolkit,
      cxx_config_tests)

    rule_tests << test
    if valgrind_tests:
      runner = drake.valgrind.ValgrindRunner(
        exe = test, valgrind = valgrind)
    else:
      runner = drake.Runner(exe = test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  for bin_name in ['s3fs', 'filesystem', 'sshfs']:
    bin = drake.cxx.Executable(
      'bin/%s' % bin_name,
      [drake.node('bin/%s.cc' % bin_name), infinit_lib, elle_lib, aws_lib, reactor_lib],
      cxx_toolkit,
      cxx_config_tests)
    rule_bins << bin
