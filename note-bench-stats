#!/usr/bin/env python3

# Script to store and evaluate benchmark information.
# Timing information from .bench files is read. The mean and standard deviation
# are calculated. This is then stored in the current commit as a note with the
# bench ref.
#
# Usage: ./note-bench-stats [path to folder with .bench files]

import json
import os
import statistics
import subprocess
import sys

if len(sys.argv) < 2:
  raise Exception('Specify path to process')

dir = sys.argv[1]
if not os.path.exists(dir):
  raise Exception('%s does not exist' % dir)
if not os.path.isdir(dir):
  raise Exception('%s is not a directory')

class BenchResult:

  def __init__(self, name, data):
    self.__name = name
    self.__data = data

  @property
  def name(self):
    return self.__name

  @property
  def data(self):
    return self.__data

  @property
  def mean(self):
    return statistics.mean(self.data)

  @property
  def stdev(self):
    return statistics.stdev(self.data)

  def dict(self):
    return {
      self.name: {
        'data': self.data,
        'mean': self.mean,
        'stdev': self.stdev,
      }
    }

class GitNote:

  def current(self):
    try:
      p = subprocess.Popen(
        ['git', 'notes', '--ref=bench', 'show'],
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
      )
      out, err = p.communicate(timeout = 10)
      if not out:
        return {}
      return json.loads(out.decode('utf-8'))
    except Exception as e:
      return {}

  def add(self, data):
    note = self.current()
    note.update(data)
    p = subprocess.Popen(
      [
        'git', 'notes', '--ref=bench', 'add', '-f',
        '-m', json.dumps(note, indent = 2, sort_keys = True),
      ],
      stdout = subprocess.PIPE,
      stderr = subprocess.PIPE,
    )
    out, err = p.communicate(timeout = 10)
    if p.returncode != 0:
      print('stderr: %s' % err)
      print('stdout: %s' % out)
      raise Exception('Unable to add note')

def process_bench_file(path):
  with open(path, 'r') as f:
    data = [float(l.strip()) for l in f.readlines()]
    return BenchResult(os.path.splitext(os.path.basename(path))[0], data)

bench_note = {}

for f in os.listdir(dir):
  if f.endswith('.bench'):
    b = process_bench_file(os.path.join(dir, f))
    bench_note.update(b.dict())

print('Benchmark results:')
print(json.dumps(bench_note, indent = 2, sort_keys = True))

# XXX: Add results to note when buildfarm can push to git.
# git_note = GitNote()
# git_note.add(bench_note)
