{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Docker for AWS Alpha 1",

    "Parameters": {
        "HostName": {
            "Description": "DNS Host/Domain.  We create an ELB for this hostname / domain.",
            "Type": "String",
            "Default": ""
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "id_rsa_aws",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType" : {
            "Type" : "String",
            "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
            "AllowedValues" : [
                "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
                "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
                "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
                "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
            "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
            "Default" : "t2.micro"
        },
        "ManagerInstanceType" : {
            "Type" : "String",
            "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
            "AllowedValues" : [
                "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
                "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
                "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
                "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
            "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
            "Default" : "t2.micro"
        },
        "ClusterSize" : {
            "Type" : "Number",
            "Default" : "5",
            "MinValue" : "1",
            "MaxValue" : "1000",
            "Description" : "Number of worker nodes in the Swarm (1-1000)."
        },
        "ManagerSize" : {
            "Type" : "Number",
            "Default" : "3",
            "AllowedValues" : ["1", "3", "5"],
            "Description" : "Number of Swarm manager nodes (1, 3, 5)"
        }
    },
    "Metadata" : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : { "default" : "Swarm Size" },
                    "Parameters" : [ "ManagerSize", "ClusterSize" ]
                },
                {
                    "Label" : { "default":"Swarm Properties" },
                    "Parameters" : [ "ManagerInstanceType", "InstanceType", "KeyName" ]
                }
            ],
            "ParameterLabels" : {
                "ManagerSize" : { "default" : "Number of Swarm managers?" },
                "ClusterSize" : { "default" : "Number of Swarm worker nodes?" },
                "InstanceType" : { "default" : "Agent worker instance type?" },
                "ManagerInstanceType" : { "default" : "Swarm manager instance type?" },
                "KeyName" : { "default" : "Which SSH key to use?" },
                "HostName" : { "default" : "DNS host?" }
            }
        }
    },
    "Mappings": {

        "VpcCidrs" : {
            "vpc" : {
                "cidr": "192.168.0.0/16"
            },
            "pubsubnet1" : {
                "cidr": "192.168.33.0/24"
            },
            "pubsubnet2" : {
                "cidr": "192.168.34.0/24"
            }
        },

        "AWSInstanceType2Arch": {
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.large": {
                "Arch": "HVM64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.large": {
                "Arch": "HVM64"
            },
            "m4.xlarge": {
                "Arch": "HVM64"
            },
            "m4.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.4xlarge": {
                "Arch": "HVM64"
            },
            "m4.10xlarge": {
                "Arch": "HVM64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c3.4xlarge": {
                "Arch": "HVM64"
            },
            "c3.8xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "c4.8xlarge": {
                "Arch": "HVM64"
            },
            "g2.2xlarge": {
                "Arch": "HVMG2"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.4xlarge": {
                "Arch": "HVM64"
            },
            "i2.8xlarge": {
                "Arch": "HVM64"
            },
            "d2.xlarge": {
                "Arch": "HVM64"
            },
            "d2.2xlarge": {
                "Arch": "HVM64"
            },
            "d2.4xlarge": {
                "Arch": "HVM64"
            },
            "d2.8xlarge": {
                "Arch": "HVM64"
            },
            "hi1.4xlarge": {
                "Arch": "HVM64"
            },
            "hs1.8xlarge": {
                "Arch": "HVM64"
            },
            "cr1.8xlarge": {
                "Arch": "HVM64"
            },
            "cc2.8xlarge": {
                "Arch": "HVM64"
            }
        },

        "AWSRegionArch2AMI": {
            "us-west-1": {
                "HVM64": "ami-e8044188",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-west-2": {
                "HVM64": "ami-33b97c53",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-east-1": {
                "HVM64": "ami-3d56ad50",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-1": {
                "HVM64": "ami-378b1744",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-central-1": {
                "HVM64": "ami-e9a44d86",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-1": {
                "HVM64": "ami-ae79a9cd",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-1": {
                "HVM64": "ami-02cf2763",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-2": {
                "HVM64": "ami-563b1235",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-2": {
                "HVM64": "ami-6b0bc005",
                "HVMG2": "NOT_SUPPORTED"
            },
            "sa-east-1": {
                "HVM64": "ami-6def6501",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    },

    "Resources": {

        "Vpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] },
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
                ]
            }
        },

        "PubSubnetAz1" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet1", "cidr" ] },
                "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
                ]
            }
        },

        "PubSubnetAz2" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet2", "cidr" ] },
                "AvailabilityZone" :  { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
                ]
            }
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
                ]
            }
        },

        "AttachGateway" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "RouteViaIgw" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc"}
            }
        },

        "PublicRouteViaIgw" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteViaIgw" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PubSubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz1" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "PubSubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz2" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "SwarmWideSG": {
            "DependsOn": "NodeVpcSG",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Wide open",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] }
                    }
                ]
            }
        },

        "ManagerVpcSG": {
            "DependsOn": "NodeVpcSG",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Manager SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp","FromPort": "8080","ToPort": "8080","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp","FromPort": "2375","ToPort": "2375", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "4500", "ToPort" : "4500", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "udp", "FromPort" : "4789", "ToPort" : "4789", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "udp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } }
                ]
            }
        },
        "NodeVpcSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Node SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp","FromPort": "80","ToPort": "80","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp","FromPort": "8080","ToPort": "8080","CidrIp": "0.0.0.0/0"}
                ]
            }
        },

        "SwarmDynDBTable" : {
            "DependsOn" : "ExternalLoadBalancer",
              "Type" : "AWS::DynamoDB::Table",
              "Properties" : {
                "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "dyndbtable" ] ] },
                "AttributeDefinitions": [ {
                  "AttributeName" : "node_type",
                  "AttributeType" : "S"
                } ],
                "KeySchema": [
                  { "AttributeName": "node_type" , "KeyType": "HASH" }
                ],
                "ProvisionedThroughput" : {
                  "ReadCapacityUnits" : 1,
                  "WriteCapacityUnits" : 1
                }
              }
          },

         "BeyondDynDBTable" : {
           "DependsOn" : "ExternalLoadBalancer",
           "Type" : "AWS::DynamoDB::Table",
           "Properties" : {
             "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "infinit-beyond" ] ] },
             "AttributeDefinitions": [
               {
                 "AttributeName" : "type",
                 "AttributeType" : "S"
               },
               {
                 "AttributeName" : "name",
                 "AttributeType" : "S"
               }
             ],
             "KeySchema": [
               { "AttributeName": "type" , "KeyType": "HASH" },
               { "AttributeName": "name" , "KeyType": "RANGE" }
             ],
             "ProvisionedThroughput" : {
               "ReadCapacityUnits" : 1,
               "WriteCapacityUnits" : 1
             }
           }
         },

        "ManagerAsg" : {
            "DependsOn" : "SwarmDynDBTable",
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] } ],
                "LaunchConfigurationName" : { "Ref" : "managerNode" },
                "LoadBalancerNames" : [ { "Ref" : "SSHLoadBalancer" } ],
                "MinSize" : "0",
                "MaxSize" : "5",
                "DesiredCapacity" : { "Ref" : "ManagerSize" },
                "Tags": [
                    { "Key" : "Name",
                      "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Manager" ] ] },
                      "PropagateAtLaunch" : "true" }
                ]
            }
        },

        "managerNode": {
            "DependsOn": "ExternalLoadBalancer",
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {"Ref" : "ManagerInstanceType"},
                "IamInstanceProfile" : { "Ref" : "ProxyInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "InstanceType"}, "Arch"]
                    }]
                },
                "AssociatePublicIpAddress": "true",
                "SecurityGroups": [ { "Ref" : "ManagerVpcSG"}, { "Ref" : "SwarmWideSG"} ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
                                "echo `wget -qO- http://169.254.169.254/latest/meta-data/hostname` > /etc/hostname; hostname -F /etc/hostname \n",

                                "mkdir -p /var/lib/docker/swarm\n",
                                "echo \"", {"Ref": "ExternalLoadBalancer"}, "\" > /var/lib/docker/swarm/lb_name\n",

                                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"default: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",


                                "export PRIVATE_IP=`wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                                "sleep 5\n",

                                "mount --make-shared / \n",

                                "docker run --restart=no -d ",
                                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                                "-e INFINIT_BEYOND_DYNAMODB_TABLE='", { "Ref" : "BeyondDynDBTable" } , "' ",
                                "-e NODE_TYPE='manager' ",
                                "-e DEMO=1 ",
                                "-e DO_NOTHING=1 ",
                                "-e AWS_DEFAULT_REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e MANAGER_LB='", {"Fn::GetAtt" : [ "SSHLoadBalancer", "DNSName"] }, "' ",
                                "-e N_MANAGERS='",{ "Ref" : "ManagerSize" }, "' ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/docker/bin/docker ",
                                "-v /var/log:/var/log ",
                                "bearclaw/infinit-deploy:latest /usr/bin/entry.sh \n",

                                "docker run --restart=always -d -p 22:22 ",
                                "-v /home/docker/.ssh:/root/.ssh:ro ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                                "-v /usr/bin/docker:/usr/docker/bin/docker ",
                                "-v /var/log:/var/log ",
                                "kencochrane/taco-shell:alpha1\n",

                                "docker run --restart=always -d --name=editions_controller ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                                "docker4x/controller:RC1 run --log=4\n"
                            ]
                        ]
                    }
                }
            }
        },
        "NodeAsg" : {
            "DependsOn" : "ManagerAsg",
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] } ],
                "LaunchConfigurationName" : { "Ref" : "node" },
                "LoadBalancerNames" : [ { "Ref" : "ExternalLoadBalancer" } ],
                "MinSize" : "1",
                "MaxSize" : "1000",
                "DesiredCapacity" : { "Ref" : "ClusterSize"},
                "Tags": [
                    { "Key" : "Name",
                      "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] },
                      "PropagateAtLaunch" : "true" }
                ]
            }
        },
        "node": {
            "DependsOn": "ManagerAsg",
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {"Ref" : "InstanceType"},
                "IamInstanceProfile" : { "Ref" : "ProxyInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "InstanceType"}, "Arch"]
                    }]
                },
                "AssociatePublicIpAddress": "true",
                "SecurityGroups": [ { "Ref" : "NodeVpcSG"}, { "Ref" : "SwarmWideSG"} ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
                                "sleep 5\n",
                                "mount --make-shared / \n",
                                "docker run --restart=no -d ",
                                "-e DEMO=1 ",
                                "-e DO_NOTHING=1 ",
                                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                                "-e NODE_TYPE='node' ",
                                "-e AWS_DEFAULT_REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e MANAGER_LB='", {"Fn::GetAtt" : [ "SSHLoadBalancer", "DNSName"] }, "' ",                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/docker/bin/docker ",
                                "-v /var/log:/var/log ",
                                "bearclaw/infinit-deploy:latest /usr/bin/entry.sh \n"
                            ]
                        ]
                    }
                }
            }
        },
        "ExternalLoadBalancerSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "External Load Balancer SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "-1","FromPort": "0","ToPort": "65535","CidrIp": "0.0.0.0/0"}
                ]
            }
        },
        "ExternalLoadBalancer" : {
            "DependsOn" : "AttachGateway",
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "ConnectionSettings" : {
                    "IdleTimeout" : "600"
                },
                "Subnets" : [
                    {"Ref" : "PubSubnetAz1" },
                    {"Ref" : "PubSubnetAz2" }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort" : "80",
                        "Protocol" : "TCP"
                    }
                ],
                "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] },
                "CrossZone" : "true",
                "HealthCheck" : {
                    "HealthyThreshold" : "2",
                    "Interval" : "10",
                    "Target" : "TCP:2375",
                    "Timeout" : "2",
                    "UnhealthyThreshold" : "4"
                },
                "SecurityGroups" : [ { "Ref" : "ExternalLoadBalancerSG" } ],
                "Tags": [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] }
                    }
                ]
            }
        },
        "SSHLoadBalancerSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "SSH Load Balancer SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "-1","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"}
                ]
            }
        },
        "SSHLoadBalancer" : {
            "DependsOn" : "AttachGateway",
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "ConnectionSettings" : {
                    "IdleTimeout" : "600"
                },
                "Subnets" : [
                    {"Ref" : "PubSubnetAz1" },
                    {"Ref" : "PubSubnetAz2" }
                ],
                "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB-SSH" ] ] },
                "CrossZone" : "true",
                "HealthCheck" : {
                    "HealthyThreshold" : "2",
                    "Interval" : "10",
                    "Target" : "TCP:22",
                    "Timeout" : "2",
                    "UnhealthyThreshold" : "4"
                },
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "22",
                        "InstancePort" : "22",
                        "Protocol" : "TCP"
                    },
                    {
                        "LoadBalancerPort" : "8080",
                        "InstancePort" : "8080",
                        "Protocol" : "TCP"
                    }
                ],
		"SecurityGroups" : [ { "Ref" : "SSHLoadBalancerSG" } ],
                "Tags": [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB-SSH" ] ] }
                    }
                ]
            }
        },
    "ProxyRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
        "AssumeRolePolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
            "Effect": "Allow",
            "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
            } ]
        },
        "Path": "/"
            }
    },
    "DynDBPolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
        "PolicyName": "dyndb-getput",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query"
                ],
                "Resource": [
                  { "Fn::Join": ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "SwarmDynDBTable" }]] },
                  { "Fn::Join": ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "BeyondDynDBTable" }]] },
                  { "Fn::Join": ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "BeyondDynDBTable" }, "/index/type"]] }
                ]
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "ProxyPolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
        "PolicyName": "elb-update",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:*",
            "Resource": "*"
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "ProxyInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
        "Path": "/",
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    }
    },
    "Outputs": {
        "SwarmDNS" : {
            "Description" : "Use this hostname for your DNS records of Swarm services",
            "Value" : {
            "Fn::GetAtt" : [ "ExternalLoadBalancer", "DNSName" ]
            }
        },
        "SSH" : {
            "Description" : "Use this command to login to your Docker console.",
            "Value" : {
                "Fn::Join": [ "", ["ssh root@", {"Fn::GetAtt" : [ "SSHLoadBalancer", "DNSName"] } ] ]
            }
        }
    }
}