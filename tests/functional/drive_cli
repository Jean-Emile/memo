#!/usr/bin/env python3

from utils import *
import json
import random
import string
import os
import itertools

# Creating and inviting.
with Beyond() as beyond,\
     Infinit(beyond = beyond) as bob,\
     Infinit(beyond = beyond) as alice,\
     Infinit(beyond = beyond) as god,\
     Infinit(beyond = beyond) as god1,\
     Infinit(beyond = beyond) as god2,\
     Infinit(beyond = beyond) as god3:
  # Create bob.
  bob.run(['infinit-user', '--signup',  'bob', '--email',  'bob@infinit.io'])

  # Create alice.
  alice.run(['infinit-user', '--signup',  '--name', 'alice', '--email',  'alice@infinit.io'])
  a = alice.run(['infinit-user', '--export', 'alice'])

  # Create gods.
  god.run(['infinit-user', '--signup', '--name', 'god', '--email', 'god@paradis.up'])
  god1.run(['infinit-user', '--signup', '--name', 'god1', '--email', 'god1@paradis.up'])
  god2.run(['infinit-user', '--signup', '--name', 'god2', '--email', 'god2@paradis.up'])
  god3.run(['infinit-user', '--signup', '--name', 'god3', '--email', 'god3@paradis.up'])
  g = god.run(['infinit-user', '--export', 'god'])
  g1 = god1.run(['infinit-user', '--export', 'god1'])
  g2 = god2.run(['infinit-user', '--export', 'god2'])
  g3 = god3.run(['infinit-user', '--export', 'god3'])

  # Import alice as bob.
  bob.run(['infinit-user', '--import'], input = a)
  # Import god as bob.
  bob.run(['infinit-user', '--import'], input = g)
  bob.run(['infinit-user', '--import'], input = g1)
  bob.run(['infinit-user', '--import'], input = g2)
  bob.run(['infinit-user', '--import'], input = g3)

  # Create network & volume.
  bob.run(['infinit-network', '--create', '--name', 'network', '--as', 'bob', '--push'])
  n = bob.run(['infinit-network', '--export', '--name', 'network', '--as', 'bob'])
  bob.run(['infinit-volume', '--create', '--name', 'volume', '--network', 'network', '--as', 'bob', '--push'])
  v = bob.run(['infinit-volume', '--export', '--name', 'volume', '--as', 'bob'])

  # Create drive.
  description = 'a really long description: ' + 'x' * 1024
  bob.run([
    'infinit-drive', '--create',
    '--name', 'employees',
    '--network', 'network',
    '--volume', 'volume',
    '--description', description,
    '--as', 'bob',
    '--push',
  ])
  d = bob.run([
    'infinit-drive', '--export', '--name', 'employees', '--as', 'bob'])

  # Check integrity.
  assertEq(d['name'], 'bob/employees')
  assertEq(d['network'], n['name'])
  assertEq(d['volume'], v['name'])
  assertEq(d['description'], description)

  # Invite alice to the network.
  bob.run(['infinit-passport', '--create',
           '--network', d['network'],
           '--user', 'alice',
           '--as', 'bob',
           '--push'])

  # Invite alice.
  bob.run(['infinit-drive', '--invite',
           '--name', 'employees',
           '--user', 'alice',
           '--as', 'bob',
           '--fetch',
           '--push'])

  # Just Invite god without inviting him to the network.

  bob.run(['infinit-drive', '--invite',
           '--name', 'employees',
           '--user', 'god',
           '--as', 'bob',
           '--push'],
           return_code = 1)

  bob.run(['infinit-drive', '--invite',
           '--name', 'employees',
           '--user', 'god',
           '--as', 'bob',
           '--push',
           '--passport'])

  # Make sure alice doesn't have it.
  l = alice.run(['infinit-drive', '--as', 'alice', '--list'])
  assertEq(len(l), 0)

  # Fetch invitations.
  alice.run(['infinit-drive', '--fetch', '--as', 'alice'])

  # Make sure alice has it.
  l = alice.run(['infinit-drive', '--as', 'alice', '--list'])
  assertEq(len(l), 1)

  drive_name = l[0].split(':')[0]
  # Check that invitation is present.
  drive = alice.run(['infinit-drive', '--export', '--name', drive_name, '--as', 'alice'])
  assert 'alice' in drive['users'].keys()
  assert drive['users']['alice']['status'] == 'pending'

  # Join it.
  alice.run(['infinit-drive', '--join', '--name', drive_name, '--as', 'alice'])
  drive = alice.run(['infinit-drive', '--export', '--name', drive_name, '--as', 'alice'])
  assert drive['users']['alice']['status'] == 'ok'

  # Make sure it's replicated to other users.
  drive = bob.run(['infinit-drive', '--export', '--name', drive_name, '--as', 'bob'])
  assert drive['users']['alice']['status'] == 'pending'
  bob.run(['infinit-drive', '--fetch', '--as', 'bob'])
  drive = bob.run(['infinit-drive', '--export', '--name', drive_name, '--as', 'bob'])
  assert drive['users']['alice']['status'] == 'ok'

  users = []
  for name in ['god1', 'god2', 'god3']:
    users += ['--user', name]

  # They do not have passports.
  bob.run(['infinit-drive', '--as', 'bob',
           '--invite', 'employees',
           '--push'], return_code = 1)
  # Create them passports and push invitation.
  bob.run(['infinit-drive', '--as', 'bob',
          '--invite', 'employees',
          '--push', '--passport'])

  god1.run(['infinit-drive', '--fetch', '--as', 'god1'])
  god2.run(['infinit-drive', '--fetch', '--as', 'god2'])
  god3.run(['infinit-drive', '--fetch', '--as', 'god3'])

  l1 = god1.run(['infinit-drive', '--list', '--as', 'god1'])
  l2 = god2.run(['infinit-drive', '--list', '--as', 'god2'])
  l3 = god3.run(['infinit-drive', '--list', '--as', 'god3'])

  assert l1 == l2 and l2 == l3

# Test infinit drive --list and deleting or own drive after pushing, then
# fetch.
with Beyond() as beyond,\
     Infinit(beyond = beyond) as ifnt1:
  bob = User('bob', ifnt1)
  bob.run('infinit-user --signup --email bob@infinit.io')

  l = bob.run('infinit-drive --list')
  assert len(l) == 0

  bob.run('infinit-network --create %s -p' % bob.network)
  bob.run('infinit-volume --create %s --network %s -p' % (bob.volume,
                                                          bob.network))
  bob.run('infinit-drive --create %s --network %s --volume %s -p' % (bob.drive,
                                                                     bob.network,
                                                                     bob.volume))
  l = bob.run('infinit-drive --list')
  assert l[0] == 'bob/bob-drive: ok'

  os.remove('%s/.local/share/infinit/filesystem/drives/%s' % (bob.infinit.dir,
                                                              bob.drive))
  l = bob.run('infinit-drive --list')
  assert len(l) == 0

  bob.run('infinit-drive --fetch')
  l = bob.run('infinit-drive --list')
  assert l[0] == 'bob/bob-drive: ok'

with Beyond() as beyond, Infinit(beyond = beyond) as bob:

  bob.run(['infinit-user', '--signup',
           '--name', 'user',
           '--email', 'bob@infinit.io'])
  bob.run(['infinit-network', '--create',
           '--name', 'network',
           '--as', 'user',
           '--push'])
  bob.run(['infinit-volume', '--create',
           '--name', 'volume',
           '--network', 'network',
           '--as', 'user',
           '--push'])
  bob.run(['infinit-drive', '--create',
           '--name', 'drive',
           '--volume', 'volume',
           '--network', 'network',
           '--as', 'user',
           '--push'])
  emails = ['alice@infinit.io', 'serge@infinit.io', 'eve@infinit.io']
  # Doesn't work because you don't have 'hub's passport' locally.
  try:
    bob.run(['infinit-drive', '--invite',
             '--name', 'drive',
             '--as', 'user',
             '--email', emails[0],
             '--push'])
    unreachable()
  except Exception as e:
    assertIn(
      'you must create a passport for "%s"' % beyond.hub_delegate_user['name'],
      e.args[0]
    )
  bob.run(['infinit-user', '--fetch',
           '--as', 'user',
           '--name', beyond.hub_delegate_user['name']])
  bob.run(['infinit-passport', '--create',
           '--as', 'user',
           '--network', 'network',
           '--user', beyond.hub_delegate_user['name']])
  # Still doesn't work because the passport is not '--allow-create-passport'
  try:
    bob.run(['infinit-drive', '--invite',
             '--name', 'drive',
             '--as', 'user',
             '--email', emails[0],
             '--push'])
    unreachable()
  except Exception as e:
    assertIn('Missing --allow-create-passport flag for %s' %
             beyond.hub_delegate_user['name'], e.args[0])
  bob.run(['infinit-passport', '--delete',
           '--as', 'user',
           '--network', 'network',
           '--user', beyond.hub_delegate_user['name']])
  bob.run(['infinit-passport', '--create',
           '--as', 'user',
           '--network', 'network',
           '--allow-create-passport',
           '--user', beyond.hub_delegate_user['name']])
  def register(email):
    name = email.split('@')[0]
    with Infinit(beyond = beyond) as invitee:
      invitee.run(['infinit-user', '--signup',
                   '--name', name,
                   '--email', email])
      welcome = beyond.emailer.get_specifics(
        email, 'User/Welcome').pop()
      import urllib.parse
      code = urllib.parse.parse_qs(
        urllib.parse.urlparse(
          '?' + welcome['url_parameters']
        ).query)['confirmation_code'][0]
      # Confirm email.
      import requests
      print(code)
      kwargs = {
        'headers': {'Content-Type': 'application/json'},
        'data': json.dumps({
          'confirmation_code': code,
        })
      }
      invitee.run(['infinit-passport', '--fetch', '--as', name])
      assertEq(
        len(invitee.run(['infinit-passport', '--list', '--as', name])),
        0)
      res = requests.request(
        url = '%s/users/%s/confirm_email' % (beyond.domain, name),
        method = 'POST',
        **kwargs)
      res.raise_for_status()
      invitee.run(['infinit-passport', '--fetch', '--as', name])
      assertEq(
        len(invitee.run(['infinit-passport', '--list', '--as', name])),
        1)

  # One invitation
  email = emails.pop()
  bob.run(['infinit-drive', '--invite',
           '--name', 'drive',
           '--as', 'user',
           '--email', email,
           '--push'])
  register(email)
  # Send all invitations at once.
  bob.run(['infinit-drive', '--invite',
           '--name', 'drive',
           '--as', 'user',
           '--push'] +
          list(itertools.chain(*itertools.product(['--email'], emails))))
  for email in emails:
    register(email)

# Pull and delete.
with Beyond() as beyond, Infinit(beyond = beyond) as b:
  b.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  # Local and Beyond.
  b.run(['infinit-network', '--create', '--as', 'bob', '--push', 'n'])
  b.run(['infinit-volume', '--create', '--as', 'bob',
         '--network', 'n', '--push', 'v'])
  b.run(['infinit-drive', '--create', '--as', 'bob',
         '--network', 'n', '--volume', 'v', '--push', 'd'])
  assertEq(len(b.run(['infinit-drive', '--list', '--as', 'bob'])), 1)
  b.run(['infinit-drive', '--delete', '--as', 'bob', 'd', '--pull'])
  assertEq(len(b.run(['infinit-drive', '--list', '--as', 'bob'])), 0)
  b.run(['infinit-drive', '--fetch', '--as', 'bob', 'd'], return_code = 1)
  # Local only.
  b.run(['infinit-network', '--create', '--as', 'bob', 'n2'])
  b.run(['infinit-volume', '--create', '--as', 'bob',
         '--network', 'n', 'v2'])
  b.run(['infinit-drive', '--create', '--as', 'bob',
         '--network', 'n2', '--volume', 'v2', 'd2'])
  assertEq(len(b.run(['infinit-drive', '--list', '--as', 'bob'])), 1)
  b.run(['infinit-drive', '--delete', '--as', 'bob', 'd2', '--pull'])
  assertEq(len(b.run(['infinit-drive', '--list', '--as', 'bob'])), 0)

