#!/usr/bin/env python3

# WARNING: Nukes all data on LDAP server in dc=infinit,dc=nodomain

# -------------------------
# Running this test by hand
# -------------------------
# 1) Start an LDAP server
# docker run -d -p 38900:389 -e SLAPD_PASSWORD=pass -e SLAPD_DOMAIN=infinit.nodomain dinkel/openldap
# 3) Run test from the build directory
# LDAP_URL=ldap://localhost:38900 LDAP_CREDS="cn=admin,dc=infinit,dc=nodomain:pass" PYTHONPATH=beyond/lib/python3.4:../../tests/functional  SOURCE_DIR=../..  BUILD_DIR=.  OS=unix  INFINIT_BINARIES=bin  ./../../tests/functional/ldap

from utils import *
import json
import random
import string
import os
import itertools
import random

def check_success(response, ifnt):
  i = 0
  for r in response:
    if r['success'] != True:
      print('FAILURE AT %s: %s' % (i, str(r)))
      print(ifnt.last_err)
      raise Exception('FAILURE AT %s: %s' % (i,str(r)))

ldap_url = os.environ.get('LDAP_URL', None)
ldap_creds = os.environ.get('LDAP_CREDS', None)
if not ldap_url or not ldap_creds:
  print('WARNING: will nuke all data in dc=infinit,dc=nodomain on LDAP server')
  print('Missing environ LDAP_URL and/or LDAP_CREDS')
  exit(1)
ldap_creds = ldap_creds.split(':')

#populate ldap with our test data
# FIXME: Currently we don't run this test on the buildfarm as it requires an
# LDAP server. When it does, we will need to randomize the dc.
# dc = 'test-%s' % int(random.random()*100000)
dc = 'infinit'
ldap_data = [
  '''dn: dc=%s,dc=nodomain
objectClass: dcObject
objectClass: organization
dc: %s
o: %s''' % (dc, dc, dc),

  '''dn: cn=bob,dc=%s,dc=nodomain
objectClass: posixAccount
objectClass: inetOrgPerson
cn: Bob Bob
sn: Bob
mail: bob@example.com
uid: bbob
uidNumber: 1001
gidNumber: 1001
userPassword: foobar
homeDirectory: /
''' % (dc),

  '''dn: cn=alice,dc=%s,dc=nodomain
objectClass: posixAccount
objectClass: inetOrgPerson
cn: Alice Alice
sn: Alice
mail: alice@example.com
uid: aalice
uidNumber: 1002
gidNumber: 1002
userPassword: foobar
homeDirectory: /
''' % (dc),

  '''dn: cn=grp,dc=%s,dc=nodomain
cn: grp
objectClass: posixGroup
gidNumber: 500
memberUid: aalice
memberUid: bbob''' % (dc),
]

ldap_add_cmd = ['/usr/bin/ldapadd', \
       '-D', ldap_creds[0], '-w', ldap_creds[1], '-H', ldap_url]

class LdapCleaner:
  def __nuke_data(self):
    def fetch_ldap_data(return_code = 0):
      data, err = self.__ifnt.run([
        '/usr/bin/ldapsearch',
        '-D', ldap_creds[0],
        '-w', ldap_creds[1],
        '-H', ldap_url,
        '-b', 'dc=%s,dc=nodomain' % dc,
        '-LLL', 'dn'
      ], return_code = return_code)
      return (data, err)
    try:
      data, err = fetch_ldap_data(return_code = 0)
      print(data)
      for l in reversed(data.split('\n')):
        if l == '':
          continue
        edn = l[4:]
        self.__ifnt.run([
          '/usr/bin/ldapdelete',
          '-D', ldap_creds[0],
          '-w', ldap_creds[1],
          '-H', ldap_url,
          edn
        ])
    except:
      # If we get an error, it might be because the server is already clean.
      fetch_ldap_data(return_code = 32)

  def __init__(self, ifnt):
    self.__ifnt = ifnt
    pass
  def __enter__(self):
    self.__nuke_data()
  def __exit__(self, *args, **kwargs):
    self.__nuke_data()

with Beyond(bottle_args = {'ldap_server': ldap_url}) as beyond,\
     Infinit(beyond = beyond) as bob,\
     Infinit(beyond = beyond) as bob2,\
     Infinit(beyond = beyond) as alice,\
     Infinit(beyond = beyond) as admin,\
     LdapCleaner(bob) as lc:
  for e in ldap_data:
    p = bob.spawn(ldap_add_cmd, input = e, noscript = True)
    p.communicate()
    p.wait()
  # Create user with ldap backend
  bob.run(['infinit-user', '--create', '--push', '--full',\
    '--email', 'bob@company.com', '--fullname', 'Bob Bob', \
    '--ldap-name', 'cn=bob,dc=%s,dc=nodomain' % (dc), '--name', 'bob'])
  # Login using LDAP credentials
  bob2.run(['infinit-user', '--login', '--name', 'bob', '--password', 'foobar'])
  ul = bob2.run_json(['infinit-user', '--list', '-s'])
  assertEq(len(ul), 1)

  # Test batcher beyond populator
  p = bob.spawn(['infinit-ldap', '--populate-hub', '--server', ldap_url, \
      '--domain', '', '--searchbase', 'dc=%s,dc=nodomain'  % (dc), \
      '--user', ldap_creds[0], '--password', ldap_creds[1], \
      '--username-pattern', '$(uid)'],
      noscript = True, input='y\n')
  p.communicate()
  p.wait()
  alice.run(['infinit-user', '--login', '--name', 'aalice',
             '--password', 'foobar'])
  ul = alice.run_json(['infinit-user', '--list', '-s'])
  assertEq(len(ul), 1)

  # Test batcher drive populator
  admin.run(['infinit-user', '--signup',
           '--name', 'adm',
           '--email', 'bob@infinit.io'])
  admin.run(['infinit-storage', '--create',
             '--filesystem',
             '--name', 'storage',
             '--as', 'adm'])
  admin.run(['infinit-network', '--create',
           '--name', 'network',
           '--as', 'adm',
           '--storage', 'storage',
           '--kelips',
           '--push'])
  admin.run(['infinit-volume', '--create',
           '--name', 'volume',
           '--network', 'network',
           '--as', 'adm',
           '--push'])
  admin.run(['infinit-drive', '--create',
           '--name', 'drive',
           '--volume', 'volume',
           '--network', 'network',
           '--as', 'adm',
           '--push'])
  #hit the volume
  response = admin.run_json(
    [
      'infinit-volume', '--run',
      'volume',
      '--as', 'adm',
      '--allow-root-creation',
    ],
    input = {'operation': 'mkdir', 'path': '/beacon'})
  if not response['success']:
    raise AssertionError('operation failed: %s' % response)
  p = None
  portfile = '%s/portfile' % admin.dir
  try:
    #Run the volume
    mountpoint = '%s/%s' % (admin.dir, 'mountpoint')
    os.mkdir(mountpoint)
    p = admin.spawn(['infinit-volume', '--run', '--name', 'volume',
                     '--mountpoint', mountpoint, '--as', 'adm',
                     '--port-file', portfile])
    while not os.path.exists(portfile):
      time.sleep(0.1)
    while len(os.listdir(mountpoint)) == 0:
      time.sleep(1)
    #Run batch drive populator
    admin.run(['infinit-ldap', '--drive-invite',
      '--server', ldap_url,
      '--domain', '', '--searchbase', 'dc=%s,dc=nodomain'  % (dc),
      '--user', ldap_creds[0], '--password', ldap_creds[1],
      '--as', 'adm',
      '--mountpoint', mountpoint, '--drive', 'adm/drive',
      '--create-home', '--root-permissions', 'r'])
    print(admin.last_err)
  finally:
    if p:
      p.terminate()
    if os.path.exists(portfile):
      os.remove(portfile)
  # Test population was successful: pushed users and group
  response = admin.run_script(user = 'adm', seq =
    [
      {'operation': 'mkdir', 'path': '/foo'},
      {'operation': 'setxattr', 'path': '/',
       'name': 'infinit.auth.setrw', 'value': 'bob'},
      {'operation': 'setxattr', 'path': '/',
       'name': 'infinit.auth.setrw', 'value': '@grp'},
    ])
  assertEq(3, len(response))
  check_success(response, admin)

  # Test population: passports and stuff
  alice.run(['infinit-user', '--fetch', 'adm'])
  alice.run(['infinit-network', '--fetch', '--as', 'aalice', 'adm/network'])
  alice.run(['infinit-volume', '--fetch', '--as', 'aalice', 'adm/volume'])
  alice.run(['infinit-passport', '--fetch', '--as', 'aalice',
             '--network', 'adm/network'])
  alice.run(['infinit-network', '--link', '--as', 'aalice', 'adm/network'])
  p = None
  try:
    p = admin.spawn(['infinit-volume', '--run', '--as', 'adm', 'volume',
                     '--port-file', portfile])
    while not os.path.exists(portfile):
      time.sleep(0.1)
    with open(portfile, 'r') as f:
      peer = '127.0.0.1:%s' % int(f.readline())
    response = alice.run_script(user = 'aalice', volume = 'adm/volume',
                                peer = peer, operation = 'list_directory',
                                path = '/')
    check_success([response], alice)
    assertEq(response['entries'], ['home', 'beacon', 'foo'])
    # Check root directory permissions
    response = alice.run_script(user = 'aalice', volume = 'adm/volume',
                                peer = peer, operation = 'mkdir',
                                path = '/alice_yo')
    assertEq(response['success'], False)
    assertEq(response['code'], 13)
    # Check home directories
    response = alice.run_script(user = 'aalice', volume = 'adm/volume',
                                peer = peer, operation = 'list_directory',
                                path = '/home')
    check_success([response], alice)
    assertEq(response['entries'], ['bob', 'aalice'])
    response = alice.run_script(user = 'aalice', volume = 'adm/volume',
                                peer = peer, operation = 'mkdir',
                                path = '/home/aalice/something')
    check_success([response], alice)
    response = alice.run_script(user = 'aalice', volume = 'adm/volume',
                                peer = peer, operation = 'list_directory',
                                path = '/home/aalice')
    check_success([response], alice)
    assertEq(response['entries'], ['something'])
    response = alice.run_script(user = 'aalice', volume = 'adm/volume',
                                peer = peer, operation = 'list_directory',
                                path = '/home/bob')
    assertEq(response['success'], False)
    assertEq(response['code'], 13)
  finally:
    if p:
      p.terminate()
    if os.path.exists(portfile):
      os.remove(portfile)
  # drive check
  bob2.run(['infinit-drive', '--fetch', '--as', 'bob', '--name', 'adm/drive'])
  bob2.run(['infinit-drive', '--join', '--as', 'bob', '--name', 'adm/drive'])
