#!/usr/bin/env python3

from utils import *
import json
import random
import string
import os
import itertools
import random

def check_success(response, ifnt):
  i = 0
  for r in response:
    if r['success'] != True:
      print('FAILURE AT %s: %s' % (i, str(r)))
      print(ifnt.last_err)
      raise Exception('FAILURE AT %s: %s' % (i,str(r)))

ldap_url = os.environ.get('LDAP_URL', None)
ldap_creds = os.environ.get('LDAP_CREDS', None)
if not ldap_url or not ldap_creds:
  print('Missing environ LDAP_URL and/or LDAP_CREDS')
  exit(1)
ldap_creds = ldap_creds.split(':')

#populate ldap with our test data
dc = 'test-%s' % int(random.random()*100000)
ldap_data = [
  """dn: dc=%s,dc=nodomain
objectClass: dcObject
objectClass: organization
dc: %s
o: %s""" % (dc, dc, dc),

  """dn: cn=bob,dc=%s,dc=nodomain
objectClass: posixAccount
objectClass: inetOrgPerson
cn: Bob Bob
sn: Bob
mail: bob@example.com
uid: bbob
uidNumber: 1001
gidNumber: 1001
userPassword: foobar
homeDirectory: /
""" % (dc),
  """dn: cn=alice,dc=%s,dc=nodomain
objectClass: posixAccount
objectClass: inetOrgPerson
cn: Alice Alice
sn: Alice
mail: alice@example.com
uid: aalice
uidNumber: 1002
gidNumber: 1002
userPassword: foobar
homeDirectory: /
""" % (dc),

"""dn: cn=grp,dc=%s,dc=nodomain
cn: grp
objectClass: posixGroup
gidNumber: 500
memberUid: aalice
memberUid: bbob""" % (dc)

]

ldap_add_cmd = ['/usr/bin/ldapadd', \
       '-D', ldap_creds[0], '-w', ldap_creds[1], '-H', ldap_url]

class LdapCleaner:
  def __init__(self,ifnt):
    self.__ifnt = ifnt
    pass
  def __enter__(self):
    pass
  def __exit__(self, *args, **kwargs):
    data, err = self.__ifnt.run(['/usr/bin/ldapsearch', \
        '-D', ldap_creds[0], '-w', ldap_creds[1], '-H', ldap_url, \
        '-b', 'dc=%s,dc=nodomain' % dc, '-LLL', 'dn'])
    print(data)
    for l in reversed(data.split('\n')):
      if l == '':
        continue
      edn = l[4:]
      self.__ifnt.run(['/usr/bin/ldapdelete', \
        '-D', ldap_creds[0], '-w', ldap_creds[1], '-H', ldap_url, \
        edn])

with Beyond(bottle_args = {'ldap_server': ldap_url}) as beyond,\
     Infinit(beyond = beyond) as bob,\
     Infinit(beyond = beyond) as bob2,\
     Infinit(beyond = beyond) as alice,\
     Infinit(beyond = beyond) as admin,\
     LdapCleaner(bob) as lc:
  for e in ldap_data:
    bob.run(ldap_add_cmd, input=e, noscript = True)
  # Create user with ldap backend
  bob.run(['infinit-user', '--create', '--push', '--full',\
    '--email', 'bob@company.com', '--fullname', 'Bob Bob', \
    '--ldap-name', 'cn=bob,dc=%s,dc=nodomain' % (dc), '--name', 'bob'])
  # Login using LDAP credentials
  bob2.run(['infinit-user', '--login', '--name', 'bob', '--password', 'foobar'])
  ul = bob2.run_json(['infinit-user', '--list', '-s'])
  assertEq(len(ul), 1)

  # Test batcher beyond populator
  bob.run(['infinit-ldap', '--populate-beyond', '--server', ldap_url, \
      '--domain', '', '--searchbase', 'dc=%s,dc=nodomain'  % (dc), \
      '--user', ldap_creds[0], '--password', ldap_creds[1], \
      '--username-pattern', '$(uid)'],
      noscript = True, input='y\n')
  alice.run(['infinit-user', '--login', '--name', 'aalice', '--password', 'foobar'])
  ul = alice.run_json(['infinit-user', '--list', '-s'])
  assertEq(len(ul), 1)

  # Test batcher drive populator
  admin.run(['infinit-user', '--signup',
           '--name', 'adm',
           '--email', 'bob@infinit.io'])
  admin.run(['infinit-storage', '--create',
             '--filesystem',
             '--name', 'storage',
             '--as', 'adm'])
  admin.run(['infinit-network', '--create',
           '--name', 'network',
           '--as', 'adm',
           '--storage', 'storage',
           '--kelips',
           '--push'])
  admin.run(['infinit-volume', '--create',
           '--name', 'volume',
           '--network', 'network',
           '--as', 'adm',
           '--push'])
  admin.run(['infinit-drive', '--create',
           '--name', 'drive',
           '--volume', 'volume',
           '--network', 'network',
           '--as', 'adm',
           '--push'])
  #hit the volume
  response = admin.run_json(
    [
      'infinit-volume', '--run',
      'volume',
      '--as', 'adm',
    ],
    input = {'operation': 'mkdir', 'path': '/beacon'})
  if not response['success']:
    raise AssertionError('operation failed: %s' % response)
  #Run the volume
  mountpoint = '%s/%s' % (admin.dir, 'mountpoint')
  os.mkdir(mountpoint)
  with admin.spawn('infinit-volume --run --name volume --mountpoint %s --as adm'
    % mountpoint) as p:
    try:
      #Run batch drive populator
      admin.run(['infinit-ldap', '--populate-network', \
        '--server', ldap_url, \
        '--domain', '', '--searchbase', 'dc=%s,dc=nodomain'  % (dc), \
        '--user', ldap_creds[0], '--password', ldap_creds[1], \
        '--as', 'adm',
        '--mountpoint', mountpoint, '-n', 'network', '--drive', 'adm/drive'])
      print(admin.last_err)
    finally:
      p.send_signal(2)
  # Test population was successful: pushed users and group
  response = admin.run_script(user = 'adm', seq = 
    [
      {'operation': 'mkdir', 'path': '/foo'},
      {'operation': 'setxattr', 'path': '/',
       'name': 'infinit.auth.setrw', 'value': 'bob'},
      {'operation': 'setxattr', 'path': '/',
       'name': 'infinit.auth.setrw', 'value': '@grp'},
    ])
  assertEq(3, len(response))
  check_success(response, admin)

  # Test population: passports and stuff
  alice.run(['infinit-user', '--fetch', 'adm'])
  alice.run(['infinit-network', '--fetch', '--as', 'aalice', 'adm/network'])
  alice.run(['infinit-volume', '--fetch', '--as', 'aalice', 'adm/volume'])
  alice.run(['infinit-passport', '--fetch', '--as', 'aalice', '--network', 'adm/network'])
  alice.run(['infinit-network', '--link', '--as', 'aalice', 'adm/network'])
  portfile = '%s/portfile' % admin.dir
  volume_process = admin.spawn([
    'infinit-volume', '--run', '--as', 'adm', 'volume',
    '--port-file', portfile])
  time.sleep(2)
  with open(portfile, 'r') as f:
    peer = '127.0.0.1:%s' % int(f.readline())
  response = alice.run_script(user = 'aalice', volume = 'adm/volume', peer = peer,
                              operation = 'list_directory', path = '/')
  volume_process.terminate()
  check_success([response], alice)
  assertEq(response['entries'], ['beacon', 'foo'])
  # drive check
  bob2.run(['infinit-drive', '--fetch', '--as', 'bob', '--name', 'adm/drive'])
  bob2.run(['infinit-drive', '--join', '--as', 'bob', '--name', 'adm/drive'])