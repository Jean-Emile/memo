#!/usr/bin/env python3

from utils import *
import json

# Creating and deleting volumes.
with Infinit() as bob:
  bob.run(['infinit-user', '--create',  'bob'])
  bob.run(['infinit-network', '--create', '--name', 'network', '--as', 'bob'])
  bob.run(['infinit-volume', '--create', '--name', 'volume', '--network', 'network', '--as', 'bob'])
  # Simulate the volume being run and creating it's root block cache directory.
  import os
  state_dir = '%s/.local/state/infinit/filesystem' % bob
  os.makedirs('%s/bob/network/bob/volume' % state_dir)
  bob.run(['infinit-volume', '--export', '--name', 'bob/volume', '--as', 'bob'])
  bob.run(['infinit-volume', '--delete', '--name', 'volume', '--as', 'bob'])
  # Ensure volume root block cache directory is removed.
  assertEq(len(os.listdir('%s/bob/network/bob' % state_dir)), 0)

# Push to the hub.
with Beyond() as beyond, \
    Infinit(beyond = beyond) as bob, Infinit(beyond) as alice:
  bob.run(['infinit-user', '--signup',  '--name', 'bob', '--email', 'bob@infinit.io'])
  bob.run(['infinit-network', '--create', '--name', 'network', '--as', 'bob', '--push'])
  bob.run(['infinit-volume', '--create', '--name', 'volume', '--network', 'bob/network', '--description', 'something', '--as', 'bob', '--push'])
  try:
    bob.run(['infinit-volume', '--push', '--name', 'volume'])
    unreachable()
  except Exception as e:
    pass
  alice.run(['infinit-user', '--signup', '--name', 'alice', '--email', 'alice@infinit.sh'])
  alice.run(['infinit-volume', '--fetch', 'bob/volume', '--as', 'alice'])
  v = alice.run_json(['infinit-volume', '--export', 'bob/volume', '--as', 'alice'])
  assertEq(v['description'], 'something')

# Pull and delete.
with Beyond() as beyond, Infinit(beyond = beyond) as bob:
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'b@infinit.io'])
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n', '--push'])
  # Local and Beyond.
  bob.run(['infinit-volume', '--create', '--as', 'bob',
           'v', '--network', 'n', '--push'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 1)
  bob.run(['infinit-volume', '--delete', '--as', 'bob', 'v', '--pull'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 0)
  bob.run(['infinit-volume', '--fetch', '--as', 'bob', 'v'], return_code = 1)
  # Local only.
  bob.run(['infinit-volume', '--create', '--as', 'bob', 'v2', '--network', 'n'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 1)
  bob.run(['infinit-volume', '--delete', '--as', 'bob', 'v2', '--pull'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 0)

# Purge.
with Beyond() as beyond, Infinit(beyond = beyond) as bob:
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  bob.run(['infinit-storage', '--create', '--as', 'bob', 's', '--filesystem'])
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n', '-S', 's', '-p'])
  bob.run(['infinit-volume', '--create', '--as', 'bob', 'v', '-N', 'n', '-p'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 1)
  bob.run(['infinit-drive', '--create', '--as', 'bob', 'd',
           '-V', 'v', '-N', 'n', '-p'])
  assertEq(
    len(bob.run_json(['infinit-drive', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-volume', '--delete', '--name', 'v', '--as', 'bob',
           '--purge', '--pull'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 0)
  assertEq(
    len(bob.run_json(['infinit-drive', '--list', '--as', 'bob', '-s'])), 0)
  bob.run(['infinit-volume', '--fetch', '--as', 'bob', 'v'], return_code = 1)
  bob.run(['infinit-drive', '--fetch', '--as', 'bob', 'd'], return_code = 1)

def alice_bob_network_volume(alice, bob, network = "network", volume = "volume"):
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  alice.run(
    ['infinit-user', '--signup', 'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', 'alice', '--as', 'bob'])
  alice.run(['infinit-user', '--fetch', 'bob', '--as', 'alice'])
  bob.run(['infinit-storage', '--create', '--as', 'bob', 's', '--filesystem'])
  bob.run(['infinit-network', '--create', '--kelips', '--as', 'bob', network,
           '-S', 's', '-p'])
  bob.run(['infinit-volume', '--create', '--as', 'bob', volume, '-N', network, '-p'])
  return network, volume

# getxattr infinit.resolve.<username>.
with Beyond() as beyond, \
  Infinit(beyond = beyond) as bob, \
  Infinit(beyond = beyond) as alice:
  network, volume = alice_bob_network_volume(alice, bob)
  bob.run(['infinit-passport', '--create', '--as', 'bob', '--network', network,
           '--user', 'alice', '--allow-create-passport', '--push'])
  passport = bob.run_json(
    ['infinit-passport', '--export', '--network', network, '--user', 'alice',
     '--as', 'bob'])
  def resolve(user_name):
    res = bob.run(
      ['infinit-volume', '--run', '--allow-root-creation',
       '--as', 'bob', '--name', volume],
      input = {
        "operation":"getxattr",
        "name":"infinit.resolve.%s" % user_name,
        "path": "/"})
    return json.loads(res[0])
  # Of course, bob is present:
  res = resolve('bob')
  assertEq(res["success"], True)
  # Alice is not.
  res = resolve('alice')
  assertEq(res["success"], False)
  assertEq(res["code"], 22)
  # Register alice (# Equivalent of infinit-acl --register but doesn't
  # require a mountpoint.)
  res = bob.run(
    ['infinit-volume', '--run', '--as', 'bob', '--name', volume],
    input = {"operation":"setxattr",
             "name": "user.infinit.register.alice",
             "path": "/",
             "value": json.dumps(passport)
           })
  res = json.loads(res[0])
  assertEq(res["success"], True)
  res = resolve('alice')
  assertEq(res["success"], True)

# Update volume descriptor with mount options.
with Infinit() as alice:
  alice.run(['infinit-user', '--create', 'alice'])
  alice.run(['infinit-storage', '--create', 's', '--filesystem'])
  alice.run(['infinit-network', '--create', '--as', 'alice', 'n',
             '--storage', 's'])
  alice.run(['infinit-volume', '--create', '--as', 'alice', 'v',
             '--network', 'n'])
  def vol():
    return alice.run_json(['infinit-volume', '--export', '--as', 'alice', 'v'])
  assertEq(vol()['mount_options'], {})
  # Ensure update with no options does not set anything.
  alice.run(['infinit-volume', '--update', '--as', 'alice', 'v'])
  assertEq(vol()['mount_options'], {})
  alice.run(['infinit-volume', '--update', '--as', 'alice', 'v',
             '--push-endpoints', '--fetch-endpoints', '--cache'])
  mount_opts = vol()['mount_options']
  assertEq(mount_opts['fetch'], True)
  assertEq(mount_opts['push'], True)
  assertEq(mount_opts['cache'], True)
  # Check unsetting of option
  alice.run(['infinit-volume', '--update', '--as', 'alice', 'v', '--cache=no'])
  mount_opts = vol()['mount_options']
  assertEq(mount_opts['cache'], False)

# Service discovery
with Infinit() as alice:
  alice.run(['infinit-user', '--create',  'alice'])
  alice.run(['infinit-storage', '--create', 's'])
  alice.run([
    'infinit-network', '--create', '--name', 'network',
    '--storage', 's', '--as', 'alice'])
  assertEq(
    alice.run_json([
      'infinit-network', '--list-services', '--name', 'network',
      '--script', '--as', 'alice']),
    None)
  alice.run([
    'infinit-volume', '--create', '--name', 'alice-volume',
    '--network', 'network', '--as', 'alice', '--register-service'])
  assertEq(
    alice.run_json([
      'infinit-network', '--list-services', '--name', 'network',
      '--script', '--as', 'alice']),
    {'volumes': ['alice/alice-volume']})
