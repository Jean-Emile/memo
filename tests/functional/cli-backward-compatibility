#!/usr/bin/env python3

from distutils.version import LooseVersion as Version
from utils import *
import json

path = os.path.dirname(os.path.realpath(__file__))

class Output(str):

  @property
  def json(self):
    import json
    return json.loads(self)

  @property
  def list(self):
    return self.split('\r\n' if os.environ.get('EXE_EXT', '') else '\n')

for version in ['0.3.2', '0.3.5', '0.3.7', '0.4.0', '0.5.0', '0.5.2', '0.5.4']:
  version = Version(version)

  def run(*args):
    import os
    from copy import copy
    env = copy(os.environ)
    env['INFINIT_DATA_HOME'] = '%s/backward-compatibility-homes/%s' % (path, version)
    import subprocess
    args = list(copy(args)) + ['--as', 'user']
    args[0] += os.environ.get('EXE_EXT', '')
    return Output(subprocess.check_output(args, env = env).strip().decode('utf-8'))

  ## ------##
  ##  User ##
  ## ----- ##
  users = run('infinit-user', '--list').list
  assertEq(set(users), {'user: public/private keys', 'owner: public key only'})
  # User 'user'.
  user = run('infinit-user', '--export', '--name', 'user', '--full').json
  assertEq(user['name'], 'user')
  assertIn('public_key', user)
  assertIn('rsa', user['public_key'])
  assertIn('private_key', user)
  assertIn('rsa', user['private_key'])
  # User 'owner'.
  owner = run('infinit-user', '--export', '--name', 'owner').json
  assertEq(owner['name'], 'owner')
  assertIn('public_key', owner)
  assertIn('rsa', owner['public_key'])

  ## -------- ##
  ## Networks ##
  ## -------- ##
  networks = run('infinit-network', '--list').list
  assertEq(set(networks), {'owner/network0: linked', 'owner/network1'})
  # Network 'network1'.
  try:
    network1 = run('infinit-network', '--export', '--name', 'owner/network1')
    assert False
  except Exception:
    pass
  # Network 'network0'.
  network0 = run('infinit-network', '--export', '--name', 'owner/network0').json
  assertEq(network0['name'], 'owner/network0')
  assertEq(network0['owner']['rsa'], owner['public_key']['rsa'])
  if version < Version('0.4.0'):
    assertEq(network0['version'], '0.3.0')
  else:
    assertEq(network0['version'], str(version))

  ## --------- ##
  ## Passports ##
  ## --------- ##
  passports = run('infinit-passport', '--list').list
  assertEq(set(passports), {'owner/network0: user', 'owner/network1: user'})
  for passport in map(
      lambda network: run('infinit-passport', '--export',
                          '--user', 'user', '--network', network).json,
      [passport.split(':')[0] for passport in passports]):
    assertEq(passport['allow_sign'], False)
    assertEq(passport['allow_storage'], True)
    assertEq(passport['allow_write'], True)
    assertEq(passport['network'][:-1], 'owner/network')
    assertEq(passport['user']['rsa'], user['public_key']['rsa'])

  ### Fakely link passport.
  run('infinit-network',
      '--link',
      '--name', 'owner/network1',
      '--output', '-')

  ## ------- ##
  ## Volumes ##
  ## ------- ##
  volumes = run('infinit-volume', '--list').list
  assertEq(set(volumes),
           {
             'owner/volume1: network owner/network1',
             'owner/volume0: network owner/network1'
           })
  for volume in map(
      lambda name: run('infinit-volume', '--export', '--name', name).json,
      [volume_descrption.split(':')[0] for volume_descrption in volumes]):
    assertEq(volume['name'][:-1], 'owner/volume')
    assertEq(volume['network'][:-1], 'owner/network')

  ## ------ ##
  ## Drives ##
  ## ------ ##
  drives = run('infinit-drive', '--list').list
  assertEq(set(drives), {'owner/drive0: ok', 'owner/drive1: pending'})
  for drive in map(
      lambda name: run('infinit-drive', '--export', '--name', name).json,
      [drive_descrption.split(':')[0] for drive_descrption in drives]):
    assertEq(set(drive["users"].keys()), {'user', 'owner'})
    assertEq(drive['name'][:-1], 'owner/drive')
    assertEq(drive['volume'][:-1], 'owner/volume')
    assertEq(drive['network'][:-1], 'owner/network')
