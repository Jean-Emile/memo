#!/usr/bin/env python3

import sys
from utils import *

with TemporaryDirectory() as tmp, Infinit() as infinit_1, Infinit() as infinit_2:
  # Device 1
  infinit_1.run(['infinit-user', '--create',  'user'])
  user = infinit_1.run_json(
    ['infinit-user', '--export', 'user', '--full'])
  infinit_1.run([
    'infinit-storage', '--create',
     'storage',
    '--filesystem', '--path', tmp.dir,
  ])
  network_name = infinit_1.run([
    'infinit-network', '--create',
    'network', '--storage', 'storage',
    '--no-consensus',
    '--as', 'user',
  ])
  network = infinit_1.run_json([
    'infinit-network', '--export',
     'network',
    '--as', 'user',
  ])
  infinit_1.run([
    'infinit-volume', '--create',
     'volume', '--network', 'network',
    '--as', 'user',
  ])
  volume = infinit_1.run_json([
    'infinit-volume', '--export',
     'volume',
    '--as', 'user',
  ])
  response = infinit_1.run_json(
    [
      'infinit-volume', '--run',
      'volume',
      '--as', 'user',
      '--allow-root-creation',
    ],
    input = {'operation': 'mkdir', 'path': '/beacon'})
  if not response['success']:
    raise AssertionError('operation failed: %s' % response)
  # Device 2
  infinit_2.run(
    ['infinit-user', '--import'], input = user)
  infinit_2.run([
    'infinit-storage', '--create',
     'storage',
    '--filesystem', '--path', tmp.dir,
  ])
  infinit_2.run(['infinit-network', '--import'], input = network)
  infinit_2.run([
    'infinit-network', '--link',
     'network',
    '--storage', 'storage',
    '--as', 'user',
  ])
  infinit_2.run(['infinit-volume', '--import'], input = volume)
  response = infinit_2.run_json(
    [
      'infinit-volume', '--run',
      'volume',
      '--as', 'user',
    ],
    input = {'operation': 'list_directory', 'path': '/'})
  if not response['success']:
    raise AssertionError('operation failed: %s' % response)
  assertEq(sorted(response['entries']), ['.', '..', 'beacon'])
  # XATTRS
  response = infinit_1.run_script(user = 'user', operation = 'setxattr',
                                  path = '/beacon',
                                  name = 'foo', value = 'bar')
  assertEq(response['success'], True)
  response = infinit_1.run_script(user = 'user', operation = 'getxattr',
                                  path = '/beacon',
                                  name = 'foo')
  assertEq(response['success'], True)
  assertEq(response['value'], 'bar')
  response = infinit_1.run_script(user = 'user', operation = 'listxattr',
                                  path = '/beacon')
  assertEq(response['entries'], ['foo'])
  response = infinit_1.run_script(user = 'user', operation = 'removexattr',
                                  path = '/beacon',
                                  name = 'foo')
  assertEq(response['success'], True)
  response = infinit_1.run_script(user = 'user', operation = 'getxattr',
                                  path = '/beacon',
                                  name = 'foo')
  assertEq(response['success'], False)
  # READ/WRITE FILES
  response = infinit_1.run_script(user = 'user', operation = 'write_file',
                                  path = '/beacon/readme.txt',
                                  content = 'foo')
  assertEq(response['success'], True)
  response = infinit_1.run_script(user = 'user', operation = 'read_file',
                                  path = '/beacon/readme.txt')
  assertEq(response['success'], True)
  assertEq(response['content'], 'foo')
  response = infinit_1.run_script(user = 'user', operation = 'unlink',
                                  path = '/beacon/readme.txt')
  assertEq(response['success'], True)
  response = infinit_1.run_script(user = 'user', operation = 'rmdir',
                                  path = '/beacon')
  assertEq(response['success'], True)
  # READ/WRITE files with handle API
  response = infinit_1.run_script(user = 'user', seq =
    [
      { 'operation': 'create', 'path': '/file', 'handle': 'h1',
        'flags': 0x0202, 'mode': 33206
      },
      {
        'operation': 'write', 'handle': 'h1', 'content': 'Zm9v',
        'size': 3, 'offset': 0
      },
      {
        'operation': 'close', 'handle': 'h1'
      },
      {
        'operation': 'dispose', 'handle': 'h1'
      },
    ]);
  assertEq(4, len(response))
  assertEq(response[3]['success'], True)
  response = infinit_1.run_script(user = 'user', seq =
    [
      { 'operation': 'open', 'path': '/file', 'handle': 'h1',
        'flags': 0x2, 'mode': 0
      },
      {
        'operation': 'read', 'handle': 'h1',
        'size': 3, 'offset': 0
      },
      {
        'operation': 'close', 'handle': 'h1'
      },
      {
        'operation': 'dispose', 'handle': 'h1'
      },
    ])
  assertEq(4, len(response))
  assertEq('Zm9v', response[1]['content'])
