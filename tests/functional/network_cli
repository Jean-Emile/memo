#!/usr/bin/env python3

from utils import *
import json

# Creating and deleting networks locally.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--create',  'bob'])
  alice.run(['infinit-user', '--create',  'alice'])

  try:
    bob.run(['infinit-network', '--delete', 'broken', '--as', 'bob', '--unlink'])
    unreachable()
  except Exception as e:
    pass
  bob.run(['infinit-network', '--create', 'broken', '--as', 'bob'])
  # Check descriptor is created.
  assertEq(len(os.listdir(bob.networks_path)), 1)
  # Check network is linked.
  assertEq(len(os.listdir(bob.linked_networks_path)), 1)
  bob.run(['infinit-network', '--run', '--name', 'broken', '--as', 'bob',
           '--async', '--cache', '-s'])
  # Ensure network cache directory is created
  assertEq(len(os.listdir('%s/cache/bob/bob/broken' % bob.state_path)), 2)
  bob.run(['infinit-network', '--delete', '--name', 'broken', '--as', 'bob',
           '--unlink'])
  # Ensure network cache directory is removed
  assertEq(len(os.listdir('%s/cache/bob' % bob.state_path)), 0)

  bob.run(['infinit-network', '--create', 'broken', '--as', 'bob'])
  bob.run(['infinit-network', '--run', '--name', 'broken', '--as', 'bob',
           '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/bob/bob/broken' % bob.state_path)), 2)
  # Specified.
  bob.run(
    ['infinit-network', '--delete', 'bob/broken', '--as', 'bob', '--unlink'])
  assertEq(len(os.listdir('%s/cache/bob' % bob.state_path)), 0)
  bob.run(
    ['infinit-network', '--create', '--name', 'osef', '--as', 'bob'])
  net = bob.run_json(
    ['infinit-network', '--export', '--name', 'osef', '--as', 'bob'])
  alice.run(['infinit-network', '--import'], input = net)
  try:
    alice.run(['infinit-network', '--delete',
               '--name', 'osef', '--as', 'alice'])
    unreachable()
  except Exception as e:
    pass
  alice.run(['infinit-network', '--delete',
             '--name', 'bob/osef', '--as', 'alice', '--unlink'])

# Unlinking
with Infinit() as tmp:
  bob = User(name = 'bob', infinit = tmp)
  bob.run(['infinit-user', '--create'])
  bob.run(['infinit-storage', '--create', 's', '--filesystem'])
  bob.run(['infinit-network', '--create', 'n', '--storage', 's'])
  # Check descriptor is created.
  assertEq(len(os.listdir(bob.infinit.networks_path)), 1)
  # Check network is linked.
  assertEq(len(os.listdir(bob.infinit.linked_networks_path)), 1)
  # Store descriptor.
  descriptor = None
  with open('%s/bob/n' % bob.infinit.networks_path) as f:
    descriptor = f.read()
  # Store linked network.
  linked_net = None
  with open('%s/bob/bob/n' % bob.infinit.linked_networks_path, 'r') as f:
    linked_net = f.read()
  bob.run(['infinit-network', '--run', 'n', '-s', '--async', '--cache'])
  # Ensure cache directories created.
  assertEq(len(os.listdir('%s/cache/bob/bob/n' % bob.infinit.state_path)), 2)
  bob.run(['infinit-network', '--unlink', 'n'])
  # Ensure cache directories removed.
  assertEq(len(os.listdir('%s/cache/bob' % bob.infinit.state_path)), 0)
  # Check network is no longer linked.
  assertEq(len(os.listdir('%s/bob/bob' % bob.infinit.linked_networks_path)), 0)
  # Check network descriptor still exists.
  assertEq(len(os.listdir(bob.infinit.networks_path)), 1)
  bob.run(['infinit-network', '--delete', 'n'])
  assertEq(len(os.listdir('%s/bob' % bob.infinit.networks_path)), 0)
  # Simulate old link behaviour: copy linked network to descriptor folder,
  # check that unlink changes it to a network descriptor.
  with open('%s/bob/n' % bob.infinit.networks_path, 'w') as f:
    f.write(linked_net)
  assertEq(len(os.listdir(bob.infinit.networks_path)), 1)
  bob.run(['infinit-network', '--unlink', 'n'])
  assertEq(len(os.listdir(bob.infinit.networks_path)), 1)
  with open('%s/bob/n' % bob.infinit.networks_path) as f:
    test = f.read()
    assertEq(test, descriptor)

# Fetch & list.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:

  bob.run(['infinit-user', '--signup', '--name', 'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup', '--name', 'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])
  alice.run(['infinit-user', '--fetch', '--name', 'bob'])

  # Create.
  l = bob.run_json(['infinit-network', '--list', '--as', 'bob', '--script'])
  assertEq(len(l), 0)
  bob.run(['infinit-network', '--create', '--name', 'a', '--as', 'bob', '--push',
          '--description', 'some network'])
  try:
    bob.run(['infinit-network', '--push', '--name', 'a', '--as', 'not_bob'])
    unreachable()
  except Exception as e:
    pass
  l = bob.run_json(['infinit-network', '--list', '--script', '--as', 'bob'])
  assertEq(len(l), 1)
  n = bob.run_json(['infinit-network', '--export', '--as', 'bob', 'a'])
  assertEq(n['description'], 'some network')
  bob.run(['infinit-network', '--create', '--name', 'b', '--as', 'bob', '--push'])
  l = bob.run_json(['infinit-network', '--list', '--script', '--as', 'bob'])
  assertEq(len(l), 2)

  l = alice.run_json(['infinit-network', '--list', '--script', '--as', 'alice'])
  assertEq(len(l), 0)
  alice.run(['infinit-network', '--fetch', '--name', 'bob/a', '--as', 'alice'])
  l = alice.run_json(['infinit-network', '--list', '--script', '--as', 'alice'])
  assertEq(len(l), 1)
  n = alice.run_json(['infinit-network', '--export', '--as', 'alice', 'bob/a'])
  assertEq(n['description'], 'some network')
  alice.run(['infinit-network', '--fetch', '--as', 'alice'])
  # Still one, alice hasn't been invited to the 2nd network.
  l = alice.run_json(['infinit-network', '--list', '--script', '--as', 'alice'])
  assertEq(len(l), 1)
  # Check that listing moves linked networks.
  bob_n, _ = bob.run(['infinit-network', '--create', 'bob-linked', '--as', 'bob',
                      '--output', '-'])
  assert not os.path.exists('%s/bob/bob/bob-linked' % bob.linked_networks_path)
  with open('%s/bob/bob-linked' % bob.networks_path, 'w') as f:
    f.write(bob_n)
  bob.run(['infinit-network', '--list', '--as', 'bob'])
  with open('%s/bob/bob/bob-linked' % bob.linked_networks_path) as f:
    test = f.read()
    assertEq(json.loads(test), json.loads(bob_n))

# Update network.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup',  'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup',  'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])

  bob.run(['infinit-network', '--create', '--name', 'n', '--as', 'bob', '--kelips', '--push', '--port', '8181'])
  bob.run(['infinit-passport', '--create', '--push', '--network', 'n', '--user', 'alice', '--as', 'bob'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])

  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  alice.run(['infinit-network', '--link', '--name', 'bob/n', '--as', 'alice'])
  # Make sure you can only link once.
  throws(lambda: alice.run(['infinit-network', '--link', '--name', 'bob/n', '--as', 'alice']))
  e0 = alice.run_json(['infinit-network', '--export', '--name', 'bob/n', '--as', 'alice'])
  new_version = '0.3.0'
  assertEq(e0.get('description'), None)
  bob.run(['infinit-network', '--update', '--name', 'n', '--compatibility-version', new_version, '--as', 'bob', '--push', '--description', 'some network'])
  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  e1 = alice.run_json(['infinit-network', '--export', '--name', 'bob/n', '--as', 'alice'])
  assertEq(e1['description'], 'some network')
  assertNeq(e0['version'], e1['version'])
  assertEq(e1['version'], new_version)
  del e0['version']
  del e1['version']
  del e1['description']
  assertEq(e0, e1)

def setup(beyond, bob, alice):
  bob.run(['infinit-user', '--signup',  'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup',  'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])
  # Create network.
  bob.run(['infinit-network', '--create', '--name', 'n', '--as', 'bob', '--kelips', '--push', '--port', '8181'])
  bob.run(['infinit-passport', '--create', '--push', '--network', 'n', '--user', 'alice', '--as', 'bob'])
  # Fetch networks & passports.
  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])

# Make sure passports are kept after updating.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  setup(beyond, bob, alice)
  assertEq(len(alice.run_json(['infinit-passport', '--list',
                               '--as', 'alice', '--script'])),
           1)
  alice.run(['infinit-passport', '--delete', '--user', 'alice', '--network', 'bob/n', '--as', 'alice'])
  assertEq(len(alice.run_json(['infinit-passport', '--list', '--as', 'alice', '--script'])),
           0)
  bob.run(['infinit-network', '--update', '--name', 'n', '--compatibility-version', '0.3.0', '--as', 'bob', '--push'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])
  assertEq(len(alice.run_json(['infinit-passport', '--list',
                               '--as', 'alice', '--script'])),
           1)

# Make sure endpoints and stats are kept after updating.
for field, body in [
    ('stat', {'capacity': 100, 'usage': 1000}),
    ('endpoints', {'stuff':  [{'host': '127.0.0.1', 'port': 8080}]})
]:
  with Beyond(disable_authentication = True) as beyond, Infinit(beyond = beyond) as bob, \
       Infinit(beyond = beyond) as alice:
    setup(beyond, bob, alice)
    # Bypass the binaries.
    import requests
    requests.put(
      '%s/networks/bob/n/%s/alice/node' % (beyond.domain, field),
      headers = {
        'Content-Type': 'application/json',
      },
      data = json.dumps(body)).raise_for_status()
    initial_res = requests.get(
      '%s/networks/bob/n/%s' % (beyond.domain, field),
      headers = {
        'Content-Type': 'application/json',
      }).json()
    if field == 'endpoints':
      assertIn('alice', initial_res)
    else:
      assertIn('usage', initial_res)
      assertIn('capacity', initial_res)
    bob.run(['infinit-network', '--update',
             '--name', 'n',
             '--compatibility-version', '0.5.2',
             '--as', 'bob',
             '--push'])
    res = requests.get(
      '%s/networks/bob/n/%s' % (beyond.domain, field),
      headers = {
        'Content-Type': 'application/json',
      }).json()
    assertEq(res, initial_res)

# Create and link with multiple 'storage'.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup',  'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup',  'alice',
             '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])
  bob.run(['infinit-storage', '--create', '--filesystem',
           '--name', 'bob_storage_1'])
  bob.run(['infinit-storage', '--create', '--filesystem',
           '--name', 'bob_storage_2'])
  bob.run(['infinit-network', '--create', '--name', 'n', '--as', 'bob',
           '--kelips', '--push',
           '--storage', 'bob_storage_1', '--storage', 'bob_storage_2'])
  s1 = bob.run(['infinit-network', '--list-storage', '--name', 'bob/n',
                '--as', 'bob'])
  bob.run(['infinit-passport', '--create', '--push', '--network', 'n',
           '--user', 'alice', '--as', 'bob'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])

  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  alice.run(['infinit-storage', '--create', '--filesystem', 'alice_storage_1'])
  alice.run(['infinit-storage', '--create', '--filesystem', 'alice_storage_2'])
  alice.run(['infinit-network', '--link', '--name', 'bob/n', '--as', 'alice',
             '--storage', 'alice_storage_1', '--storage', 'alice_storage_2'])
  s2 = alice.run(['infinit-network', '--list-storage', '--name', 'bob/n',
                  '--as', 'alice'])
  assertEq(len(s1), 2)
  assertEq(len(s2), 2)

# Pull and delete.
with Beyond() as beyond, Infinit(beyond = beyond) as bob:
  # Local and Beyond.
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n', '--push'])
  bob.run(['infinit-network', '--run', '--name', 'n', '--as', 'bob',
           '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/bob/bob/n' % bob.state_path)), 2)
  bob.run(['infinit-network', '--delete', '--as', 'bob', 'n', '--unlink'])
  assertEq(len(os.listdir('%s/cache/bob' % bob.state_path)), 0)
  bob.run(['infinit-network', '--fetch', '--as', 'bob', 'n'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-network', '--delete', '--as', 'bob', 'n', '--pull', '--unlink'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 0)
  bob.run(['infinit-network', '--fetch', '--as', 'bob', 'n'], return_code = 1)
  # Only local.
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n2'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-network', '--delete', '--as', 'bob', 'n2', '--pull', '--unlink'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 0)

# Delete multi user.
def remove_network_linked_by_two_users(owner_remove = True):
  with Beyond() as beyond, Infinit(beyond = beyond) as infinit:
    owner = User('bob', infinit)
    invitee = User('alice', infinit)
    owner.run('infinit-user --signup --email owner@infinit.sh ' + owner.name)
    invitee.run('infinit-user --signup --email invitee@infinit.sh ' + invitee.name)
    owner.run('infinit-network --create n --push')
    owner.run(['infinit-network', '--run', '--name', 'n',
               '--async', '--cache', '-s'])
    assertEq(len(os.listdir('%(state)s/cache/%(user_name)s/%(owner_name)s/n' % {
      'state': infinit.state_path,
      'user_name': owner.name,
      'owner_name': owner.name})), 2)
    assertEq(
      owner.run_json('infinit-network --list --script'),
      [
        {'name': '%s/n' % owner.name, 'linked': True}
      ])
    owner.run('infinit-passport --create --network n --push --user ' + invitee.name)
    invitee.run('infinit-passport --fetch')
    invitee.run('infinit-network --fetch')
    assertEq(
      owner.run_json('infinit-network --list --script'),
      [
        {'name': '%s/n' % owner.name, 'linked': True}
      ])
    assertEq(
      invitee.run_json('infinit-network --list --script'),
      [
        {'name': '%s/n' % owner.name, 'linked': False}
      ])
    invitee.run('infinit-network --link --name %s/n' % owner.name)
    invitee.run(['infinit-network', '--run', '--name', '%s/n' % owner.name,
                 '--async', '--cache', '-s'])
    assertEq(len(os.listdir('%(state)s/cache/%(user_name)s/%(owner_name)s/n' % {
      'state': infinit.state_path,
      'user_name': invitee.name,
      'owner_name': owner.name})), 2)
    assertEq(
      invitee.run_json('infinit-network --list --script'),
      [
        {'name': '%s/n' % owner.name, 'linked': True}
      ])
    invitee.run('infinit-network --unlink --name %s/n' % owner.name)
    assertEq(len(os.listdir('%(state)s/cache/%(name)s' % {
      'state': infinit.state_path, 'name': invitee.name})), 0)
    assertEq(
      invitee.run_json('infinit-network --list --script'),
      [
        {'name': '%s/n' % owner.name, 'linked': False}
      ])
    invitee.run('infinit-network --link --name %s/n' % owner.name)
    invitee.run(['infinit-network', '--run', '--name', '%s/n' % owner.name,
                 '--async', '--cache', '-s'])
    assertEq(len(os.listdir('%(state)s/cache/%(user_name)s/%(owner_name)s/n' % {
      'state': infinit.state_path,
      'user_name': invitee.name,
      'owner_name': owner.name})), 2)
    if owner_remove:
      throws(lambda: owner.run('infinit-network --delete n'))
      owner.run('infinit-network --delete n --unlink')
    else:
      throws(lambda: invitee.run('infinit-network --delete %s/n' % owner.name ))
      invitee.run('infinit-network --delete %s/n --unlink' % owner.name)
    assertEq(owner.run_json('infinit-network --list --script'), [])
    assertEq(invitee.run_json('infinit-network --list --script'), [])
    assertEq(len(os.listdir('%(state)s/cache/%(name)s' % {
      'state': infinit.state_path, 'name': owner.name})), 0)
    assertEq(len(os.listdir('%(state)s/cache/%(name)s' % {
      'state': infinit.state_path, 'name': invitee.name})), 0)

remove_network_linked_by_two_users(owner_remove = True)
remove_network_linked_by_two_users(owner_remove = False)

# Purge.
with Beyond() as beyond, \
    Infinit(beyond = beyond) as bob, Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  alice.run(
    ['infinit-user', '--signup', 'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-storage', '--create', '--as', 'bob', 's', '--filesystem'])
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n', '-S', 's', '-p'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '-s', '--as', 'bob'])), 1)
  bob.run(['infinit-network', '--run', '--name', 'n', '--as', 'bob',
           '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/bob/bob/n' % bob.state_path)), 2)
  bob.run(['infinit-user', '--fetch', 'alice'])
  bob.run(['infinit-passport', '--create', '--as', 'bob',
           '-u', 'alice', '-N', 'n', '-p'])
  assertEq(len(bob.run_json(['infinit-passport', '--list', '-s', '--as', 'bob'])), 1)
  alice.run(['infinit-network', '--create', '--as', 'alice', 'n', '-p'])
  alice.run(['infinit-network', '--run', '--name', 'n', '--as', 'alice',
             '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/alice/alice/n' % alice.state_path)), 2)
  alice.run(['infinit-user', '--fetch', 'bob'])
  alice.run(['infinit-passport', '--create', '--as', 'alice',
           '-u', 'bob', '-N', 'n', '-p'])
  bob.run(['infinit-passport', '--fetch', '--as', 'bob'])
  assertEq(len(bob.run_json(['infinit-passport', '--list', '-s', '--as', 'bob'])), 2)
  bob.run(['infinit-volume', '--create', '--as', 'bob', 'v', '-N', 'n', '-p'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s', '--as', 'bob'])), 1)
  bob.run_script(user = 'bob', volume = 'bob/v',
                 operation = 'write_file', path = '/some_file')
  assertEq(len(os.listdir('%s/bob/n/bob/v' % bob.state_path)), 1)
  bob.run(['infinit-drive', '--create', '--as', 'bob', 'd',
           '-V', 'v', '-N', 'n', '-p'])
  assertEq(
    len(bob.run_json(['infinit-drive', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-network', '--delete', '--as', 'bob',
           '--purge', '--pull', 'n', '--unlink'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '-s', '--as', 'bob'])), 0)
  assertEq(len(bob.run_json(['infinit-passport', '--list', '-s', '--as', 'bob'])), 1)
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s'])), 0)
  assertEq(
    len(bob.run_json(['infinit-drive', '--list', '--as', 'bob', '-s'])), 0)
  assertEq(len(os.listdir('%s/cache/bob' % bob.state_path)), 0)
  assertEq(len(os.listdir('%s/bob/n/bob' % bob.state_path)), 0)
  bob.run(['infinit-network', '--fetch', '--as', 'bob', 'n'], return_code = 1)
  alice.run(['infinit-passport', '--fetch', '--as', 'alice', '-N' 'bob/n'],
            return_code = 1)
  bob.run(['infinit-volume', '--fetch', '--as', 'bob', 'v'], return_code = 1)
  bob.run(['infinit-drive', '--fetch', '--as', 'bob', 'd'], return_code = 1)

# Admin read, read/write permissions.
with Beyond() as beyond, Infinit(beyond = beyond, user = 'bob') as bob, \
    Infinit(beyond = beyond, user = 'alice') as alice, \
    Infinit(beyond = beyond, user = 'charlie') as charlie, \
    Infinit(beyond = beyond, user = 'dave') as dave, \
    TemporaryDirectory() as tmp:
  def _terminate_process(proc):
    if proc is not None:
      proc.terminate()
      out, err = proc.communicate(timeout = 30)
      if os.environ.get('OS') != 'windows':
        try:
          # SIGTERM is not caught on windows. Might be wine related.
          assertEq(proc.wait(), 0)
        except:
          print('STDOUT: %s' % out)
          print('STDERR: %s' % err)
          raise
  def _signup(user, bob_fetch = True):
    user.run(['infinit-user', '--signup', '--name',
             user.user, '--email', '%s@infinit.io' % user.user])
    if bob_fetch:
      bob.run(['infinit-user', '--fetch', user.user])
  _signup(bob, bob_fetch = False)
  _signup(alice)
  _signup(charlie)
  _signup(dave)
  # Create network and volume.
  bob.run(['infinit-storage', '--create', '--filesystem', '--name', 's'])
  bob.run(['infinit-network', '--create', '--as', 'bob', '--name', 'n',
           '--storage', 's',
           '--admin-rw', 'alice',
           '--admin-r', 'charlie',
           '--push'])
  bob.run(['infinit-volume', '--create', '--as', 'bob',
           '--name', 'v', '--network', 'n', '--push'])
  def _create_passport(user):
    bob.run(['infinit-passport', '--create', '--as', 'bob',
             '-N', 'n', '-u', user.user, '--push'])
  _create_passport(alice)
  _create_passport(charlie)
  _create_passport(dave)
  # Link other users to network.
  def _link_network(user):
    user.run(['infinit-network', '--fetch', '--as', user.user])
    user.run(['infinit-passport', '--fetch', '--as', user.user])
    user.run(['infinit-volume', '--fetch', '--as', user.user])
    user.run(['infinit-network', '--link', '--as', user.user, 'bob/n'])
  _link_network(alice)
  _link_network(charlie)
  _link_network(dave)
  peer_file = '%s/peerfile' % tmp
  def peer():
    while not os.path.exists(peer_file):
      time.sleep(0.1)
    return peer_file
  res = bob.run_script(user = 'bob', volume = 'bob/v',
                       operation = 'write_file',
                       path = '/some_file', content = 'some data')
  assertEq(res['success'], True)
  res = bob.run_script(user = 'bob', volume = 'bob/v',
                       operation = 'read_file', path = '/some_file')
  assertEq(res['success'], True)
  assertEq(res['content'], 'some data')
  try:
    net_proc = bob.spawn(['infinit-network', '--run', 'n', '--as', 'bob',
                          '--endpoints-file', peer_file])
    # Check Dave doesn't have access.
    res = dave.run_script(user = 'dave', volume = 'bob/v', peer = peer(),
                          operation = 'read_file', path = '/some_file')
    assertEq(res['success'], False)
    # Check Alice and Charlie can read.
    res = alice.run_script(user = 'alice', volume = 'bob/v', peer = peer(),
                           operation = 'read_file', path = '/some_file')
    assertEq(res['success'], True)
    assertEq(res['content'], 'some data')
    res = charlie.run_script(user = 'charlie', volume = 'bob/v', peer = peer(),
                             operation = 'read_file', path = '/some_file')
    assertEq(res['success'], True)
    assertEq(res['content'], 'some data')
    # Check only Alice can write to the file.
    res = alice.run_script(user = 'alice', volume = 'bob/v', peer = peer(),
                           operation = 'write_file',
                           path = '/some_file', content = 'alice was here')
    assertEq(res['success'], True)
    res = charlie.run_script(user = 'charlie', volume = 'bob/v', peer = peer(),
                             operation = 'write_file',
                             path = '/some_file', content = 'charlie was here')
    assertEq(res['success'], False)
    res = dave.run_script(user = 'dave', volume = 'bob/v', peer = peer(),
                          operation = 'write_file',
                          path = '/some_file', content = 'dave was here')
    assertEq(res['success'], False)
    # Check content of file is correct.
    res = alice.run_script(user = 'alice', volume = 'bob/v', peer = peer(),
                           operation = 'read_file', path = '/some_file')
    assertEq(res['success'], True)
    assertEq(res['content'], 'alice was here')
  finally:
    _terminate_process(net_proc)
    os.remove(peer_file)
  # Add Dave as a read/write admin, remove Charlie.
  bob.run(['infinit-network', '--update', '--as', 'bob', '--name', 'n',
           '--push',
           '--admin-rw', 'dave', '--admin-remove', 'charlie'])
  # Create new file.
  res = bob.run_script(user = 'bob', volume = 'bob/v',
                       operation = 'write_file',
                       path = '/new_file',
                       content = 'after changing admins')
  assertEq(res['success'], True)
  def _update_network(user):
    user.run(['infinit-network', '--fetch', 'bob/n', '--as', user.user])
  _update_network(alice)
  _update_network(charlie)
  _update_network(dave)
  net_proc = None
  try:
    net_proc = bob.spawn(['infinit-network', '--run', 'n', '--as', 'bob',
                          '--endpoints-file', peer_file])
    # Check Alice can create a file.
    res = alice.run_script(user = 'alice', volume = 'bob/v', peer = peer(),
                          operation = 'write_file',
                          path = '/alices_file', content = 'mine!')
    assertEq(res['success'], True)
    # Check that Dave doesn't have access to existing files.
    res = dave.run_script(user = 'dave', volume = 'bob/v', peer = peer(),
                          operation = 'read_file', path = '/some_file')
    assertEq(res['success'], False)
    # Check that Charlie no longer has access.
    res = charlie.run_script(user = 'charlie', volume = 'bob/v', peer = peer(),
                             operation = 'read_file', path = '/new_file')
    assertEq(res['success'], False)
    # Check that Dave has read access to new files and can write to it.
    res = dave.run_script(user = 'dave', volume = 'bob/v', peer = peer(),
                          operation = 'read_file', path = '/new_file')
    assertEq(res['success'], True)
    assertEq(res['content'], 'after changing admins')
    res = dave.run_script(user = 'dave', volume = 'bob/v', peer = peer(),
                          operation = 'write_file',
                          path = '/new_file', content = 'dave was here')
    assertEq(res['success'], True)
    # Check that overwrite of file worked.
    res = alice.run_script(user = 'alice', volume = 'bob/v', peer = peer(),
                           operation = 'read_file', path = '/new_file')
    assertEq(res['success'], True)
    assertEq(res['content'], 'dave was here')
  finally:
    _terminate_process(net_proc)
    os.remove(peer_file)
