#!/usr/bin/env python3

from utils import *
import json

# Creating and deleting networks locally.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--create',  'bob'])
  alice.run(['infinit-user', '--create',  'alice'])

  try:
    bob.run(['infinit-network', '--delete', 'broken', '--as', 'bob'])
    unreachable()
  except Exception as e:
    pass
  bob.run(['infinit-network', '--create', 'broken', '--as', 'bob'])
  # Simulate the network being run with cache and async.
  import os
  state_dir = '%s/.local/state/infinit/filesystem' % bob
  os.makedirs('%s/cache/bob/broken' % state_dir)
  bob.run(['infinit-network', '--delete',
           '--name', 'broken', '--as', 'bob'])
  # Ensure network cache directory is removed
  assertEq(len(os.listdir('%s/cache/bob' % state_dir)), 0)

  bob.run(['infinit-network', '--create', 'broken', '--as', 'bob'])
  # Specified.
  bob.run(
    ['infinit-network', '--delete', 'bob/broken', '--as', 'bob'])
  bob.run(
    ['infinit-network', '--create', '--name', 'osef', '--as', 'bob'])
  net = bob.run_json(
    ['infinit-network', '--export', '--name', 'osef', '--as', 'bob'])
  alice.run(['infinit-network', '--import'],
            input = net)

  try:
    alice.run(['infinit-network', '--delete',
               '--name', 'osef', '--as', 'alice'])
    unreachable()
  except Exception as e:
    pass
  alice.run(['infinit-network', '--delete',
             '--name', 'bob/osef', '--as', 'alice'])

# Fetch & list.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:

  bob.run(['infinit-user', '--signup', '--name', 'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup', '--name', 'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])
  alice.run(['infinit-user', '--fetch', '--name', 'bob'])

  # Create.
  l = bob.run_json(['infinit-network', '--list', '--script'])
  assertEq(len(l), 0)
  bob.run(['infinit-network', '--create', '--name', 'a', '--as', 'bob', '--push'])
  try:
    bob.run(['infinit-network', '--push', '--name', 'a', '--as', 'not_bob'])
    unreachable()
  except Exception as e:
    pass
  l = bob.run_json(['infinit-network', '--list', '--script'])
  assertEq(len(l), 1)
  bob.run(['infinit-network', '--create', '--name', 'b', '--as', 'bob', '--push'])
  l = bob.run_json(['infinit-network', '--list', '--script'])
  assertEq(len(l), 2)

  l = alice.run_json(['infinit-network', '--list', '--script'])
  assertEq(len(l), 0)
  alice.run(['infinit-network', '--fetch', '--name', 'bob/a', '--as', 'alice'])
  l = alice.run_json(['infinit-network', '--list', '--script'])
  assertEq(len(l), 1)
  alice.run(['infinit-network', '--fetch', '--as', 'alice'])
  # Still one, alice hasn't been invited to the 2nd network.
  l = alice.run_json(['infinit-network', '--list', '--script'])
  assertEq(len(l), 1)

# Update network.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup',  'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup',  'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])

  bob.run(['infinit-network', '--create', '--name', 'n', '--as', 'bob', '--kelips', '--push', '--port', '8181'])
  bob.run(['infinit-passport', '--create', '--push', '--network', 'n', '--user', 'alice', '--as', 'bob'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])

  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  alice.run(['infinit-network', '--link', '--name', 'bob/n', '--as', 'alice'])
  e0 = alice.run_json(['infinit-network', '--export', '--name', 'bob/n', '--as', 'alice'])
  new_version = '9.9.9'
  bob.run(['infinit-network', '--update', '--name', 'n', '--compatibility-version', new_version, '--as', 'bob', '--push'])
  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  e1 = alice.run_json(['infinit-network', '--export', '--name', 'bob/n', '--as', 'alice'])
  assertNeq(e0['version'], e1['version'])
  assertEq(e1['version'], new_version)
  del e0['version']
  del e1['version']
  assertEq(e0, e1)

def setup(beyond, bob, alice):
  bob.run(['infinit-user', '--signup',  'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup',  'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])
  # Create network.
  bob.run(['infinit-network', '--create', '--name', 'n', '--as', 'bob', '--kelips', '--push', '--port', '8181'])
  bob.run(['infinit-passport', '--create', '--push', '--network', 'n', '--user', 'alice', '--as', 'bob'])
  # Fetch networks & passports.
  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])

# Make sure passports are kept after updating.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  setup(beyond, bob, alice)
  assertEq(len(alice.run_json(['infinit-passport', '--list',
                               '--as', 'alice', '--script'])),
           1)
  alice.run(['infinit-passport', '--delete', '--user', 'alice', '--network', 'bob/n', '--as', 'alice'])
  assertEq(len(alice.run_json(['infinit-passport', '--list', '--as', 'alice', '--script'])),
           0)
  bob.run(['infinit-network', '--update', '--name', 'n', '--compatibility-version', '9.9.9', '--as', 'bob', '--push'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])
  assertEq(len(alice.run_json(['infinit-passport', '--list',
                               '--as', 'alice', '--script'])),
           1)

# Make sure endpoints and stats are kept after updating.
for field, body in [
    ('stat', {'capacity': 100, 'usage': 1000}),
    ('endpoints', {'stuff':  [{'host': '127.0.0.1', 'port': 8080}]})
]:
  with Beyond(disable_authentication = True) as beyond, Infinit(beyond = beyond) as bob, \
       Infinit(beyond = beyond) as alice:
    setup(beyond, bob, alice)
    # Bypass the binaries.
    import requests
    requests.put(
      '%s/networks/bob/n/%s/alice/node' % (beyond.domain, field),
      headers = {
        'Content-Type': 'application/json',
      },
      data = json.dumps(body)).raise_for_status()
    initial_res = requests.get(
      '%s/networks/bob/n/%s' % (beyond.domain, field),
      headers = {
        'Content-Type': 'application/json',
      }).json()
    if field == 'endpoints':
      assertIn('alice', initial_res)
    else:
      assertIn('usage', initial_res)
      assertIn('capacity', initial_res)
    bob.run(['infinit-network', '--update',
             '--name', 'n',
             '--compatibility-version', '9.9.9',
             '--as', 'bob',
             '--push'])
    res = requests.get(
      '%s/networks/bob/n/%s' % (beyond.domain, field),
      headers = {
        'Content-Type': 'application/json',
      }).json()
    assertEq(res, initial_res)

# Create and link with multiple 'storage'.
with Beyond() as beyond, Infinit(beyond = beyond) as bob, \
     Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup',  'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup',  'alice',
             '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', '--name', 'alice'])
  bob.run(['infinit-storage', '--create', '--filesystem',
           '--name', 'bob_storage_1'])
  bob.run(['infinit-storage', '--create', '--filesystem',
           '--name', 'bob_storage_2'])
  bob.run(['infinit-network', '--create', '--name', 'n', '--as', 'bob',
           '--kelips', '--push',
           '--storage', 'bob_storage_1', '--storage', 'bob_storage_2'])
  s1 = bob.run(['infinit-network', '--list-storage', '--name', 'bob/n',
                '--as', 'bob'])
  bob.run(['infinit-passport', '--create', '--push', '--network', 'n',
           '--user', 'alice', '--as', 'bob'])
  alice.run(['infinit-passport', '--fetch', '--as', 'alice'])

  alice.run(['infinit-network', '--fetch', '--name', 'bob/n', '--as', 'alice'])
  alice.run(['infinit-storage', '--create', '--filesystem', 'alice_storage_1'])
  alice.run(['infinit-storage', '--create', '--filesystem', 'alice_storage_2'])
  alice.run(['infinit-network', '--link', '--name', 'bob/n', '--as', 'alice',
             '--storage', 'alice_storage_1', '--storage', 'alice_storage_2'])
  s2 = alice.run(['infinit-network', '--list-storage', '--name', 'bob/n',
                  '--as', 'alice'])
  assertEq(len(s1), 2)
  assertEq(len(s2), 2)

with Beyond() as beyond, Infinit(beyond = beyond) as bob:
  # Local and Beyond.
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n', '--push'])
  bob.run(['infinit-network', '--delete', '--as', 'bob', 'n'])
  bob.run(['infinit-network', '--fetch', '--as', 'bob', 'n'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-network', '--delete', '--as', 'bob', 'n', '--pull'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 0)
  bob.run(['infinit-network', '--fetch', '--as', 'bob', 'n'], return_code = 1)
  # Only local.
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n2'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-network', '--delete', '--as', 'bob', 'n2', '--pull'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '--as', 'bob', '-s'])), 0)
