#!/usr/bin/env python3

from utils import *
import json

# Using hub to retreive a user.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as bob, Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup',
           '--name', 'bob', '--email', 'bob@infinit.io'])
  alice.run(['infinit-user', '--signup', '--full',
             '--name', 'alice', '--email', 'alice@infinit.io',
             '--hub-password-inline', 'password'])
  try:
    bob.run(['infinit-user', '--export', '--name', 'alice'])
    assert False
  except Exception as e:
    pass
  bob.run(['infinit-user', '--fetch', '--name', 'alice', '--as', 'bob'])
  bob.run(['infinit-user', '--export', '--name', 'alice'])

## ----------------- ##
## Login / Push full ##
## ----------------- ##
# Using login.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  alice.run(['infinit-user', '--signup', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--hub-password-inline', 'password'])
  alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  alice2.run(['infinit-user', '--login',
              '--name', 'alice',
              '--hub-password-inline', 'password'])
  alice2_json = alice2.run(['infinit-user', '--export', '--full',
                            '--name', 'alice'])
  # XXX: Fix missing email.
  del alice_json['email']
  del alice2_json['email']
  assertEq(alice_json, alice2_json)

# Push --full.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  alice.run(['infinit-user', '--create', '--name', 'alice'])
  alice.run(['infinit-user', '--push', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--hub-password-inline', 'password'])
  alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  alice2.run(['infinit-user', '--login',
              '--name', 'alice',
              '--hub-password-inline', 'password'])
  alice2_json = alice2.run(['infinit-user', '--export', '--full',
                            '--name', 'alice'])
  # XXX: Fix missing email.
  del alice_json['email']
  del alice2_json['email']
  assertEq(alice_json, alice2_json)

# Push without --full.
with Beyond() as beyond, TemporaryDirectory() as tmp, \
     Infinit(beyond = beyond) as alice:
  alice.run(['infinit-user', '--create', '--name', 'alice'])
  alice.run(['infinit-user', '--push',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  try:
    alice.run(['infinit-user', '--login', '--name', 'alice', '--hub-password-inline', 'password'])
    assert False
  except Exception as e:
    assert 'doesn\'t use the hub to login' in e.args[0]

# Read password from stdin (signup).
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  alice.run(['infinit-user', '--create', '--name', 'alice'])
  alice.run(['infinit-user', '--push',
             '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io'],
            input = 'password'.encode('utf-8'),
            input_as_it_is = True)
  alice2.run(['infinit-user', '--login',
              '--name', 'alice',
              '--hub-password-inline', 'password'])

# Read password from stdin (login).
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  alice.run(['infinit-user', '--create', '--name', 'alice'])
  alice.run(['infinit-user', '--push',
             '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--hub-password-inline', 'password'])
  alice2.run(['infinit-user', '--login', '--name', 'alice'],
             input = 'password'.encode('utf-8'),
             input_as_it_is = True)

# Read password from stdin (both).
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  alice.run(['infinit-user', '--create', '--name', 'alice'])
  alice.run(['infinit-user', '--push',
             '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io'],
            input = 'password'.encode('utf-8'),
            input_as_it_is = True)
  alice2.run(['infinit-user', '--login', '--name', 'alice'],
             input = 'password'.encode('utf-8'),
             input_as_it_is = True)

# Missing and invalid email.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  try:
    alice.run(['infinit-user', '--signup', '--name', 'alice'])
    assert False
  except Exception as e:
    assert '(use --email)' in  e.args[0]
  try:
    alice.run(['infinit-user', '--signup', '--name', 'alice', '--email', 'foo@'])
    assert False
  except Exception as e:
    assert 'email address is invalid' in  e.args[0]
  # Create is not atomic, so 'alice' will be created after that.
  try:
    alice.run(['infinit-user', '--create', '--name', 'alice', '--push'])
    assert False
  except Exception as e:
    assert '(use --email)' in  e.args[0]

# Password missmatch.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  alice.run(['infinit-user', '--signup', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--hub-password-inline', 'password'])
  try:
    alice2.run(['infinit-user', '--login',
                '--name', 'alice',
                '--hub-password-inline', 'not_password'])
    assert False
  except Exception as e:
    assert 'password do not match' in e.args[0]

## --------------- ##
## Use hub to pair ##
##---------------- ##
# Normal case.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  # Signup without sending private key.
  alice.run(['infinit-user', '--signup',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  alice.run(['infinit-user', '--export', '--full', '--with-hub', '--as', 'alice',
             '--pairing-password-inline', 'the_password'])
  alice2.run(['infinit-user', '--import', '--with-hub', '--name', 'alice',
              '--pairing-password-inline', 'the_password'])

  alice2_json = alice2.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  assertEq(alice_json['private_key'], alice2_json['private_key'])

# Password from input.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  password = 'super_password'.encode('utf-8')
  # Signup without sending private key.
  alice.run(['infinit-user', '--signup',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  alice.run(['infinit-user', '--export', '--full', '--with-hub', '--as', 'alice'],
             input = password, input_as_it_is = True)
  alice2.run(['infinit-user', '--import', '--with-hub', '--name', 'alice'],
             input = password, input_as_it_is = True)
  alice2_json = alice2.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  assertEq(alice_json['private_key'], alice2_json['private_key'])

# Expired.
# with Beyond() as beyond, TemporaryDirectory() as tmp,  \
#      Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
#   password = 'super_password'.encode('utf-8')
#   # Signup without sending private key.
#   alice.run(['infinit-user', '--signup',
#              '--name', 'alice',
#              '--email', 'alice@infinit.io'])
#   alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
#   alice.run(['infinit-user', '--pair', '--generate', '--as', 'alice'],
#             input = password, input_as_it_is = True)
#   beyond.advance(5 * 6000 + 1)
#   try:
#     alice2.run(['infinit-user', '--pair', '--accept', '--as', 'alice'],
#                input = password, input_as_it_is = True)
#     assert False
#   except Exception as e:
#     print(e.args[0])
#     assert 'Pairing expired' in e.args[0]

# Invalid password.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  password = 'super_password'.encode('utf-8')
  # Signup without sending private key.
  alice.run(['infinit-user', '--signup',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  alice_json = alice.run(['infinit-user', '--export', '--name', 'alice', '--full'])
  alice.run(['infinit-user', '--export', '--full', '--with-hub', '--as', 'alice'],
            input = password, input_as_it_is = True)
  try:
    alice2.run(['infinit-user', '--import', '--with-hub', '--name', 'alice'],
               input = 'not_the_password'.encode('utf-8'), input_as_it_is = True)
    assert False
  except Exception as e:
    # Should just be 'invalid password'.
    assert 'pairing/invalid_password' in e.args[0]

# No pairing information.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  password = 'super_password'.encode('utf-8')
  # Signup without sending private key.
  alice.run(['infinit-user', '--signup',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  try:
    alice.run(['infinit-user', '--import', '--with-hub', '--name', 'alice'],
              input = password, input_as_it_is = True)
    assert False
  except Exception as e:
    # Should just be 'No pairing information'.
    assert 'pairing_information/not_found' in e.args[0]

# Pairing information usable once.
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Infinit(beyond = beyond) as alice, Infinit(beyond = beyond) as alice2:
  password = 'super_password'.encode('utf-8')
  alice.run(['infinit-user', '--signup',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  alice.run(['infinit-user', '--export', '--full', '--with-hub', '--as', 'alice'],
             input = password, input_as_it_is = True)
  alice2.run(['infinit-user', '--import', '--with-hub', '--name', 'alice'],
             input = password, input_as_it_is = True)
  try:
    alice2.run(['infinit-user', '--import', '--with-hub', '--name', 'alice'],
               input = password, input_as_it_is = True)
    assert False
  except Exception as e:
    # Should just be 'No pairing information'.
    assert 'pairing_information/not_found' in e.args[0]
