#!/usr/bin/env python3

from utils import *
from math import *

def static_vars(**kwargs):
  def decorate(func):
    for k in kwargs:
      setattr(func, k, kwargs[k])
    return func
  return decorate

quals = ['kb', 'kib', 'Kib', 'KiB',
         'mb', 'mib', 'Mib', 'MiB',
         'gb', 'gib', 'Gib', 'GiB',
         'tb', 'tib', 'Tib', 'TiB',
         'b', 'B']

kb = pow(2, 10)
mb = pow(2, 20)
gb = pow(2, 30)
tb = pow(2, 40)

quals_to = [1000, 1024, 1024, 1024,
            1000000, mb, mb, mb,
            1000000000, gb, gb, gb,
            1000000000000, tb, tb, tb,
            1, 1]

def convert(size):
  global quals
  for qual in quals:
    index = size.find(qual)
    if index != -1:
      return (int(size[:index]), size[index:])
  return (int(size),'')

def unformat(size):
  global quals
  global quals_to
  size, qual = convert(size)
  if qual == '':
    return size
  return size * quals_to[quals.index(qual)]


@static_vars(name = -1)
def test(infinit, size):
  global quals
  import json
  for qual in quals:
    test.name += 1
    hsize = "%s%s" % (size, qual)
    infinit.run(['infinit-storage', '--create', '--filesystem',
                str(test.name),
                '--capacity', hsize])
    with open('%s/.local/share/infinit/filesystem/storages/%s' %
              (infinit.dir, str(test.name)), 'r') as conf:
      j = json.loads(''.join(conf.readlines()))
      assertEq(j['capacity'], unformat(hsize))

with Infinit() as bob:
  test(bob, '0')
  test(bob, '1')
  test(bob, '42')
  test(bob, '408')
  test(bob, '1024')
  test(bob, '101010')
  test(bob, '1010101')

# Purge.
with Beyond() as beyond, \
    Infinit(beyond = beyond) as bob, Infinit(beyond = beyond) as alice:
  bob.run(['infinit-user', '--signup', 'bob', '--email', 'bob@infinit.io'])
  alice.run(
    ['infinit-user', '--signup', 'alice', '--email', 'alice@infinit.io'])
  bob.run(['infinit-user', '--fetch', 'alice'])
  bob.run(['infinit-storage', '--create', '--as', 'bob', 's', '--filesystem'])
  assertEq(len(bob.run_json(['infinit-storage', '--list', '-s'])), 1)
  bob.run(['infinit-network', '--create', '--as', 'bob', 'n', '-S', 's', '-p'])
  assertEq(len(bob.run_json(['infinit-network', '--list', '-s', '--as', 'bob'])), 1)
  bob.run(['infinit-network', '--run', '--name', 'n', '--as', 'bob',
           '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/bob/bob/n' % bob.state_path)), 2)
  bob.run(['infinit-passport', '--create', '--as', 'bob',
           '-u', 'alice', '-n', 'n', '-p'])
  assertEq(len(bob.run_json(['infinit-passport', '--list', '-s', '--as', 'bob'])), 1)
  alice.run(['infinit-passport', '--fetch', '--as', 'alice',
             '-u', 'alice', '-n', 'bob/n'])
  alice.run(['infinit-passport', '--delete', '--as', 'alice',
             '-u', 'alice', '-n', 'bob/n'])
  bob.run(['infinit-volume', '--create', '--as', 'bob', 'v', '-N', 'n', '-p'])
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s', '--as', 'bob'])), 1)
  bob.run(['infinit-drive', '--create', '--as', 'bob', 'd',
           '-V', 'v', '-N', 'n', '-p'])
  assertEq(
    len(bob.run_json(['infinit-drive', '--list', '--as', 'bob', '-s'])), 1)
  bob.run(['infinit-storage', '--delete', '--as', 'bob',
           '--purge', '--pull', 's'])
  assertEq(len(bob.run_json(['infinit-storage', '--list', '-s', '--as', 'bob'])), 0)
  assertEq(len(bob.run_json(['infinit-network', '--list', '-s', '--as', 'bob'])), 0)
  assertEq(len(bob.run_json(['infinit-passport', '--list', '-s', '--as', 'bob'])), 0)
  assertEq(len(bob.run_json(['infinit-volume', '--list', '-s', '--as', 'bob'])), 0)
  assertEq(
    len(bob.run_json(['infinit-drive', '--list', '--as', 'bob', '-s'])), 0)
  bob.run(['infinit-network', '--fetch', '--as', 'bob', 'n'], return_code = 1)
  bob.run(['infinit-volume', '--fetch', '--as', 'bob', 'v'], return_code = 1)
  bob.run(['infinit-drive', '--fetch', '--as', 'bob', 'd'], return_code = 1)
  alice.run(['infinit-passport', '--fetch', '--as', 'alice',
             '-u', 'alice', '-n', 'bob/n'], return_code = 1)
  assertEq(len(os.listdir('%s/cache/bob' % bob.state_path)), 0)
