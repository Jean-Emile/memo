import drake
import drake.cxx
import sys

from itertools import chain
import functools

build = None
check = None
install = None
tests = None

def configure(
    python,
    git,
    bottle,
    sendwithus,
    PatchAndInstall,
    prefix = drake.Path('/usr'),
):

  global build, check, install, tests

  class PythonCopy(drake.Copy):

    def execute(self):
      if not super().execute():
        return False
      script = ';'.join([
        'import py_compile',
        'res = py_compile.compile(file = %r, dfile = %r)',
        'exit(1 if res is None else 0)',
      ]) % (str(self.target().path()), str(self.source.path()))
      self.cmd(
        'Check syntax of %s' % self.target(),
        ['%s/bin/python%s' % (python.prefix, python.version),
         '-c', script],
        throw = True)
      return True

  def copy_python(*args, **kwargs):
    return drake.copy(builder = PythonCopy, *args, **kwargs)

  ## ----- ##
  ## Build ##
  ## ----- ##

  sources = drake.nodes(
    'src/__init__.py',
    'src/__main__.py',
    'src/utils.py',
    'src/wsgi.py',
  )

  templates = drake.nodes(
    'templates/base.html',
    'templates/pages/home.html',
    'templates/pages/doc/menu.html',
    'templates/pages/doc/get_started.html',
    'templates/pages/doc/overview.html',
    'templates/pages/doc/technology.html',
    'templates/pages/doc/comparisons.html',
    'templates/pages/doc/deployments/personal_cloud.html',
    'templates/pages/doc/deployments/decentralized_fs.html',
    'templates/pages/doc/reference.html',
    'templates/pages/doc/roadmap.html',
    'templates/pages/opensource.html',
    'templates/pages/pricing.html',
    'templates/pages/solutions.html',
    'templates/pages/about.html',
    'templates/pages/contact.html',
    'templates/pages/legal.html',
  )

  resources = drake.nodes(
    'resources/robots.txt',

    'resources/images/favicon@2x.png',
    'resources/images/logo.png',
    'resources/images/logo@2x.png',
    'resources/images/bg-header-home.gif',
    'resources/images/bg-header-home.png',
    'resources/images/bg-header-home@2x.png',
    'resources/images/bg-terminal.png',
    'resources/images/bg-terminal@2x.png',
    'resources/images/bg-worldmap.png',
    'resources/images/bg-worldmap@2x.png',
    'resources/images/bg-about.jpg',
    'resources/images/home-filesystem-api.png',
    'resources/images/home-filesystem-api@2x.png',
    'resources/images/home-personal-cloud.png',
    'resources/images/home-personal-cloud@2x.png',
    'resources/images/schema-infrastructure.png',
    'resources/images/schema-infrastructure@2x.png',
    'resources/images/schema-global.png',
    'resources/images/schema-global@2x.png',
    'resources/images/schema-centralized.png',
    'resources/images/schema-centralized@2x.png',
    'resources/images/schema-distributed.png',
    'resources/images/schema-distributed@2x.png',
    'resources/images/schema-decentralized.png',
    'resources/images/schema-decentralized@2x.png',
    'resources/images/schema-technology.png',
    'resources/images/schema-technology@2x.png',
    'resources/images/desktop-client.png',
    'resources/images/desktop-client@2x.png',
    'resources/images/schema-file-system.png',
    'resources/images/schema-file-system@2x.png',
    'resources/images/schema-dht.png',
    'resources/images/schema-dht@2x.png',
    'resources/images/custom-branded-apps.png',
    'resources/images/custom-branded-apps@2x.png',
    'resources/images/infinit-cloud-solutions.png',
    'resources/images/infinit-cloud-solutions@2x.png',
    'resources/images/branded-apps.png',
    'resources/images/branded-apps@2x.png',
    'resources/images/terminal-mini.png',
    'resources/images/terminal-mini@2x.png',
    'resources/images/branded-apps.png',
    'resources/images/branded-apps@2x.png',
    'resources/images/desktop-client-mini.png',
    'resources/images/desktop-client-mini@2x.png',

    'resources/images/icons/storage.png',
    'resources/images/icons/storage@2x.png',
    'resources/images/icons/folder.png',
    'resources/images/icons/folder@2x.png',
    'resources/images/icons/network.png',
    'resources/images/icons/network@2x.png',
    'resources/images/icons/lock.png',
    'resources/images/icons/lock@2x.png',
    'resources/images/icons/scalable.png',
    'resources/images/icons/scalable@2x.png',
    'resources/images/icons/fault.png',
    'resources/images/icons/fault@2x.png',
    'resources/images/icons/idea.png',
    'resources/images/icons/idea@2x.png',
    'resources/images/icons/arrow-right.png',
    'resources/images/icons/arrow-right@2x.png',
    'resources/images/icons/platforms.png',
    'resources/images/icons/platforms@2x.png',
    'resources/images/icons/rocket.png',
    'resources/images/icons/rocket@2x.png',
    'resources/images/icons/globe.png',
    'resources/images/icons/globe@2x.png',
    'resources/images/icons/code.png',
    'resources/images/icons/code@2x.png',
    'resources/images/icons/startup.png',
    'resources/images/icons/startup@2x.png',
    'resources/images/icons/business.png',
    'resources/images/icons/business@2x.png',
    'resources/images/icons/enterprise.png',
    'resources/images/icons/enterprise@2x.png',
    'resources/images/icons/infinit-cloud-api.png',
    'resources/images/icons/infinit-cloud-api@2x.png',
    'resources/images/icons/infinit-cloud-drive.png',
    'resources/images/icons/infinit-cloud-drive@2x.png',
    'resources/images/icons/infinit-cloud-apps.png',
    'resources/images/icons/infinit-cloud-apps@2x.png',
    'resources/images/icons/globe-white.png',
    'resources/images/icons/globe-white@2x.png',
    'resources/images/icons/heart.png',
    'resources/images/icons/heart@2x.png',
    'resources/images/icons/cash.png',
    'resources/images/icons/cash@2x.png',

    'resources/images/team/antony.png',
    'resources/images/team/antony@2x.png',
    'resources/images/team/baptiste.png',
    'resources/images/team/baptiste@2x.png',
    'resources/images/team/chris.png',
    'resources/images/team/chris@2x.png',
    'resources/images/team/gaetan.png',
    'resources/images/team/gaetan@2x.png',
    'resources/images/team/julien.png',
    'resources/images/team/julien@2x.png',
    'resources/images/team/matthieu.png',
    'resources/images/team/matthieu@2x.png',
    'resources/images/team/patrick.png',
    'resources/images/team/patrick@2x.png',
    'resources/images/team/quentin.png',
    'resources/images/team/quentin@2x.png',
    'resources/images/team/you.png',
    'resources/images/team/you@2x.png',

    'resources/images/logos/360capitalpartners.png',
    'resources/images/logos/360capitalpartners@2x.png',
    'resources/images/logos/alvencapital.png',
    'resources/images/logos/alvencapital@2x.png',
    'resources/images/logos/aliveideas.png',
    'resources/images/logos/aliveideas@2x.png',
    'resources/images/logos/techstars.png',
    'resources/images/logos/techstars@2x.png',
    'resources/images/logos/slack.png',
    'resources/images/logos/slack@2x.png',
    'resources/images/logos/dropbox-logotype.png',
    'resources/images/logos/dropbox-logotype@2x.png',
    'resources/images/logos/egnyte.png',
    'resources/images/logos/egnyte@2x.png',
    'resources/images/logos/aerofs.png',
    'resources/images/logos/aerofs@2x.png',

    'resources/fonts/icons.eot',
    'resources/fonts/icons.svg',
    'resources/fonts/icons.ttf',
    'resources/fonts/icons.woff',

    'resources/css/normalize.css',
    'resources/css/main.min.css',

    'resources/js/scripts.min.js',
  )

  if python is not None:
    python_version = python.version
  else:
    python_version = '%s.%s' % sys.version_ivnfo[:2]
  python_prefix = drake.Path('lib/python%s' % python_version)
  def copy_sources(where, how = drake.copy):
    where = drake.Path(where) / python_prefix
    for node in how(sources,
                    where / 'infinit/website', strip_prefix = 'src'):
      yield node
    yield how([bottle], where, strip_prefix = True)[0]
    for n in how(sendwithus.nodes,
                 where, strip_prefix = '../%s' % sendwithus.root):
      yield n
  def copy_templates(where, how = drake.copy):
    where = drake.Path(where)
    for node in how(templates, where / 'share/infinit/website'):
      yield node
    for node in how(resources, where / 'share/infinit/website'):
      yield node

  build = drake.Rule('build')
  build << copy_sources(where = '.', how = copy_python)
  build << copy_templates(where = '.', how = drake.copy)
  install = drake.Rule('install')
  install << copy_sources(
    where = prefix,
    how = functools.partial(drake.copy, builder = PatchAndInstall))
  install << copy_templates(where = prefix, how = drake.install)

  ## ------ ##
  ## Debian ##
  ## ------ ##

  git = drake.git.Git()
  with drake.templating.Context(content = {
      'version': git.description(),
      'version_major': git.version().split('.')[0],
      'version_minor': git.version().split('.')[1],
      'python_version_major': python.version.major,
      'python_version_minor': python.version.minor,
  }):
    drake.node('control.tmpl')
  package = chain(copy_sources('debian/opt/infinit/sh'),
                  copy_templates('debian/opt/infinit/sh'),
                  drake.copy(drake.nodes('control'), 'debian/DEBIAN'))
  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'infinit-sh_%s_amd64.deb' % git.description(),
    package, 'debian').package
