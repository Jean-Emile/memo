import drake
import drake.cxx
import drake.go
import drake.debian
import drake.markdown
import sys

from itertools import chain
import functools

get_started = None

build = None
check = None
install = None
tests = None

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(
    python,
    git,
    bottle,
    sendwithus,
    PatchAndInstall,
    doughnut_proto,
    infinit,
    grpc,
    doughnut_json = None,
    prefix = drake.Path('/usr'),
):

  global build, check, install, tests

  class PythonCopy(drake.Copy):

    def execute(self):
      if not super().execute():
        return False
      script = ';'.join([
        'import py_compile',
        'res = py_compile.compile(file = %r, dfile = %r)',
        'exit(1 if res is None else 0)',
      ]) % (str(self.target.path()), str(self.source.path()))
      self.cmd(
        'Check syntax of %s' % self.target,
        ['%s/bin/python%s' % (python.prefix, python.version),
         '-c', script],
        throw = True)
      return True

  def copy_python(*args, **kwargs):
    return drake.copy(builder = PythonCopy, *args, **kwargs)

  ## ----- ##
  ## Build ##
  ## ----- ##

  sources = drake.nodes(
    'src/__init__.py',
    'src/__main__.py',
    'src/tarball_version.py',
    'src/utils.py',
    'src/wsgi.py',
  )

  version = drake.node('src/version.py')
  if git is None:
    git = drake.git.Git()
  PythonVersionGenerator(version, git)
  sources.append(version)

  dependencies = drake.nodes(
    'src/httpagentparser.py',
  )

  markdown = drake.nodes(
    'templates/pages/docs/src/markdown/filesystem.md',
    'templates/pages/docs/src/markdown/gcs.md',
    'templates/pages/docs/src/markdown/get_started/linux_apt_install.md',
    'templates/pages/docs/src/markdown/get_started/linux_yum_install.md',
    'templates/pages/docs/src/markdown/get_started/linux_fuse_install.md',
    'templates/pages/docs/src/markdown/get_started/linux_tarball_install.md',
    'templates/pages/docs/src/markdown/get_started/linux_alpine_install.md',
    'templates/pages/docs/src/markdown/get_started/linux_arm_install.md',
    'templates/pages/docs/src/markdown/get_started/docker_install.md',
    'templates/pages/docs/src/markdown/get_started/mac_fuse_install.md',
    'templates/pages/docs/src/markdown/get_started/mac_homebrew_install.md',
    'templates/pages/docs/src/markdown/get_started/mac_tarball_install.md',
    'templates/pages/docs/src/markdown/get_started/windows_dokany_install.md',
    'templates/pages/docs/src/markdown/get_started/windows_tarball_install.md',
    'templates/pages/docs/src/markdown/reference.md',
    'templates/pages/docs/src/markdown/s3.md',
    'templates/pages/docs/src/markdown/s3_compatible.md',
    'templates/pages/docs/src/markdown/upgrading.md',
    'templates/pages/docs/src/markdown/environment_variables.md',
    'templates/pages/docs/src/markdown/best_practices.md',
    'templates/pages/docs/src/markdown/technology.md',
    'templates/pages/docs/src/markdown/ldap.md',
    'templates/pages/docs/src/markdown/docker_volume_plugin.md',
  )

  import json
  doughnut_proto_json = drake.Node('../src/infinit/grpc/doughnut.json')
  with open(str(doughnut_proto_json.path())) as f:
    with drake.templating.Context(content = {'proto': json.load(f)}):
      drake.node('templates/pages/docs/src/markdown/kv.md.tmpl')
  markdown.append(drake.node('templates/pages/docs/src/markdown/kv.md'))

  changelog = drake.node(
    'ChangeLog.html',
  )
  drake.markdown.Renderer(
    source = drake.Node('../ChangeLog'),
    target = changelog,
  )

  changelog_desktop = drake.node(
    'templates/pages/desktop/ChangeLog.html',
  )
  drake.markdown.Renderer(
    source = drake.Node('templates/pages/desktop/ChangeLog'),
    target = changelog_desktop,
  )

  def copy_generated_pages(nodes):
    return drake.copy(
      nodes,
      'templates/pages/docs/generated',
      strip_prefix = True,
    )

  generated = copy_generated_pages(
    drake.nodes(*[m.name_relative.with_extension('html') for m in markdown])
  ) + copy_generated_pages([changelog])

  templates = drake.nodes(
    'templates/base.html',

    'templates/pages/404.html',
    'templates/pages/contact.html',
    'templates/pages/docker.html',
    'templates/pages/download.html',
    'templates/pages/faq.html',
    'templates/pages/home.html',
    'templates/pages/legal.html',
    'templates/pages/opensource.html',
    'templates/pages/pricing.html',
    'templates/pages/product.html',
    'templates/pages/update.html',

    'templates/pages/projects/memo.html',

    'templates/pages/docs/changelog.html',
    'templates/pages/docs/comparison.html',
    'templates/pages/docs/deployments.html',
    'templates/pages/docs/filesystem.html',
    'templates/pages/docs/gcs.html',
    'templates/pages/docs/menu.html',
    'templates/pages/docs/reference.html',
    'templates/pages/docs/roadmap.html',
    'templates/pages/docs/s3.html',
    'templates/pages/docs/s3_compatible.html',
    'templates/pages/docs/status.html',
    'templates/pages/docs/upgrading.html',
    'templates/pages/docs/environment_variables.html',
    'templates/pages/docs/best_practices.html',
    'templates/pages/docs/technology.html',
    'templates/pages/docs/docker_volume_plugin.html',
    'templates/pages/docs/kv_overview.html',
    'templates/pages/docs/kv_api.html',

    'templates/pages/docs/get_started.html',

    'templates/pages/desktop/desktop.html',
    'templates/pages/desktop/ChangeLog.html',

    'templates/pages/press/investors.html',
    'templates/pages/press/pr_storage.html',
    'templates/pages/press/pr_tech.html',
    'templates/pages/press/pr_docker.html',
    'templates/pages/press/resources.html',
    'templates/pages/press/resources_docker.html',

    'templates/pages/users/confirm_email.html',
  ) + generated

  resources = drake.nodes(
    'resources/robots.txt',
    'resources/sitemap.xml',

    'resources/images/favicon@2x.png',
    'resources/images/logotype.png',
    'resources/images/logotype-small.png',
    'resources/images/logotype-small@2x.png',
    'resources/images/schema-infrastructure.png',
    'resources/images/schema-infrastructure@2x.png',
    'resources/images/schema-global.png',
    'resources/images/schema-global@2x.png',
    'resources/images/schema-global2.png',
    'resources/images/schema-global2@2x.png',
    'resources/images/schema-storage-pool.png',
    'resources/images/schema-storage-pool@2x.png',
    'resources/images/schema-global-dropbox.png',
    'resources/images/schema-global-dropbox@2x.png',
    'resources/images/schema-centralized.png',
    'resources/images/schema-centralized@2x.png',
    'resources/images/schema-distributed.png',
    'resources/images/schema-distributed@2x.png',
    'resources/images/schema-decentralized.png',
    'resources/images/schema-decentralized@2x.png',
    'resources/images/schema-decentralized-theory.png',
    'resources/images/schema-decentralized-theory@2x.png',
    'resources/images/schema-decentralized-s3.png',
    'resources/images/schema-decentralized-s3@2x.png',
    'resources/images/schema-technology-infinit.png',
    'resources/images/schema-technology-infinit@2x.png',
    'resources/images/schema-technology-dht-overlay.png',
    'resources/images/schema-technology-dht-overlay@2x.png',
    'resources/images/schema-persistent-storage-docker.png',
    'resources/images/schema-persistent-storage-docker@2x.png',
    'resources/images/schema-storage-platform.png',
    'resources/images/schema-storage-platform@2x.png',
    'resources/images/desktop-client.png',
    'resources/images/desktop-client@2x.png',
    'resources/images/schema-file-system.png',
    'resources/images/schema-file-system@2x.png',
    'resources/images/schema-replication.png',
    'resources/images/schema-replication@2x.png',
    'resources/images/custom-branded-apps.png',
    'resources/images/custom-branded-apps@2x.png',
    'resources/images/infinit-cloud-solutions.png',
    'resources/images/infinit-cloud-solutions@2x.png',
    'resources/images/branded-apps.png',
    'resources/images/branded-apps@2x.png',
    'resources/images/terminal-mini.png',
    'resources/images/terminal-mini@2x.png',
    'resources/images/terminal-home.png',
    'resources/images/terminal-home@2x.png',
    'resources/images/branded-apps.png',
    'resources/images/branded-apps@2x.png',
    'resources/images/desktop-client-mini.png',
    'resources/images/desktop-client-mini@2x.png',
    'resources/images/virtual-disk-mac.png',
    'resources/images/virtual-disk-mac@2x.png',
    'resources/images/schema-nfs-like.png',
    'resources/images/schema-nfs-like@2x.png',
    'resources/images/schema-two-clients.png',
    'resources/images/schema-two-clients@2x.png',
    'resources/images/schema-two-containers.png',
    'resources/images/schema-two-containers@2x.png',
    'resources/images/infinit-sh.png',
    'resources/images/infinit-sh@2x.png',
    'resources/images/schema-chord.png',
    'resources/images/schema-chord@2x.png',
    'resources/images/schema-dhash.png',
    'resources/images/schema-dhash@2x.png',
    'resources/images/schema-encryption.png',
    'resources/images/schema-encryption@2x.png',
    'resources/images/schema-deployment-one-server.png',
    'resources/images/schema-deployment-one-server@2x.png',
    'resources/images/schema-deployment-multi-servers.png',
    'resources/images/schema-deployment-multi-servers@2x.png',
    'resources/images/schema-cover.png',
    'resources/images/terminal.png',
    'resources/images/encryption-fs.png',
    'resources/images/encryption-fs@2x.png',
    'resources/images/mesos.png',
    'resources/images/mesos@2x.png',
    'resources/images/social-village.png',
    'resources/images/social-village@2x.png',
    'resources/images/schema-docker-volume-plugin.png',
    'resources/images/schema-docker-volume-plugin@2x.png',
    'resources/images/schema-decentralized-4-devices.png',
    'resources/images/schema-decentralized-4-devices@2x.png',
    'resources/images/bg-worldmap.png',
    'resources/images/bg-worldmap@2x.png',
    'resources/images/bg-replication.png',
    'resources/images/bg-replication@2x.png',
    'resources/images/bg-decentralized.png',
    'resources/images/bg-decentralized@2x.png',
    'resources/images/bg-project-opensource.png',
    'resources/images/schema-persistent-storage-docker.png',
    'resources/images/schema-persistent-storage-docker@2x.png',
    'resources/images/schema-hyperscalable.png',
    'resources/images/schema-hyperscalable@2x.png',
    'resources/images/schema-hyperconvergent.png',
    'resources/images/schema-hyperconvergent@2x.png',
    'resources/images/arrow-schema-docker.png',
    'resources/images/arrow-schema-docker@2x.png',
    'resources/images/schema-scalability-infinit.png',
    'resources/images/schema-scalability-infinit@2x.png',
    'resources/images/schema-memo-architecture.png',
    'resources/images/schema-memo-architecture@2x.png',
    'resources/images/schema-etcd-architecture.png',
    'resources/images/schema-etcd-architecture@2x.png',
    'resources/images/share-image.png',

    'resources/images/docs/gcs/create-bucket.png',
    'resources/images/docs/gcs/oauth-permissions.png',

    'resources/images/docs/s3/attach-policy.png',
    'resources/images/docs/s3/create-bucket.png',
    'resources/images/docs/s3/create-policy.png',
    'resources/images/docs/s3/create-user.png',

    'resources/images/bg/grey.png',
    'resources/images/bg/grey@2x.png',
    'resources/images/bg/dots.png',
    'resources/images/bg/dots@2x.png',
    'resources/images/bg/grey@2x.gif',

    'resources/scripts/get-started.sh',
    'resources/scripts/deployments/centralized.sh',
    'resources/scripts/deployments/distributed.sh',
    'resources/scripts/deployments/decentralized.sh',

    'resources/fonts/icons.eot',
    'resources/fonts/icons.svg',
    'resources/fonts/icons.ttf',
    'resources/fonts/icons.woff',
    'resources/fonts/icons.ttf',
    'resources/fonts/sf-bold-webfont.woff',
    'resources/fonts/sf-bold-webfont.woff2',

    'resources/json/comparisons.json',
    'resources/json/opensource.json',

    'resources/css/normalize.css',
    'resources/css/main.min.css',

    'resources/js/instantsearch.min.js',
    'resources/js/scripts.min.js',
  )

  value_store = {}
  value_store['cpp'] = drake.nodes(
    'resources/scripts/value-store/cpp/MakeNamedBlock',
    'resources/scripts/value-store/cpp/MakeImmutableBlock',
    'resources/scripts/value-store/cpp/Update',
    'resources/scripts/value-store/cpp/Fetch',
    'resources/scripts/value-store/cpp/Remove',
    'resources/scripts/value-store/cpp/Insert',
    'resources/scripts/value-store/cpp/NamedBlockAddress',
    'resources/scripts/value-store/cpp/MakeMutableBlock',
    type = drake.cxx.Header
  )
  value_store['python'] = drake.nodes(
    'resources/scripts/value-store/python/MakeNamedBlock',
    'resources/scripts/value-store/python/MakeImmutableBlock',
    'resources/scripts/value-store/python/Update',
    'resources/scripts/value-store/python/Fetch',
    'resources/scripts/value-store/python/Remove',
    'resources/scripts/value-store/python/Insert',
    'resources/scripts/value-store/python/NamedBlockAddress',
    'resources/scripts/value-store/python/MakeMutableBlock',
  )
  value_store['go'] = drake.nodes(
    'resources/scripts/value-store/go/MakeNamedBlock',
    'resources/scripts/value-store/go/MakeImmutableBlock',
    'resources/scripts/value-store/go/Update',
    'resources/scripts/value-store/go/Fetch',
    'resources/scripts/value-store/go/Remove',
    'resources/scripts/value-store/go/Insert',
    'resources/scripts/value-store/go/NamedBlockAddress',
    'resources/scripts/value-store/go/MakeMutableBlock',
    type = drake.go.Source
  )
  resources += chain(*value_store.values())

  resources_logos = drake.nodes(
    'resources/images/logos/360capitalpartners.png',
    'resources/images/logos/360capitalpartners@2x.png',
    'resources/images/logos/alvencapital.png',
    'resources/images/logos/alvencapital@2x.png',
    'resources/images/logos/aliveideas.png',
    'resources/images/logos/aliveideas@2x.png',
    'resources/images/logos/techstars.png',
    'resources/images/logos/techstars@2x.png',
    'resources/images/logos/slack.png',
    'resources/images/logos/slack@2x.png',
    'resources/images/logos/dropbox-logotype.png',
    'resources/images/logos/dropbox-logotype@2x.png',
    'resources/images/logos/egnyte.png',
    'resources/images/logos/egnyte@2x.png',
    'resources/images/logos/aerofs.png',
    'resources/images/logos/aerofs@2x.png',
    'resources/images/logos/afs.png',
    'resources/images/logos/afs@2x.png',
    'resources/images/logos/slack-big.png',
    'resources/images/logos/slack-big@2x.png',
    'resources/images/logos/google-drive-big.png',
    'resources/images/logos/google-drive-big@2x.png',
    'resources/images/logos/osxfuse.png',
    'resources/images/logos/osxfuse@2x.png',
    'resources/images/logos/infinit.png',
    'resources/images/logos/infinit@2x.png',
    'resources/images/logos/techcrunch.png',
    'resources/images/logos/techcrunch@2x.png',
    'resources/images/logos/siliconangle.png',
    'resources/images/logos/siliconangle@2x.png',
    'resources/images/logos/infoworld.png',
    'resources/images/logos/infoworld@2x.png',
    'resources/images/logos/glusterfs.png',
    'resources/images/logos/glusterfs@2x.png',
    'resources/images/logos/s3.png',
    'resources/images/logos/s3@2x.png',
    'resources/images/logos/tahoe-lafs.png',
    'resources/images/logos/tahoe-lafs@2x.png',
    'resources/images/logos/bsync.png',
    'resources/images/logos/bsync@2x.png',
    'resources/images/logos/sugarsync.png',
    'resources/images/logos/sugarsync@2x.png',
    'resources/images/logos/storj.png',
    'resources/images/logos/storj@2x.png',
    'resources/images/logos/pydio.png',
    'resources/images/logos/pydio@2x.png',
    'resources/images/logos/bitcasa.png',
    'resources/images/logos/bitcasa@2x.png',
    'resources/images/logos/amazon-cloud-drive.png',
    'resources/images/logos/amazon-cloud-drive@2x.png',
    'resources/images/logos/backblaze.png',
    'resources/images/logos/backblaze@2x.png',
    'resources/images/logos/box.png',
    'resources/images/logos/box@2x.png',
    'resources/images/logos/ceph.png',
    'resources/images/logos/ceph@2x.png',
    'resources/images/logos/coda.png',
    'resources/images/logos/coda@2x.png',
    'resources/images/logos/dropbox.png',
    'resources/images/logos/dropbox@2x.png',
    'resources/images/logos/gcs.png',
    'resources/images/logos/gcs@2x.png',
    'resources/images/logos/hammer.png',
    'resources/images/logos/hammer@2x.png',
    'resources/images/logos/hdfs.png',
    'resources/images/logos/hdfs@2x.png',
    'resources/images/logos/icloud.png',
    'resources/images/logos/icloud@2x.png',
    'resources/images/logos/ipfs.png',
    'resources/images/logos/ipfs@2x.png',
    'resources/images/logos/lustre.png',
    'resources/images/logos/lustre@2x.png',
    'resources/images/logos/moosefs.png',
    'resources/images/logos/moosefs@2x.png',
    'resources/images/logos/nfs.png',
    'resources/images/logos/nfs@2x.png',
    'resources/images/logos/owncloud.png',
    'resources/images/logos/owncloud@2x.png',
    'resources/images/logos/wuala.png',
    'resources/images/logos/wuala@2x.png',
    'resources/images/logos/xtreemfs.png',
    'resources/images/logos/xtreemfs@2x.png',
    'resources/images/logos/docker.png',
    'resources/images/logos/docker@2x.png',
    'resources/images/logos/mesosphere.png',
    'resources/images/logos/mesosphere@2x.png',
    'resources/images/logos/coreos.png',
    'resources/images/logos/coreos@2x.png',
    'resources/images/logos/kubernetes.png',
    'resources/images/logos/kubernetes@2x.png',
    'resources/images/logos/openstack.png',
    'resources/images/logos/openstack@2x.png',
    'resources/images/logos/docker-big.png',
    'resources/images/logos/docker-big@2x.png',
    'resources/images/logos/meetup.png',
    'resources/images/logos/meetup@2x.png',
    'resources/images/logos/twitter-infinit.png',
    'resources/images/logos/twitter-infinit@2x.png',
    'resources/images/logos/object-storages.png',
    'resources/images/logos/object-storages@2x.png',
    'resources/images/logos/elle.png',
    'resources/images/logos/elle@2x.png',
    'resources/images/logos/drake.png',
    'resources/images/logos/drake@2x.png',
    'resources/images/logos/ubuntu.png',
    'resources/images/logos/ubuntu@2x.png',
    'resources/images/logos/debian.png',
    'resources/images/logos/debian@2x.png',
    'resources/images/logos/centos.png',
    'resources/images/logos/centos@2x.png',
    'resources/images/logos/alpine.png',
    'resources/images/logos/alpine@2x.png',
    'resources/images/logos/raspberry.png',
    'resources/images/logos/raspberry@2x.png',
    'resources/images/logos/mesosphere-small.png',
    'resources/images/logos/mesosphere-small@2x.png',
    'resources/images/logos/kubernetes-small.png',
    'resources/images/logos/kubernetes-small@2x.png',
    'resources/images/logos/docker-small.png',
    'resources/images/logos/docker-small@2x.png',
    'resources/images/logos/docker-vector.png',
    'resources/images/logos/docker-vector@2x.png',
    'resources/images/logos/openstack-small.png',
    'resources/images/logos/openstack-small@2x.png',
    'resources/images/logos/gnu.png',
    'resources/images/logos/gnu@2x.png',
    'resources/images/logos/hedvig.png',
    'resources/images/logos/hedvig@2x.png',
    'resources/images/logos/portworx.png',
    'resources/images/logos/portworx@2x.png',
    'resources/images/logos/storageos.png',
    'resources/images/logos/storageos@2x.png',
    'resources/images/logos/convergeio.png',
    'resources/images/logos/convergeio@2x.png',
    'resources/images/logos/leofs.png',
    'resources/images/logos/leofs@2x.png',
    'resources/images/logos/wikipedia.png',
    'resources/images/logos/wikipedia@2x.png',
    'resources/images/logos/minio.png',
    'resources/images/logos/minio@2x.png',
    'resources/images/logos/memo.png',
    'resources/images/logos/memo@2x.png',
    'resources/images/logos/github.png',
    'resources/images/logos/github@2x.png',
    'resources/images/logos/etcd-consul-zookeeper.png',
    'resources/images/logos/etcd-consul-zookeeper@2x.png',
  )

  resources += drake.nodes(
    'resources/json/comparisons.json',
    'resources/json/opensource.json',
  )

  resources_icons = drake.nodes(
    'resources/images/icons/storage.png',
    'resources/images/icons/storage@2x.png',
    'resources/images/icons/folder.png',
    'resources/images/icons/folder@2x.png',
    'resources/images/icons/network.png',
    'resources/images/icons/network@2x.png',
    'resources/images/icons/security.png',
    'resources/images/icons/security@2x.png',
    'resources/images/icons/scalable.png',
    'resources/images/icons/scalable@2x.png',
    'resources/images/icons/scalability.png',
    'resources/images/icons/scalability@2x.png',
    'resources/images/icons/fault-tolerance.png',
    'resources/images/icons/fault-tolerance@2x.png',
    'resources/images/icons/idea.png',
    'resources/images/icons/idea@2x.png',
    'resources/images/icons/arrow-right.png',
    'resources/images/icons/arrow-right@2x.png',
    'resources/images/icons/arrow-up.png',
    'resources/images/icons/arrow-up@2x.png',
    'resources/images/icons/platforms.png',
    'resources/images/icons/platforms@2x.png',
    'resources/images/icons/rocket.png',
    'resources/images/icons/rocket@2x.png',
    'resources/images/icons/globe.png',
    'resources/images/icons/globe@2x.png',
    'resources/images/icons/code.png',
    'resources/images/icons/code@2x.png',
    'resources/images/icons/startup.png',
    'resources/images/icons/startup@2x.png',
    'resources/images/icons/business.png',
    'resources/images/icons/business@2x.png',
    'resources/images/icons/enterprise.png',
    'resources/images/icons/enterprise@2x.png',
    'resources/images/icons/community.png',
    'resources/images/icons/community@2x.png',
    'resources/images/icons/infinit-cloud-api.png',
    'resources/images/icons/infinit-cloud-api@2x.png',
    'resources/images/icons/infinit-cloud-drive.png',
    'resources/images/icons/infinit-cloud-drive@2x.png',
    'resources/images/icons/infinit-cloud-apps.png',
    'resources/images/icons/infinit-cloud-apps@2x.png',
    'resources/images/icons/infinit-cli.png',
    'resources/images/icons/infinit-cli@2x.png',
    'resources/images/icons/globe-white.png',
    'resources/images/icons/globe-white@2x.png',
    'resources/images/icons/heart.png',
    'resources/images/icons/heart@2x.png',
    'resources/images/icons/cash.png',
    'resources/images/icons/cash@2x.png',
    'resources/images/icons/osxfuse.png',
    'resources/images/icons/osxfuse@2x.png',
    'resources/images/icons/control.png',
    'resources/images/icons/control@2x.png',
    'resources/images/icons/keyboard.png',
    'resources/images/icons/keyboard@2x.png',
    'resources/images/icons/bracket-right.png',
    'resources/images/icons/bracket-right@2x.png',
    'resources/images/icons/bracket-down.png',
    'resources/images/icons/bracket-down@2x.png',
    'resources/images/icons/arrow-down.png',
    'resources/images/icons/email-confirmed.png',
    'resources/images/icons/email-confirmed@2x.png',
    'resources/images/icons/email-unconfirmed.png',
    'resources/images/icons/email-unconfirmed@2x.png',
    'resources/images/icons/search.png',
    'resources/images/icons/search@2x.png',
    'resources/images/icons/delete.png',
    'resources/images/icons/comparison.png',
    'resources/images/icons/comparison@2x.png',
    'resources/images/icons/idea-clean.png',
    'resources/images/icons/idea-clean@2x.png',
    'resources/images/icons/add.png',
    'resources/images/icons/add@2x.png',
    'resources/images/icons/remove.png',
    'resources/images/icons/remove@2x.png',
    'resources/images/icons/fire.png',
    'resources/images/icons/fire@2x.png',
    'resources/images/icons/cli.png',
    'resources/images/icons/cli@2x.png',
    'resources/images/icons/lock.png',
    'resources/images/icons/lock@2x.png',
    'resources/images/icons/lock-yellow-big.png',
    'resources/images/icons/lock-yellow-big@2x.png',
    'resources/images/icons/caret-down.png',
    'resources/images/icons/caret-down@2x.png',
    'resources/images/icons/interoperability.png',
    'resources/images/icons/interoperability@2x.png',
    'resources/images/icons/logic.png',
    'resources/images/icons/logic@2x.png',
    'resources/images/icons/redundancy.png',
    'resources/images/icons/redundancy@2x.png',
    'resources/images/icons/model.png',
    'resources/images/icons/model@2x.png',
    'resources/images/icons/environment.png',
    'resources/images/icons/environment@2x.png',
    'resources/images/icons/model.png',
    'resources/images/icons/model@2x.png',
    'resources/images/icons/interface.png',
    'resources/images/icons/interface@2x.png',
    'resources/images/icons/hierarchy.png',
    'resources/images/icons/hierarchy@2x.png',
    'resources/images/icons/apple.png',
    'resources/images/icons/apple@2x.png',
    'resources/images/icons/debian.png',
    'resources/images/icons/debian@2x.png',
    'resources/images/icons/windows.png',
    'resources/images/icons/windows@2x.png',
    'resources/images/icons/external-link.png',
    'resources/images/icons/external-link@2x.png',
    'resources/images/icons/status-healthy.png',
    'resources/images/icons/status-healthy@2x.png',
    'resources/images/icons/status-problems.png',
    'resources/images/icons/status-problems@2x.png',
    'resources/images/icons/status-down.png',
    'resources/images/icons/status-down@2x.png',
    'resources/images/icons/users.png',
    'resources/images/icons/users@2x.png',
    'resources/images/icons/address-book.png',
    'resources/images/icons/address-book@2x.png',
    'resources/images/icons/monitoring.png',
    'resources/images/icons/monitoring@2x.png',
    'resources/images/icons/priority.png',
    'resources/images/icons/priority@2x.png',
    'resources/images/icons/key.png',
    'resources/images/icons/key@2x.png',
    'resources/images/icons/device-iphone.png',
    'resources/images/icons/device-iphone@2x.png',
    'resources/images/icons/on-premise-hub.png',
    'resources/images/icons/on-premise-hub@2x.png',
    'resources/images/icons/consulting.png',
    'resources/images/icons/consulting@2x.png',
    'resources/images/icons/cluster.png',
    'resources/images/icons/cluster@2x.png',
    'resources/images/icons/quota.png',
    'resources/images/icons/quota@2x.png',
    'resources/images/icons/software.png',
    'resources/images/icons/software@2x.png',
    'resources/images/icons/multipurpose.png',
    'resources/images/icons/multipurpose@2x.png',
    'resources/images/icons/modern.png',
    'resources/images/icons/modern@2x.png',
    'resources/images/icons/healing.png',
    'resources/images/icons/healing@2x.png',
    'resources/images/icons/fault-tolerance-small.png',
    'resources/images/icons/fault-tolerance-small@2x.png',
    'resources/images/icons/fault-tolerance-yellow-big.png',
    'resources/images/icons/fault-tolerance-yellow-big@2x.png',
    'resources/images/icons/lock-small.png',
    'resources/images/icons/lock-small@2x.png',
    'resources/images/icons/compression.png',
    'resources/images/icons/compression@2x.png',
    'resources/images/icons/compression-yellow-big.png',
    'resources/images/icons/compression-yellow-big@2x.png',
    'resources/images/icons/redundancy-small.png',
    'resources/images/icons/redundancy-small@2x.png',
    'resources/images/icons/redundancy-yellow-big.png',
    'resources/images/icons/redundancy-yellow-big@2x.png',
    'resources/images/icons/deduplication.png',
    'resources/images/icons/deduplication@2x.png',
    'resources/images/icons/deduplication-yellow-big.png',
    'resources/images/icons/deduplication-yellow-big@2x.png',
    'resources/images/icons/versioning.png',
    'resources/images/icons/versioning@2x.png',
    'resources/images/icons/versioning-yellow-big.png',
    'resources/images/icons/versioning-yellow-big@2x.png',
    'resources/images/icons/server.png',
    'resources/images/icons/server@2x.png',
    'resources/images/icons/server-transparent.png',
    'resources/images/icons/server-transparent@2x.png',
    'resources/images/icons/server-yellow.png',
    'resources/images/icons/server-yellow@2x.png',
    'resources/images/icons/docker-volume-plugin.png',
    'resources/images/icons/docker-volume-plugin@2x.png',
    'resources/images/icons/infinit-cluster.png',
    'resources/images/icons/infinit-cluster@2x.png',
    'resources/images/icons/docker-cut.png',
    'resources/images/icons/docker-cut@2x.png',
    'resources/images/icons/container.png',
    'resources/images/icons/container@2x.png',
    'resources/images/icons/cross-red.png',
    'resources/images/icons/cross-red@2x.png',
    'resources/images/icons/replay.png',
    'resources/images/icons/replay@2x.png',
    'resources/images/icons/macbook.png',
    'resources/images/icons/macbook@2x.png',
    'resources/images/icons/imac.png',
    'resources/images/icons/imac@2x.png',
    'resources/images/icons/screen-red.png',
    'resources/images/icons/screen-red@2x.png',
    'resources/images/icons/play.png',
    'resources/images/icons/play@2x.png',
    'resources/images/icons/file.png',
    'resources/images/icons/file@2x.png',
    'resources/images/icons/object-storage.png',
    'resources/images/icons/object-storage@2x.png',
    'resources/images/icons/block-device.png',
    'resources/images/icons/block-device@2x.png',
    'resources/images/icons/block-device.png',
    'resources/images/icons/block-device@2x.png',
    'resources/images/icons/hyperconvergence.png',
    'resources/images/icons/hyperconvergence@2x.png',
    'resources/images/icons/hyperscalable.png',
    'resources/images/icons/hyperscalable@2x.png',
    'resources/images/icons/question-mark.png',
    'resources/images/icons/question-mark@2x.png',
    'resources/images/icons/server-red.png',
    'resources/images/icons/server-red@2x.png',
    'resources/images/icons/block-size.png',
    'resources/images/icons/block-size@2x.png',
    'resources/images/icons/pricing.png',
    'resources/images/icons/pricing@2x.png',
    'resources/images/icons/consistency.png',
    'resources/images/icons/consistency@2x.png',
    'resources/images/icons/content-addressable.png',
    'resources/images/icons/content-addressable@2x.png',
    'resources/images/icons/decentralized.png',
    'resources/images/icons/decentralized@2x.png',
    'resources/images/icons/policy-based.png',
    'resources/images/icons/policy-based@2x.png',
    'resources/images/icons/strongly-consistent.png',
    'resources/images/icons/strongly-consistent@2x.png',
    'resources/images/icons/performance.png',
    'resources/images/icons/performance@2x.png',
    'resources/images/icons/resilience.png',
    'resources/images/icons/resilience@2x.png',
  )

  resources = resources + resources_icons + resources_logos
  global get_started
  get_started = {}
  get_started['scripts'] = drake.nodes(
    'resources/scripts/get-started/doctor.sh',
    'resources/scripts/get-started/bob/device_C/echo-failed.sh',
    'resources/scripts/get-started/bob/device_C/cat.sh',
    'resources/scripts/get-started/bob/device_C/network-fetch.sh',
    'resources/scripts/get-started/bob/device_C/volume-mount.sh',
    'resources/scripts/get-started/bob/device_C/list-permissions.sh',
    'resources/scripts/get-started/bob/device_C/passport-fetch.sh',
    'resources/scripts/get-started/bob/device_C/fetch-alice.sh',
    'resources/scripts/get-started/bob/device_C/volume-fetch.sh',
    'resources/scripts/get-started/bob/device_C/ls-failed.sh',
    'resources/scripts/get-started/bob/device_C/network-link.sh',
    'resources/scripts/get-started/bob/device_C/signup.sh',
    'resources/scripts/get-started/alice/device_A/cat.sh',
    'resources/scripts/get-started/alice/device_A/set-permissions.sh',
    'resources/scripts/get-started/alice/device_A/volume-mount.sh',
    'resources/scripts/get-started/alice/device_A/silo-create.sh',
    'resources/scripts/get-started/alice/device_A/volume-mount.sh',
    'resources/scripts/get-started/alice/device_A/list-permissions-before.sh',
    'resources/scripts/get-started/alice/device_A/volume-create.sh',
    'resources/scripts/get-started/alice/device_A/transmit.sh',
    'resources/scripts/get-started/alice/device_A/fetch-bob.sh',
    'resources/scripts/get-started/alice/device_A/set-directory-permissions.sh',
    'resources/scripts/get-started/alice/device_A/network-create.sh',
    'resources/scripts/get-started/alice/device_A/echo.sh',
    'resources/scripts/get-started/alice/device_A/passport-create-bob.sh',
    'resources/scripts/get-started/alice/device_A/signup.sh',
    'resources/scripts/get-started/alice/device_A/list-permissions-after.sh',
    'resources/scripts/get-started/alice/device_B/cat.sh',
    'resources/scripts/get-started/alice/device_B/network-fetch.sh',
    'resources/scripts/get-started/alice/device_B/ls.sh',
    'resources/scripts/get-started/alice/device_B/volume-mount.sh',
    'resources/scripts/get-started/alice/device_B/volume-fetch.sh',
    'resources/scripts/get-started/alice/device_B/network-link.sh',
    'resources/scripts/get-started/alice/device_B/receive.sh',
  )
  get_started['variables'] = drake.nodes(
    'resources/json/platform/linux.json',
    'resources/json/platform/windows.json',
  )
  resources += get_started['variables']

  if python is not None:
    python_version = python.version
  else:
    python_version = '%s.%s' % sys.version_ivnfo[:2]
  python_prefix = drake.Path('lib/python%s' % python_version)

  def copy_sources(where, how = drake.copy):
    where = drake.Path(where) / python_prefix
    yield from how(sources,
                   where / 'infinit/website', strip_prefix = 'src')
    yield from how(dependencies,
                   where, strip_prefix = 'src')
    yield how([bottle], where, strip_prefix = True)[0]
    yield from how(sendwithus.nodes,
                   where, strip_prefix = '../%s' % sendwithus.root)

  def copy_templates(where, how = drake.copy):
    where = drake.Path(where)
    yield from how(templates, where / 'share/infinit/website')
    yield from how(resources, where / 'share/infinit/website')
    yield from how(get_started['scripts'], where / 'share/infinit/website/templates/pages/docs',
                   strip_prefix = 'resources')
    yield drake.copy(doughnut_proto, where / 'share/infinit/website/resources/scripts/kv',
                              strip_prefix = True)
    yield drake.copy(doughnut_json, where / 'share/infinit/website/resources/scripts/kv',
                              strip_prefix = True)

  build = drake.Rule('build')
  build << copy_sources(where = '.', how = copy_python)
  build << copy_templates(where = '.', how = drake.copy)
  install = drake.Rule('install')
  install << copy_sources(
    where = prefix,
    how = functools.partial(drake.copy, builder = PatchAndInstall))
  install << copy_templates(where = prefix, how = drake.install)

  ## ------ ##
  ## Debian ##
  ## ------ ##

  git = drake.git.Git()
  package = chain(copy_sources('debian/opt/infinit/sh'),
                  copy_templates('debian/opt/infinit/sh'))
  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'infinit-sh_%s_amd64.deb' % git.description(),
    {
      'Package': 'infinit-sh',
      'Maintainer': 'Quentin Hocquet <debian@infinit.io>',
      'Version': git.version(),
      'Homepage': 'http://www.infinit.sh',
      'Architecture': 'amd64',
      'Depends': 'python3, python3-requests, python3-mako',
      'Description': 'Infinit beyond server.',
    },
    package, 'debian').package

  ## ----- ##
  ## Tests ##
  ## ----- ##
  tests = drake.Rule('tests')
  check = drake.Rule('check')

  # Value-Store gRPC API.
  class Runner(drake.Runner):

    def __init__(self, src, infinit, sources = list(), **kwargs):
      super().__init__(src,
                       sources = list(chain([infinit], sources)),
                       **kwargs)
      self.infinit = infinit
      self.portfile = None

    def execute(self):
      import tempfile
      with tempfile.TemporaryDirectory() as infinit_home:
        env = {
          'INFINIT_HOME': infinit_home,
          'INFINIT_USER': 'klaus'
        }
        import subprocess
        subprocess.check_output([str(self.infinit.path()),
                                 'user', 'create'],
                                env = env)
        subprocess.check_output([str(self.infinit.path()),
                                 'silo', 'create', 'filesystem', 'silo'],
                                env = env)
        subprocess.check_output([str(self.infinit.path()),
                                 'network', 'create', '--silo', 'silo', 'net'],
                                env = env)
        port = tempfile.mkstemp()[1]
        with subprocess.Popen(
            [str(self.infinit.path()),
             'network', 'run', 'net', '--grpc', '127.0.0.1:0',
             '--grpc-port-file', port],
            env = env) as infinit:
          self.portfile = port
          try:
            return super().execute()
          finally:
            infinit.terminate()

    @property
    def port(self):
      '''Port is chosen by infinit.

      Because we don't want the random port to be part of the hash, return 0
      until the port is chosen.
      '''
      if self.portfile is None:
        return '0'
      import time
      import os
      while not os.path.exists(self.portfile):
        time.sleep(0.2)
      port = ''
      while len(port) == 0:
        time.sleep(0.2)
        with open(self.portfile, 'r') as f:
          port = str(f.readline()).strip()
      return port

    @property
    def command(self):
      path = str(self.__exe.path())
      if not self.__exe.path().absolute():
        path = './%s' % path
      return self.__prefix + [path] + ['127.0.0.1:%s' % self.port]

  rule_check = drake.Rule('check')
  import os, stat
  def render(path, sources):
    with drake.templating.Context(
        template_dir = [str(drake.path_source('.'))],
        sources = sources,
        post_process = lambda n: os.chmod(str(n.path()), stat.S_IRUSR | stat.S_IXUSR)):
      drake.node(path)
  render('tests/value-store/grpc/api.py.tmpl', value_store['python'])
  render('tests/value-store/grpc/api.cc.tmpl', value_store['cpp'])
  render('tests/value-store/grpc/api.go.tmpl', value_store['go'])
  # Python.
  # XXX: Pass the node...
  doughnut_pb_python = drake.node('../src/infinit/grpc/doughnut_pb2.py')
  rule_check << Runner(
    drake.node('tests/value-store/grpc/api.py'),
    infinit = infinit,
    env = {
      'PYTHONPATH': str(doughnut_pb_python.path(absolute = True).dirname())
    },
    sources = [doughnut_pb_python]).targets()
  # Cpp
  config = drake.cxx.Config(grpc.cxx_config)
  config += grpc.grpc.cxx_config
  config.lib('dl')
  config.add_local_include_path('../src/infinit/grpc')
  rule_check << Runner(
    drake.cxx.Executable(
      'tests/value-store/grpc/api-cpp',
      drake.nodes('tests/value-store/grpc/api.cc',) +
      grpc.gendn.targets() +
      [grpc.grpc_lib, grpc.grpc.protobuf_lib],
      drake.cxx.Toolkit(),
      config),
    infinit = infinit).targets()
  # Go.
  go_toolkit = drake.go.Toolkit(
    path = str(drake.path_build(absolute = True) / '.go'))
  gen = grpc.GRPCGoGen(doughnut_proto,
                       toolkit = go_toolkit,
                       protoc = grpc.grpc.protoc)
  rule_check << Runner(
    drake.go.Executable(
      source = drake.go.Source("tests/value-store/grpc/api.go"),
      toolkit = go_toolkit,
      config = drake.go.Config(),
      sources = drake.copy(
        gen.targets(),
        drake.Path(go_toolkit.path) / 'src/doughnut',
        strip_prefix = True)),
    infinit = infinit).targets()

  # Local Variables:
  # mode: python
  # End:
